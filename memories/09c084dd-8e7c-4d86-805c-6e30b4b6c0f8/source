  


<!DOCTYPE html>
<html>
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# githubog: http://ogp.me/ns/fb/githubog#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>organizer/organizer.org at master · trobertson/organizer · GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub" />
    <link rel="apple-touch-icon-precomposed" sizes="57x57" href="apple-touch-icon-114.png" />
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="apple-touch-icon-114.png" />
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="apple-touch-icon-144.png" />
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="apple-touch-icon-144.png" />
    <meta name="msapplication-TileImage" content="/windows-tile.png">
    <meta name="msapplication-TileColor" content="#ffffff">

    
    
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <meta content="authenticity_token" name="csrf-param" />
<meta content="KmHydKH3SeT8GVB3bXuZxcRmWjP4/MkHUzYe5Oy/kgo=" name="csrf-token" />

    <link href="https://a248.e.akamai.net/assets.github.com/assets/github-cfca8eb8e80a2c3bce67464f1c85defd532c0afd.css" media="screen" rel="stylesheet" type="text/css" />
    <link href="https://a248.e.akamai.net/assets.github.com/assets/github2-37f887f5d0cc1ca1790f28b826acc90e7bf52a62.css" media="screen" rel="stylesheet" type="text/css" />
    


    <script src="https://a248.e.akamai.net/assets.github.com/assets/frameworks-eee761b9d5e06efb064aaaf528c44ef8e1601e71.js" type="text/javascript"></script>
    <script src="https://a248.e.akamai.net/assets.github.com/assets/github-e37bfdbbcd6bc4520fd7e2ebfb33db3b5a09c985.js" type="text/javascript"></script>
    

        <link rel='permalink' href='/trobertson/organizer/blob/d668a01002a7839a2c95d7d4cd3af1df1f13b2b4/organizer.org'>
    <meta property="og:title" content="organizer"/>
    <meta property="og:type" content="githubog:gitrepository"/>
    <meta property="og:url" content="https://github.com/trobertson/organizer"/>
    <meta property="og:image" content="https://secure.gravatar.com/avatar/2db9a8df8962426e638e835d6936c6a7?s=420&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"/>
    <meta property="og:site_name" content="GitHub"/>
    <meta property="og:description" content="organizer - an Org Mode file where I am keeping track of my current projects and goals."/>

    <meta name="description" content="organizer - an Org Mode file where I am keeping track of my current projects and goals." />

  <link href="https://github.com/trobertson/organizer/commits/master.atom" rel="alternate" title="Recent Commits to organizer:master" type="application/atom+xml" />

  </head>


  <body class="logged_out page-blob  vis-public env-production ">
    <div id="wrapper">

      

      

      


        <div class="header header-logged-out">
          <div class="container clearfix">

            <a class="header-logo-wordmark" href="https://github.com/">
              <img alt="GitHub" class="github-logo-4x" height="30" src="https://a248.e.akamai.net/assets.github.com/images/modules/header/logov7@4x.png?1340659511" />
              <img alt="GitHub" class="github-logo-4x-hover" height="30" src="https://a248.e.akamai.net/assets.github.com/images/modules/header/logov7@4x-hover.png?1340659511" />
            </a>

              
<ul class="top-nav">
    <li class="explore"><a href="https://github.com/explore">Explore GitHub</a></li>
  <li class="search"><a href="https://github.com/search">Search</a></li>
  <li class="features"><a href="https://github.com/features">Features</a></li>
    <li class="blog"><a href="https://github.com/blog">Blog</a></li>
</ul>


            <div class="header-actions">
                <a class="button primary classy" href="https://github.com/signup">Sign up for free</a>
              <a class="button classy" href="https://github.com/login?return_to=%2Ftrobertson%2Forganizer%2Fblob%2Fmaster%2Forganizer.org">Sign in</a>
            </div>

          </div>
        </div>


      

      


            <div class="site hfeed" itemscope itemtype="http://schema.org/WebPage">
      <div class="hentry">
        
        <div class="pagehead repohead instapaper_ignore readability-menu">
          <div class="container">
            <div class="title-actions-bar">
              


                  <ul class="pagehead-actions">


          <li>
            <span class="star-button"><a href="/login?return_to=%2Ftrobertson%2Forganizer" class="minibutton js-toggler-target entice tooltipped leftwards" title="You must be signed in to use this feature" rel="nofollow"><span class="mini-icon mini-icon-star"></span>Star</a><a class="social-count js-social-count" href="/trobertson/organizer/stargazers">1</a></span>
          </li>
          <li>
            <a href="/login?return_to=%2Ftrobertson%2Forganizer" class="minibutton js-toggler-target fork-button entice tooltipped leftwards"  title="You must be signed in to fork a repository" rel="nofollow"><span class="mini-icon mini-icon-fork"></span>Fork</a><a href="/trobertson/organizer/network" class="social-count">0</a>
          </li>
    </ul>

              <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
                <span class="repo-label"><span>public</span></span>
                <span class="mega-icon mega-icon-public-repo"></span>
                <span class="author vcard">
                  <a href="/trobertson" class="url fn" itemprop="url" rel="author">
                  <span itemprop="title">trobertson</span>
                  </a></span> /
                <strong><a href="/trobertson/organizer" class="js-current-repository">organizer</a></strong>
              </h1>
            </div>

            

  <ul class="tabs">
    <li><a href="/trobertson/organizer" class="selected" highlight="repo_sourcerepo_downloadsrepo_commitsrepo_tagsrepo_branches">Code</a></li>
    <li><a href="/trobertson/organizer/network" highlight="repo_network">Network</a></li>
    <li><a href="/trobertson/organizer/pulls" highlight="repo_pulls">Pull Requests <span class='counter'>0</span></a></li>

      <li><a href="/trobertson/organizer/issues" highlight="repo_issues">Issues <span class='counter'>0</span></a></li>



    <li><a href="/trobertson/organizer/graphs" highlight="repo_graphsrepo_contributors">Graphs</a></li>


  </ul>
  
<div class="tabnav">

  <span class="tabnav-right">
    <ul class="tabnav-tabs">
          <li><a href="/trobertson/organizer/tags" class="tabnav-tab" highlight="repo_tags">Tags <span class="counter blank">0</span></a></li>
    </ul>
    
  </span>

  <div class="tabnav-widget scope">


    <div class="context-menu-container js-menu-container js-context-menu">
      <a href="#"
         class="minibutton bigger switcher js-menu-target js-commitish-button btn-branch repo-tree"
         data-hotkey="w"
         data-ref="master">
         <span><em class="mini-icon mini-icon-branch"></em><i>branch:</i> master</span>
      </a>

      <div class="context-pane commitish-context js-menu-content">
        <a href="#" class="close js-menu-close"><span class="mini-icon mini-icon-remove-close"></span></a>
        <div class="context-title">Switch branches/tags</div>
        <div class="context-body pane-selector commitish-selector js-navigation-container">
          <div class="filterbar">
            <input type="text" id="context-commitish-filter-field" class="js-navigation-enable js-filterable-field js-ref-filter-field" placeholder="Filter branches/tags">
            <ul class="tabs">
              <li><a href="#" data-filter="branches" class="selected">Branches</a></li>
                <li><a href="#" data-filter="tags">Tags</a></li>
            </ul>
          </div>

          <div class="js-filter-tab js-filter-branches">
            <div data-filterable-for="context-commitish-filter-field" data-filterable-type=substring>
                <div class="commitish-item branch-commitish selector-item js-navigation-item js-navigation-target selected">
                  <span class="mini-icon mini-icon-confirm"></span>
                  <h4>
                      <a href="/trobertson/organizer/blob/master/organizer.org" class="js-navigation-open" data-name="master" rel="nofollow">master</a>
                  </h4>
                </div>
            </div>
            <div class="no-results">Nothing to show</div>


          </div>

            <div class="js-filter-tab js-filter-tags filter-tab-empty" style="display:none">
              <div data-filterable-for="context-commitish-filter-field" data-filterable-type=substring>
              </div>
              <div class="no-results">Nothing to show</div>
            </div>

        </div>
      </div><!-- /.commitish-context-context -->
    </div>
  </div> <!-- /.scope -->

  <ul class="tabnav-tabs">
    <li><a href="/trobertson/organizer" class="selected tabnav-tab" highlight="repo_source">Files</a></li>
    <li><a href="/trobertson/organizer/commits/master" class="tabnav-tab" highlight="repo_commits">Commits</a></li>
    <li><a href="/trobertson/organizer/branches" class="tabnav-tab" highlight="repo_branches" rel="nofollow">Branches <span class="counter ">1</span></a></li>
  </ul>

</div>

  
  
  


            
          </div>
        </div><!-- /.repohead -->

        <div id="js-repo-pjax-container" class="container context-loader-container" data-pjax-container>
          


<!-- blob contrib key: blob_contributors:v21:fa1dcf66c34a21d1e93dd1439f1d95d1 -->
<!-- blob contrib frag key: views10/v8/blob_contributors:v21:fa1dcf66c34a21d1e93dd1439f1d95d1 -->

<div id="slider">


    <div class="frame-meta">

      <p title="This is a placeholder element" class="js-history-link-replace hidden"></p>
      <div class="breadcrumb">
        <span class='bold'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/trobertson/organizer" class="js-slide-to" data-direction="back" itemscope="url"><span itemprop="title">organizer</span></a></span></span> / <strong class="final-path">organizer.org</strong> <span class="js-clippy mini-icon mini-icon-clippy " data-clipboard-text="organizer.org" data-copied-hint="copied!" data-copy-hint="copy to clipboard"></span>
      </div>

      <a href="/trobertson/organizer/find/master" class="js-slide-to" data-hotkey="t" style="display:none">Show File Finder</a>

        
  <div class="commit file-history-tease">
    <img class="main-avatar" height="24" src="https://secure.gravatar.com/avatar/2db9a8df8962426e638e835d6936c6a7?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="24" />
    <span class="author"><a href="/trobertson" rel="author">trobertson</a></span>
    <time class="js-relative-date" datetime="2012-12-20T08:48:05-08:00" title="2012-12-20 08:48:05">December 20, 2012</time>
    <div class="commit-title">
        <a href="/trobertson/organizer/commit/d668a01002a7839a2c95d7d4cd3af1df1f13b2b4" class="message">gave my talk today, so I wrote a bit about it and moved it into the p…</a>
    </div>

    <div class="participation">
      <p class="quickstat"><a href="#blob_contributors_box" rel="facebox"><strong>1</strong> contributor</a></p>
      
    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2>Users on GitHub who have contributed to this file</h2>
      <ul class="facebox-user-list">
        <li>
          <img height="24" src="https://secure.gravatar.com/avatar/2db9a8df8962426e638e835d6936c6a7?s=140&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="24" />
          <a href="/trobertson">trobertson</a>
        </li>
      </ul>
    </div>
  </div>


    </div><!-- ./.frame-meta -->

    <div class="frames">
      <div class="frame" data-permalink-url="/trobertson/organizer/blob/d668a01002a7839a2c95d7d4cd3af1df1f13b2b4/organizer.org" data-title="organizer/organizer.org at master · trobertson/organizer · GitHub" data-type="blob">

        <div id="files" class="bubble">
          <div class="file">
            <div class="meta">
              <div class="info">
                <span class="icon"><b class="mini-icon mini-icon-text-file"></b></span>
                <span class="mode" title="File Mode">file</span>
                  <span>887 lines (724 sloc)</span>
                <span>41.775 kb</span>
              </div>
              <ul class="button-group actions">
                  <li>
                      <a class="grouped-button minibutton bigger lighter js-entice" href=""
                         data-entice="You must be signed in and on a branch to make or propose changes">Edit</a>
                  </li>
                <li><a href="/trobertson/organizer/raw/master/organizer.org" class="minibutton grouped-button bigger lighter" id="raw-url">Raw</a></li>
                  <li><a href="/trobertson/organizer/blame/master/organizer.org" class="minibutton grouped-button bigger lighter">Blame</a></li>
                <li><a href="/trobertson/organizer/commits/master/organizer.org" class="minibutton grouped-button bigger lighter" rel="nofollow">History</a></li>
              </ul>
            </div>
              
  <div id="readme" class="blob instapaper_body">
    <article class="markdown-body entry-content" itemprop="mainContentOfPage"><h1>
<a name="this-document" class="anchor" href="#this-document"><span class="mini-icon mini-icon-link"></span></a>This Document</h1>
<h2>
<a name="author" class="anchor" href="#author"><span class="mini-icon mini-icon-link"></span></a>Author</h2>
<p>Tyler Robertson</p>
<p>tyler.evan.robertson@gmail.com</p>
<p>github.com/trobertson</p>
<h2>
<a name="purpose" class="anchor" href="#purpose"><span class="mini-icon mini-icon-link"></span></a>Purpose</h2>
<p>This is really just a place to organize my thoughts on my projects and learning goals. I cannot say that it will be restricted to computer-related endeavours.</p>
<h2>
<a name="using-this-document" class="anchor" href="#using-this-document"><span class="mini-icon mini-icon-link"></span></a>Using This Document</h2>
<p>This is an Org Mode document. Basically, read it in a recent Emacs, or you will hate the formatting.</p>
<p>Be aware that this is NOT a long form document: it is a sectioned document. Github cannot provide the proper use case for this document. If you read it on github, and think it’s too long to read through, you’re right. Now go read it in Org Mode.</p>
<p>If you are in Emacs, and in Org Mode (M-x org-indent-mode), then you can expand and collapse a section with TAB. You can expand and collapse all sections with SHIFT-TAB. I recommend using SHIFT-TAB twice, then TAB cycling individual sections as needed.</p>
<p>I also recommend using Clean View: <a href="http://orgmode.org/manual/Clean-view.html">http://orgmode.org/manual/Clean-view.html</a></p>
<p>Also note that tabs are only the most basic commands in Org Mode. You can learn more here: <a href="http://orgmode.org/">http://orgmode.org/</a></p>
<h1>
<a name="overarching-goals" class="anchor" href="#overarching-goals"><span class="mini-icon mini-icon-link"></span></a>Overarching Goals</h1>
<h2>
<a name="haskell-mastery" class="anchor" href="#haskell-mastery"><span class="mini-icon mini-icon-link"></span></a>Haskell Mastery</h2>
<p>Which implies an understanding of all major language concepts, and working knowledge of writing, building, and deploying Haskell programs. Should be able to teach others about Haskell, and when to use it.</p>
<p>This is an awesome resource. Specifically, check out the learning tracks at the bottom of the page: <a href="https://en.wikibooks.org/wiki/Haskell">https://en.wikibooks.org/wiki/Haskell</a></p>
<h3>
<a name="good-haskell-blogs" class="anchor" href="#good-haskell-blogs"><span class="mini-icon mini-icon-link"></span></a>Good Haskell Blogs</h3>
<p>This list is very incomplete.</p>
<h4>
<a name="bryan-o%E2%80%99sullivan---httpwwwserpentinecomblog" class="anchor" href="#bryan-o%E2%80%99sullivan---httpwwwserpentinecomblog"><span class="mini-icon mini-icon-link"></span></a>Bryan O’Sullivan - <a href="http://www.serpentine.com/blog/">http://www.serpentine.com/blog/</a></h4>
<p>Bryan O’Sullivan is the guy who does Yesod, and he also wrote the attoParsec and Text libraries, and the first version of the Bytestring library. He probably also did a bunch of other stuff that I’m not aware of.</p>
<h4>
<a name="the-monad-reader---httpsthemonadreaderwordpresscom" class="anchor" href="#the-monad-reader---httpsthemonadreaderwordpresscom"><span class="mini-icon mini-icon-link"></span></a>The Monad Reader - <a href="https://themonadreader.wordpress.com/">https://themonadreader.wordpress.com/</a></h4>
<p>The Monad Reader is a collection of Haskell oriented blog posts. It spans tons of fields and authors.</p>
<h4>
<a name="haskell-weekly-news---httpcontemplatecodeblogspotcom" class="anchor" href="#haskell-weekly-news---httpcontemplatecodeblogspotcom"><span class="mini-icon mini-icon-link"></span></a>Haskell Weekly News - <a href="http://contemplatecode.blogspot.com/">http://contemplatecode.blogspot.com/</a></h4>
<p>HWN has links to that weeks top questions, discussions, and blog posts. It is a fantastic resource for learning more about the Haskell community, and lesser known language features.</p>
<h4>
<a name="24-days-of-hackage---httpocharlesorgukblog" class="anchor" href="#24-days-of-hackage---httpocharlesorgukblog"><span class="mini-icon mini-icon-link"></span></a>24 Days of Hackage - <a href="http://ocharles.org.uk/blog/">http://ocharles.org.uk/blog/</a></h4>
<p>24 Days of Hackage is a series of blog posts that cover some of the more prominent libraries for Haskell. It provides a very nice summary of what each of the 24 covered packages does.</p>
<h3>
<a name="learning-goals" class="anchor" href="#learning-goals"><span class="mini-icon mini-icon-link"></span></a>Learning Goals</h3>
<h4>
<a name="monads-and-category-theory" class="anchor" href="#monads-and-category-theory"><span class="mini-icon mini-icon-link"></span></a>Monads and Category Theory</h4>
<p>I am solidifying my grasp of Monads as both a Haskell concept and as a Category Theory concept. My grasp of the Category Theory behind Haskell as a whole, however, is still patchy.</p>
<p>Also, there is this whole area or Monad Transformers that I’ve only briefly glimpsed. I’ve looked at usage of the ErrorT monad transformer, but it wasn’t an introduction to them, and they appear very useful.</p>
<h5>
<a name="monads" class="anchor" href="#monads"><span class="mini-icon mini-icon-link"></span></a>Monads</h5>
<p>So I’m finally intuiting that Monads are just a typeclass, and not magic. The only magic happening in some of the more common Monads (IO, for example) comes from using unsafe IO operations, such as unsafeInterleaveIO and unsafeBindIO.</p>
<p>Monads let you chain, order, and hide several operations. They aren’t that hard at all.</p>
<h4>
<a name="cabal-cabal-dev" class="anchor" href="#cabal-cabal-dev"><span class="mini-icon mini-icon-link"></span></a>cabal, cabal-dev</h4>
<p>I am continuing to work on understanding how to structure Haskell programs, and how the cabal and cabal-dev tools can assist with this. I have quickly learned that cabal-dev should always be used over cabal, because cabal has a tendency to break Haskell installations, whereas cabal-dev creates local package installations. I am aware of the growing discontent within the Haskell community, as more and more developers run into problems with cabal. cabal-dev is seen as a good temporary work-around, but serious thought is being put into fixing Haskell’s dependency hell.</p>
<h4>
<a name="performance" class="anchor" href="#performance"><span class="mini-icon mini-icon-link"></span></a>Performance</h4>
<p>I have been writing some slow code. Recently, I have been looking for ways to write more performant programs, and have begun using stricter constructs in my projects. The first of my projects to be written in a stricter style is hs-data-bits, where I have made nearly all uses of function application strict.</p>
<p>Additionally, I have been gaining experience with GHC’s profiling options. I have been using the RTS system and cost center analysis to manipulate and analyze my programs.</p>
<p>Simple Profiling:</p>
<pre>
-- turn on profiling, and tell the profiler to watch all top level functions
$ ghc main.hs -prof -auto-all

-- when running the program, use the -p flag from the RTS options to create a
-- profiling log in main.prof
$ ./main +RTS -p

-- look at the profiling stats, to see where your code is spending its time
$ cat main.prof

-- if you want to specify what the profiler looks at, or add some
-- non-global functions, you can do that within the source via annotation:
xs = {-# SCC "X" #-} [1..1000000]
-- if you don't use the -prof flag during compilation, the annotation will be
-- stripped from the executable, and therefore have zero impact on performance.
</pre>
<p>For the complete guide to GHC profiling, go to</p>
<p><a href="http://www.haskell.org/ghc/docs/7.0.1/html/users_guide/profiling.html#cost-centres">http://www.haskell.org/ghc/docs/7.0.1/html/users_guide/profiling.html#cost-centres</a></p>
<h5>
<a name="memoization" class="anchor" href="#memoization"><span class="mini-icon mini-icon-link"></span></a>Memoization</h5>
<p><a href="http://www.haskell.org/haskellwiki/Memoization">http://www.haskell.org/haskellwiki/Memoization</a></p>
<p><a href="http://hackage.haskell.org/packages/archive/memoize/0.2/doc/html/Data-Function-Memoize.html">http://hackage.haskell.org/packages/archive/memoize/0.2/doc/html/Data-Function-Memoize.html</a></p>
<h4>
<a name="parser-combinators" class="anchor" href="#parser-combinators"><span class="mini-icon mini-icon-link"></span></a>Parser Combinators</h4>
<p>Parsing is crazy useful, and I have very little understanding of the libraries and techniques that are commonly used. I’ve been using Parsec for a bit, and it feels very powerful, but the current go-to library is attoparsec. It is a similar library, in that it is a parser combinator library, but I haven’t used it before, so I will need to learn the combinators it provides.</p>
<p>&lt;2012-11-29 Thu&gt;</p>
<p>I’ve used a Parsec for a few projects, and Attoparsec on my current project. It looks like Attoparsec is for all things byte-level, and Parsec is for everything above that.</p>
<h5>
<a name="parsec" class="anchor" href="#parsec"><span class="mini-icon mini-icon-link"></span></a>Parsec</h5>
<p>Parsec is awesome for text! I’ve used it on a couple of projects now, and the ease of use is phenomenal. It lets you make some pretty readable parsers, too.</p>
<p>I don’t have too much to say about it right now, because I’ve been wrestling with Attoparsec all day.</p>
<h5>
<a name="attoparsec" class="anchor" href="#attoparsec"><span class="mini-icon mini-icon-link"></span></a>Attoparsec</h5>
<p>Attoparsec is (note that this is my first time using it) a lot more confusing than Parsec. It follows the same combinator style, but the arrangement of the combinators across modules leaves something to be desired. You frequently have to mix and match against Data.Attoparsec, Data.Attoparsec.ByteString, and Data.Attoparsec.Char8. And since several combinators overlap, you need to qualify those import… and since you’re dealing with ByteStrings, you will also probably be using Data.ByteString, which also needs to be qualified in order to not conflict with Prelude.</p>
<p>So dealing with at least 4 qualifiers is not fun. But once you get a handle on where to go for certain things (which is the point I am arriving at now), things seem to be well done, and nearly as useable as Parsec. I wish there was a single import, though, that spanned the ByteString and Char8 parsers, along with the other stuff I haven’t touched yet.</p>
<p>Update &lt;2012-12-03 Mon&gt;</p>
<p>It looks like attoparsec also has Text combinators. So basically, attoparsec is where you go if you want performant parsers (because if you are using anything other than ByteString or Text, your code isn’t very performant).</p>
<p>Having used it a bit more, and gotten more familiar with it, I still think that the API could use some work. There are functions in each submodule that really don’t belong - e.g., there shouldn’t be a <code>Char -&gt; Bool</code> function in the <code>Word8</code> submodule. It doesn’t make sense. It isn’t an isolated function, either. It looks like all of the attoparsec variants have <code>Char</code> and <code>String</code> functions, no matter which submodule you are using.</p>
<h5>
<a name="monomorphism-restriction" class="anchor" href="#monomorphism-restriction"><span class="mini-icon mini-icon-link"></span></a>Monomorphism Restriction</h5>
<p>I’ve been using a bit more Parsec, and getting more familiar with it. One of the things I encountered is Haskell’s Monomorphism Restriction, which nobody likes. Many people, however, think it is necessary. It basically amounts to preventing certain cases where the compiler can’t be certain about the behavior of a function. It can be avoided by adding explicit type signatures to all of your function (as opposed to relying on type inference).</p>
<p>The Monomorphism Retriction is a pain in the ass for combinator libraries, mostly because the combinators have types that are annoying to write out. So to avoid having to go to GHCI to :t every single new function, there is a language extension to disable to restriction:</p>
<pre>
{-# LANGUAGE NoMonomorphismRestriction #-}
</pre>
<p>which lets you develop with combinators and still use type inference. For more information, go to <a href="http://www.haskell.org/haskellwiki/Monomorphism_restriction">http://www.haskell.org/haskellwiki/Monomorphism_restriction</a></p>
<h4>
<a name="common-typeclasses" class="anchor" href="#common-typeclasses"><span class="mini-icon mini-icon-link"></span></a>Common Typeclasses</h4>
<p>I’ve used a lot of Haskell ofer the past couple months, but there are still a lot of commonly used typeclasses that I haven’t gotten a chance to use. I’ve encountered ones like Either, Pointed and Error, but I haven’t used them on my own yet, only through tutorials or blogs. It will probably just take a lot of time and experience, but I’d like to become able to intuit the use of new typeclasses when I encounter them.</p>
<p>Also, using typeclasses. I normally use deriving (..) to add my types to pre-existing typeclasses, but I really need to learn how to instance them. Also, I should write a few of them. I’m not sure when I need to use them, but it will be easier to determine that if I’ve done it before.</p>
<h5>
<a name="error" class="anchor" href="#error"><span class="mini-icon mini-icon-link"></span></a>Error</h5>
<p>I made an instance of the Error typeclass in little-johny (<a href="https://github.com/trobertson/little-johny">https://github.com/trobertson/little-johny</a>), and it wasn’t too hard to get set up and working. The project was pretty trivial, though, so I don’t yet know how it scales up.</p>
<h4>
<a name="error-handling" class="anchor" href="#error-handling"><span class="mini-icon mini-icon-link"></span></a>Error Handling</h4>
<p>Speaking of the Error typeclass, I should really learn how to do error handling. It seems that there are two primary ways, both of which reside in Control.Monad.Error. The first way is by making a custom error datatype, and the second is by using the ErrorT Monad Transformer. They both look very useful, although I think that, once I begin writing my own monads, ErrorT will be more useful (it also requires less code!)</p>
<h5>
<a name="the-error-monad" class="anchor" href="#the-error-monad"><span class="mini-icon mini-icon-link"></span></a>The Error Monad</h5>
<p>In little-johny (<a href="https://github.com/trobertson/little-johny">https://github.com/trobertson/little-johny</a>), I defined a <code>JohnyEgoError</code> type. The type has two constructors, a specific one (<code>JErrorTooBig</code>) that catches errors that I’m looking for, which in this case is when a paramter is bigger than 15. It takes an <code>Int</code> as a parameter, and uses it in its <code>Show</code> instance. It is bound to the <code>noMsg</code> function in the <code>Error</code> typeclass.</p>
<p>The other constructor, <code>JErrorMisc</code>, takes a string and is bound to <code>Error</code>’s <code>strMsg</code>. <code>strMsg</code> takes a string as its argument, and passes that to the <code>JErrorMisc</code> constructor. <code>JErrorMisc</code> uses that string as its value in the <code>Show</code> instance.</p>
<p>Catching errors was not that bad. I had to make a type wrapper: <code>type JohnyMonad = Either JohnyEgoError</code>, which desugars to: <code>Either (Left JohnyEgoError, Right a)</code>.</p>
<p>Catching and handling the errors involved pattern matching against the <code>Left</code> and <code>Right</code> in <code>JohnyMonad</code>. It wasn’t very difficult, although it took a bit to match up the types of everything.</p>
<h5>
<a name="the-errort-monad-transformer" class="anchor" href="#the-errort-monad-transformer"><span class="mini-icon mini-icon-link"></span></a>The ErrorT Monad Transformer</h5>
<p>I haven’t gotten to use this yet, although I am planning on doing a project where I will.</p>
<h4>
<a name="language-features" class="anchor" href="#language-features"><span class="mini-icon mini-icon-link"></span></a>Language Features</h4>
<p>Basically, become familiar with this stuff: <a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/ghc-language-features.html">http://www.haskell.org/ghc/docs/latest/html/users_guide/ghc-language-features.html</a> There is so much stuff to know from there. Pragmas, Template Haskell, Unboxed Types, Type System Extensions, Kind Polymorphism… All stuff that is useful, but way above tutorial level material. A lot of the awesome stuff that’s built in Haskell uses some of these features. I’ll need to make sub-sections for all of those, and the rest of the stuff I’m interested in from there, but I’ll do that later, because It’s not a great use of Hacker School time.</p>
<p>I’ll be going through them, and picking out some important ones to know. I’ll write a bit about those in the sub-sections below.</p>
<h5>
<a name="unboxed-types" class="anchor" href="#unboxed-types"><span class="mini-icon mini-icon-link"></span></a>Unboxed Types</h5>
<p>These are bare-metal varables, like what you would have in C. Generally, the Haskell code you write will compile down to these values. That said, you can use them explicitly be import GHC.Prim. Unboxed types are traditionally suffixed by #, so <code>5#</code> would be an unboxed integer. <code>3.2#</code> is a float, and <code>3.2##</code> is a double. There are a bajillion different unboxed types in GHC.Prim.</p>
<p>There are also a lot of restrictions on what you can do with unboxed types. Pattern matching, specifically, is very not friendly to unboxed types.</p>
<h5>
<a name="existential-quantification" class="anchor" href="#existential-quantification"><span class="mini-icon mini-icon-link"></span></a>Existential Quantification</h5>
<p>Lets you make container types that restrict what can go in them. For example, I made a type HList, with which you can build heterogeneous lists:</p>
<pre>
{-# LANGUAGE ExistentialQuantification #-}

-- For all types s that are members of the Show typeclass, there is a type
-- constructor HL that constructs a value of type HList
data HList = forall s. Show s =&gt; HL s

-- HList isn't a list type, btw. It just lets us construct heterogeneous lists

-- Since all of our s are within the Show typeclass, this instance declaration
-- just says to recycle show
instance Show HList where
    show (HL s) = show s

-- and now we can construct lists like [HL 5, HL "joke", HL False, HL 3.141592]
</pre>
<p>It’s a pretty cool feature.</p>
<h5>
<a name="pragmas" class="anchor" href="#pragmas"><span class="mini-icon mini-icon-link"></span></a>Pragmas</h5>
<p><a href="http://www.haskell.org/ghc/docs/7.0.4/html/users_guide/pragmas.html">http://www.haskell.org/ghc/docs/7.0.4/html/users_guide/pragmas.html</a></p>
<h6>
<a name="inline-noinline-inlinable" class="anchor" href="#inline-noinline-inlinable"><span class="mini-icon mini-icon-link"></span></a>INLINE, NOINLINE, INLINABLE</h6>
<p>These control whether the compiler can inline the associated function.</p>
<h4>
<a name="coding-style" class="anchor" href="#coding-style"><span class="mini-icon mini-icon-link"></span></a>Coding Style</h4>
<p>Going through the ‘Scheme in 48 Hours’ tutorial, it is noted that monadic functions that don’t return a value are suffixed be an underscore, like <code>mapM_</code>. I hadn’t made that connection yet and have been using prefixed underscores to name helper functions, like <code>_showVal</code> helps <code>showVal</code>. My style probably conflicts with readability of Haskell code in general, so I should find some resources for learning good Haskell coding style.</p>
<p>Also, HLint is friggin awesome. It reads your code, and suggests changes to make it more idiomatic. It does not, however, recognize naming conventions, as my use of underscores wasn’t noticed by it. It makes sense, though. Statically analyzing naming conventions sounds like a doozy, not a utility.</p>
<h4>
<a name="concurrency-parallelism" class="anchor" href="#concurrency-parallelism"><span class="mini-icon mini-icon-link"></span></a>Concurrency, Parallelism</h4>
<p>This is kinda big, and becoming more important as time goes on, and we stack chip dies more than we empower the dies themselves. Haskell is said to have some great parallelism and concurrency primitives, and it also runs on a STM (Software Transactional Memory), so there should be a lot of power there for the taking. I would like to learn how and when to use these mechanisms.</p>
<p>Links:</p>
<p><a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">https://en.wikipedia.org/wiki/Communicating_sequential_processes</a></p>
<p><a href="http://www.haskell.org/haskellwiki/Software_transactional_memory">http://www.haskell.org/haskellwiki/Software_transactional_memory</a></p>
<h5>
<a name="channels" class="anchor" href="#channels"><span class="mini-icon mini-icon-link"></span></a>Channels</h5>
<p>I took a look at channels today, in the context of a chat server. It seems that channels are a good way to provide updates and messages to many threads at the same time. I haven’t looked too hard at them yet (still looking for resources), but they seem ideal for sharing data across parallel threads and concurrent threads that are doing one thing many times. They don’t look so good for concurrent threads that are doing different things.</p>
<p><a href="https://en.wikipedia.org/wiki/Channel_%28programming%2">https://en.wikipedia.org/wiki/Channel_%28programming%2</a></p>
<h4>
<a name="operator-precedence" class="anchor" href="#operator-precedence"><span class="mini-icon mini-icon-link"></span></a>Operator Precedence</h4>
<p>There are 10 levels (0..9), and they control how infix works, and I have no idea how to use it. A lot of code will have fixity declarations:</p>
<p><a href="http://www.haskell.org/haskellwiki/Keywords#infix.2C_infixl.2C_infixr">http://www.haskell.org/haskellwiki/Keywords#infix.2C_infixl.2C_infixr</a></p>
<p>using the infix, infixl, infixr keywords.</p>
<h4>
<a name="recursive-lambdas-and-controlmonadfix" class="anchor" href="#recursive-lambdas-and-controlmonadfix"><span class="mini-icon mini-icon-link"></span></a>Recursive Lambdas, and Control.Monad.Fix</h4>
<p>Has a really cool function called <code>fix</code>. It basically lets you write recursive lambda explressions, and is apparently very similar to the Y Combinator. Go to</p>
<p><a href="http://stackoverflow.com/questions/7141229/how-to-write-recursive-lambda-expression-in-haskell">http://stackoverflow.com/questions/7141229/how-to-write-recursive-lambda-expression-in-haskell</a></p>
<p>and read the second answer (not the checked answer). The checked answer gives a good answer to the recursive lambda question, but it is a lot messier than just using <code>fix</code>, which the second answer very succinctly explains.</p>
<h4>
<a name="conduits" class="anchor" href="#conduits"><span class="mini-icon mini-icon-link"></span></a>Conduits</h4>
<p>Conduits are a solution to the streaming problem. The Conduit library defines =Source=s, =Conduit=s, and =Sink=s, which can be fused to each other to create a pipe that data can be streamed through. Conceptually, it is very easy to visualize what the library does - it’s a pipe:</p>
<p><code>Source -&gt; [Conduit] -&gt; Sink</code></p>
<p>(Try not to confuse that diagram with a type signature). The <code>Source</code> is possibly stateful (like <code>IO</code>, or one of the <code>State</code> monads), and it feeds data through the fused <code>Conduit=s (literally, through a pipe), and the =Sink</code> takes the output of those <code>Conduit=s and returns a single value from them. A =Sink</code> must, and can only, return a single value, or the result of the stream. The actual streaming mechanics are built into the type of <code>Source</code>, which can produce an arbitrary stream of data, depending on how it is built.</p>
<p>So the source produces incremental data, which is fed through the <code>Conduit=s and deposited in the =Sink</code>, which waits for the <code>Source</code> to close before returning its result. Most of the stream processing will occur in the <code>Conduits</code>.</p>
<p>That’s what I’ve picked up so far. I haven’t used them yet (although I do need to, on my http-server project), so I will update this once I’ve used them, and gotten a feel for how well they work.</p>
<h2>
<a name="static-analysis" class="anchor" href="#static-analysis"><span class="mini-icon mini-icon-link"></span></a>Static Analysis</h2>
<p>Sounds crazy fun. I’d like to learn it so that I can do cool stuff like analyze bytecode and create callback trees and stuff.</p>
<h3>
<a name="project-ideas" class="anchor" href="#project-ideas"><span class="mini-icon mini-icon-link"></span></a>Project Ideas</h3>
<h4>
<a name="dna" class="anchor" href="#dna"><span class="mini-icon mini-icon-link"></span></a>DNA</h4>
<p>Seriously, get some analysis of the quaternary (base 4) bytecode that makes us tick. This page:</p>
<p><a href="http://ds9a.nl/amazing-dna/">http://ds9a.nl/amazing-dna/</a></p>
<p>seems to be a good first look at the kinds of things to watch for, as it’s from the perspective of a programmer. However, that means it may not be scientifically kosher, so I’ll need to do some research on known DNA structures.</p>
<h4>
<a name="data-flow-visualization" class="anchor" href="#data-flow-visualization"><span class="mini-icon mini-icon-link"></span></a>Data Flow Visualization</h4>
<p>I want to write a program where that you can hook up to another program, and slow it down to watch a visualization of the data flowing through the program. I think this could be an awesome way to debug certain classes of bugs.</p>
<h2>
<a name="debugging" class="anchor" href="#debugging"><span class="mini-icon mini-icon-link"></span></a>Debugging</h2>
<p>So far, I’ve done debugging through thinking and print statements. And that works, really, really well, if what you’re doing is text based. But if it isn’t, then I’m not really sure where to go. I’d like to remedy that.</p>
<h2>
<a name="web-development" class="anchor" href="#web-development"><span class="mini-icon mini-icon-link"></span></a>Web Development</h2>
<p>Gain an understanding of the various approaches to web dev. Initially, this will involve gaining an understanding of the MVC abstraction. Ideally, will write several web projects in several languages, to better understand the suitability of language with regards to web dev. These languages will include Haskell and Python, with the Yesod and Django frameworks, respectively.</p>
<h3>
<a name="building-a-web-server" class="anchor" href="#building-a-web-server"><span class="mini-icon mini-icon-link"></span></a>Building a Web Server</h3>
<p>I built a rough skeleton of an HTTP server in Haskell. It’s not really done, and I’m not sure it does much of anything correctly, but it building it gave me a solid understanding of the basic web stack. Here’s the basic rundown of an HTTP server:</p>
<p>The server sits between an application and the internet. Things called HTTP Requests come to the server, from the internet. The server parses these requests, and sends the parsed data to the web application, which performs actions based on the contents of the request. The application forms a Response, and gives it to the server, which then sends it back to the origin of the Request.</p>
<h4>
<a name="haskell%E2%80%99s-web-application-interface-wai" class="anchor" href="#haskell%E2%80%99s-web-application-interface-wai"><span class="mini-icon mini-icon-link"></span></a>Haskell’s Web Application Interface (WAI)</h4>
<p>I’ve been looking at a lot of stuff relating to this, and I haven’t really been grokking any of it. What I know is that RFC 2616 defines HTTP, and every language deals with it differently.</p>
<p>In Haskell, for example, there is this thing called WAI - Web Application Interface. It is an intermediate layer, that sit between web applications and web servers, allowing an application’s server backend to be swapped out with little pain. The thing is, I’m not sure where exactly in the stack WAI sits. I think the stack goes like so:</p>
<p>Internet &lt;–&gt; HTTP Server &lt;–&gt; WAI &lt;–&gt; Application</p>
<p>but I can’t tell for sure. Looking at the WAI source only tells me that it deals with HTTP Requests and Responses, and it supports some kind of Middleware thing that passes data into the Web Application part.</p>
<p>After looking around some more, it seems that my guess is pretty much right. I was getting bogged down in a bunch of stuff that the Application part should be handling. The HTTP server portion should process Requests and Responses, and nothing else.</p>
<h4>
<a name="sockets" class="anchor" href="#sockets"><span class="mini-icon mini-icon-link"></span></a>Sockets</h4>
<p><a href="http://book.realworldhaskell.org/read/sockets-and-syslog.html">http://book.realworldhaskell.org/read/sockets-and-syslog.html</a></p>
<p><a href="http://www.haskell.org/haskellwiki/Implement_a_chat_server">http://www.haskell.org/haskellwiki/Implement_a_chat_server</a></p>
<p>According to the second one, you should use Network.Socket for Sockets, System.IO to turn those into Handles, and Control.Concurrency.Chan with forkIO to handle connections concurrently.</p>
<p>RWH does things similarly, but uses an MVar instead of a Chan. RWH says they are using the MVar as a lock, which seems more complicated than channels.</p>
<p>According to the Network module, you should only use Network.Socket when you really need the low level, practically C api socket interface.</p>
<h3>
<a name="desired-projects" class="anchor" href="#desired-projects"><span class="mini-icon mini-icon-link"></span></a>Desired Projects</h3>
<h4>
<a name="blog" class="anchor" href="#blog"><span class="mini-icon mini-icon-link"></span></a>Blog</h4>
<p>Blogs are the most boring things to build, ever, but I feel that I should have one. Since they are the de-facto Hello World of web applications, I feel that I shold make my own.</p>
<p>To be fair, though, I did already write a crappy blog with Yesod. But it kinda sucked, and it felt like overkill. A static blog is plenty good for me, so I think I’m going to build it in Hakyll.</p>
<h4>
<a name="code-review-site" class="anchor" href="#code-review-site"><span class="mini-icon mini-icon-link"></span></a>Code Review Site</h4>
<p>Code reviews are considered to be one of the best ways to become a better programmer, but the only way I’ve seen them done is in person. While I should look around for available tools, I would like to build a site where a programmer can submit code that they would like reviewed. Other users would be able to clone, review, etc. that code, and push it back to the site, and inform the author that it has been reviewed.</p>
<h4>
<a name="some-kind-of-game" class="anchor" href="#some-kind-of-game"><span class="mini-icon mini-icon-link"></span></a>Some Kind of Game</h4>
<p>I would like to learn some graphics programming, and WebGL seems to be a very fun way to do that. I would also need to learn a lot of Javascript for this project, and that will definitely help me become a better web developer. And, games are fun to build and play.</p>
<h2>
<a name="databases" class="anchor" href="#databases"><span class="mini-icon mini-icon-link"></span></a>Databases</h2>
<p>My understanding and use of databases so far is rather trivial. I have made and used single table schemas in sqlite3, but beyond that I have no experience. Seeing as how databases ar hugely useful and important, I would like to increase my knowledge of and ability with different kinds of databases, like relational, NoSQL, and graph databases.</p>
<h3>
<a name="read-papers" class="anchor" href="#read-papers"><span class="mini-icon mini-icon-link"></span></a>Read Papers</h3>
<p>Google Spanner (scalable, multi-version, globallydistributed, and synchronously-replicated database):</p>
<p><a href="http://research.google.com/archive/spanner-osdi2012.pdf">http://research.google.com/archive/spanner-osdi2012.pdf</a></p>
<h3>
<a name="build-a-database" class="anchor" href="#build-a-database"><span class="mini-icon mini-icon-link"></span></a>Build a Database</h3>
<p>Allison suggested that I try to build a database engine as a way to learn databases. It sounds like a great idea, and one I hadn’t considered. I’m not really sure where to begin it, though, so I’ll need to look and ask around.</p>
<h1>
<a name="data-structures" class="anchor" href="#data-structures"><span class="mini-icon mini-icon-link"></span></a>Data Structures</h1>
<h2>
<a name="zippers" class="anchor" href="#zippers"><span class="mini-icon mini-icon-link"></span></a>Zippers</h2>
<p><a href="https://en.wikipedia.org/wiki/Zipper_(data_structure)">https://en.wikipedia.org/wiki/Zipper_(data_structure)</a></p>
<p><a href="https://github.com/trobertson/zipper">https://github.com/trobertson/zipper</a></p>
<p>Zippers are a really cool structure that let you efficiently traverse a list or a tree (actually, any inductively defined data structure). The Zipper stores your current position in a list (for example), letting you insert and delete the elements at your position in O(1) time. You can walk both forwards and backwards in O(n) time, where n is the number of steps you are taking. The Zipper on a list would, for a list <code>[1,2,3,4,5]</code>, at index 2, look like <code>([2,1], [3,4,5])</code>. It stores the preceding portion of the list in reverse order, and the list after the current position in normal order. The ‘current’ value in a Zipper on a list is the head of the ‘after’ list. So for that example, <code>3</code> is the current item.</p>
<p>If we wanted to walk a step forward through that list, we would then have <code>([3,2,1], [4,5])</code>. You can think of it like two stacks: to go forward, pop the second stack and stick that element onto the first. To go backward, pop the first, cons it to the second. To insert an element, cons it to the first stack (after all, when you type a character, for example, you don’t want the cursor to stay in the same place while the text grows rightward. that’d be wierd). To remove an element, pop it from the second list.</p>
<p>Writing a Zipper on a list is a pretty simple exercise. Writing one for a BTree is about an order of magnitude more difficult, but still doable in a day. Going beyond a BTree is more difficult still, but very, very doable. Since they are defined for all inductively defined data types, there should be a Zipper on a graph. But I haven’t written one of those yet, so don’t quote me on that.</p>
<h2>
<a name="graphs" class="anchor" href="#graphs"><span class="mini-icon mini-icon-link"></span></a>Graphs</h2>
<p>I played around with a purely functional Inductive Graph type today. Initially, I was confused about why the type decision were what they are, but having taken those and implemented several graph functions, they make as much sense as the intuitive (Nodes, Edges) wrapper.</p>
<p>I don’t really have much to say, other than that you should look at FGL, the Functional Graph Library for Haskell.</p>
<h1>
<a name="mathematics" class="anchor" href="#mathematics"><span class="mini-icon mini-icon-link"></span></a>Mathematics</h1>
<p>This will initially be my thought on the textbooks I’m going through. I may also cover a bit of the material here, in order to better understand it (as you never really know something unless you can explain and teach it).</p>
<h1>
<a name="operating-systems" class="anchor" href="#operating-systems"><span class="mini-icon mini-icon-link"></span></a>Operating Systems</h1>
<h2>
<a name="mac-os-x" class="anchor" href="#mac-os-x"><span class="mini-icon mini-icon-link"></span></a>Mac OS X</h2>
<h3>
<a name="purge-inactive-memory" class="anchor" href="#purge-inactive-memory"><span class="mini-icon mini-icon-link"></span></a>Purge Inactive Memory</h3>
<p>Seriously. My Macbook Pro only has 4 gigs of RAM, and oftentimes, the ‘Inactive’ field in the System Memory tab will hit 1.5 gigs or more. Using ‘purge’ in a terminal frees up a lot of that. Just today, I freed 900ish megs (which brought me from 13m free to ~950m). Majorly useful.</p>
<p>UPDATE!</p>
<p>According to a user on the Apple StackExchange site, ‘Inactive’ memory is actual memoized stuff. It remember common tasks that the OS has to do, so that it does them faster the second, third, etc. times.</p>
<p>Moral or the updated story: only use ‘purge’ is you absolutely need to.</p>
<h3>
<a name="macports" class="anchor" href="#macports"><span class="mini-icon mini-icon-link"></span></a>Macports</h3>
<p>I was using macports to install cairo and some other things, so that I could write pictures to disk in Haskell (which needs some image libraries that Just Work (tm). They all either don’t work, or suck), and it turns out that ports install the cairo libraries in an architecture that my machine can’t use. So I started to reinstall it, using the +universal variant, and now I’m basically downloading and installing an entire userspace of crap. It sucks.</p>
<p>I’ve either hit a bug in the variants stuff, or macports is kinda… dumb.</p>
<h1>
<a name="thoughts-on" class="anchor" href="#thoughts-on"><span class="mini-icon mini-icon-link"></span></a>Thoughts On:</h1>
<h2>
<a name="languages" class="anchor" href="#languages"><span class="mini-icon mini-icon-link"></span></a>Languages</h2>
<h3>
<a name="contextual-languages" class="anchor" href="#contextual-languages"><span class="mini-icon mini-icon-link"></span></a>Contextual Languages</h3>
<p>&lt;2012-12-10 Mon&gt; I’m a moron. These are called emedded languages, and I’ve known about them (Lua) for a long time.</p>
<ul>
<li>–</li>
</ul><p>I attended a talk by John Resig (the jQuery guy), that was on introductory Javascript. One of the things he said tweaked my brain: that Javascript, in and of itself, isn’t that useful. It is only really useful once it is given a context, and environment, in which to work.</p>
<p>In Haskell, things like Functors and Monads are said to “give context” to the values they contain, and these contexts are really, really useful. So knowing that contexts can be useful, I started thinking about things that I’m calling Contextual Languages. There might already be a name for the kind of thing I’m thinking about, but I don’t know it.</p>
<p>So Contextual Languages are languages with a standardized syntax, that can be used to manipulate different different contexts and environments. John mentioned that writing Javascript for a web page was very different from writing for Node.js. The context is different, the environment is diffferent. You get a different set of things to work with. On the web, there is a global window object, that uses the DOM (Document Object Model) structure. There is no window on Node.js, there is no DOM. Node.js is server software, so having a DOM there doesn’t make sense.</p>
<p>And yet, in these two very different environments, Javascript is useful. It has features that allow it to adapt to different contexts, and it provides a single syntax to access these differing contexts. At first glance, it appears that Javascript might just be a good embedded language, similar to how Lua is commonly used. But I think that that ignores the possibility of a new paradigm in programming languages.</p>
<h2>
<a name="computer-numbers" class="anchor" href="#computer-numbers"><span class="mini-icon mini-icon-link"></span></a>Computer Numbers</h2>
<h3>
<a name="accuracy" class="anchor" href="#accuracy"><span class="mini-icon mini-icon-link"></span></a>Accuracy</h3>
<p>From what I’ve seen, it’s hard to demonstrate to new programmers why they should care about what kind of floating-point type they use, and other things like that. I found an example, though. In ghci:</p>
<pre>
ghci&gt; :t sum
sum :: Num a =&gt; [a] -&gt; a
ghci&gt; sum [1000001..10000000 :: Int]
506413600
ghci&gt; sum [1000001..10000000 :: Integer]
49500004500000
ghci&gt; sum [1000001..10000000 :: Double]
4.95000045e13
ghci&gt; sum [1000001..10000000 :: Float]
4.82026e13
</pre>
<p>It’s in Haskell, which provides nice numeric types, making it easy to see the difference</p>
<h2>
<a name="fractals" class="anchor" href="#fractals"><span class="mini-icon mini-icon-link"></span></a>Fractals</h2>
<p>I was playing with a JS implementation of the Mandelbrot fractal, by Romy (<a href="https://github.com/syntacticsugar">https://github.com/syntacticsugar</a>), and it ocurred to me that I had always had a misconception on how fractals were constructed (via code, not math). I thought that you would call the ‘fractal function’ and it would spit out your array, and you would do pixel based coloring, and so forth. I hadn’t even considered that you would call the fractal function on each pixel. It’s wierd that I hadn’t, because pretty much every blog post on generating fractals talks about per-pixel stuff.</p>
<p>Remembering back, I think I also made this mistake when I was looking at Simplex Noise (the much more capable successor to Perlin Noise). I looked at the Java implementation that the paper provided, and was completely thrown off by the return type of the ‘simplex’ method, or whatever it was called. It returned an Integer, but the entire code was supposed to produce noise! In 2, 3, and 4 dimensions! It made no sense! But now it does, and I feel like a moron.</p>
<h1>
<a name="current-projects" class="anchor" href="#current-projects"><span class="mini-icon mini-icon-link"></span></a>Current Projects</h1>
<h2>
<a name="haskell-optimization" class="anchor" href="#haskell-optimization"><span class="mini-icon mini-icon-link"></span></a>Haskell Optimization</h2>
<p>I’m learning how to make Haskell code more performant, and I’m using my Hacker School projects as guinea pigs.</p>
<h2>
<a name="haskell-perf" class="anchor" href="#haskell-perf"><span class="mini-icon mini-icon-link"></span></a>haskell-perf</h2>
<p><a href="https://github.com/trobertson/haskell-perf">https://github.com/trobertson/haskell-perf</a></p>
<p>A repo where I can test the performance characteristics of different solutions to the same problem.</p>
<h3>
<a name="2012-12-13-thu" class="anchor" href="#2012-12-13-thu"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-12-13 Thu&gt;</h3>
<p>I worked on it a bit more today, but I’m not sure my current approach is feasible. It would take years to finish, and the stuff I’m benchmarking isn’t even that relevant.</p>
<p>The goal of the project is to figure out where and when to use laziness, strictness, and unboxing, but the current set up doesn’t test those. It’s testing integer performance. It does show that a strict sum function is more performant that the built-in lazy sum, but again, that’s not the goal. That’s incredibly specific, and I’m looking for a general approach.</p>
<h3>
<a name="2012-12-17-mon" class="anchor" href="#2012-12-17-mon"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-12-17 Mon&gt;</h3>
<p>I scrapped the Int type testing, because the tests were kind of useless. I have started over with a more practical problem, namely, the performance of different String Types.</p>
<p>It was actually somewhat difficult to find a good way to test them, and in the end I settled for reading in a file, converting the alphabetical characters to upper case, and writing that to a new file. It works much better than the types of code I tried before, as it clearly demonstrates the read, write, and transformation speeds.</p>
<h2>
<a name="ustring" class="anchor" href="#ustring"><span class="mini-icon mini-icon-link"></span></a>UString</h2>
<p>A universal String type for Haskell, so that I don’t have to deal with String, ByteString, LazyByteString, [Word8], Text, etc. when I’m in the early stages of a project.</p>
<h3>
<a name="2012-12-10-mon" class="anchor" href="#2012-12-10-mon"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-12-10 Mon&gt;</h3>
<h1>
<a name="past-projects" class="anchor" href="#past-projects"><span class="mini-icon mini-icon-link"></span></a>Past Projects</h1>
<h2>
<a name="intro-to-functional-programming-talk" class="anchor" href="#intro-to-functional-programming-talk"><span class="mini-icon mini-icon-link"></span></a>Intro to Functional Programming talk</h2>
<p>I’m preparing an introduction to FP for some of the other Hacker School students.</p>
<h3>
<a name="2012-12-10-mon-1" class="anchor" href="#2012-12-10-mon-1"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-12-10 Mon&gt;</h3>
<p>I had written a rough outline on Friday, but I got a lot of the rough draft done today. I wrote the section on immutable data, and the part on recursive functions and data. I am in the middle of going over recursive functions on recursive data.</p>
<h3>
<a name="2012-12-20-thu" class="anchor" href="#2012-12-20-thu"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-12-20 Thu&gt;</h3>
<p>I gave the talk today. It wasn’t what I origininally planned, since David Nolen covered all the things I wanted to cover last week, but I did give a short talk.</p>
<p>It was somewhat of a refresher course, and covered the end parts of David’s talk, but it was also a discussion of how functional programming could be used in the real world, and where it’s useful. It felt kind of awkward, considering that there were several pauses (in a question-driven talk, sometimes you need to wait for people to remember or get their nerve up), but it wasn’t too bad.</p>
<p>My original talk would have been much more fluid, given that there was a set of things to cover, coupled with an order of presentation. This was definitely ad-hoc, but covered several of the hurdles that people encounter when they start designing functional programs.</p>
<h2>
<a name="http-server" class="anchor" href="#http-server"><span class="mini-icon mini-icon-link"></span></a>http server</h2>
<p>An as-yet unnamed project, I am going to build an HTTP server in order to learn more about Web Development. I will be building it in parts (libraries), which will be wrapped together at the end with a simple main.hs file.</p>
<h3>
<a name="2012-11-15-thu" class="anchor" href="#2012-11-15-thu"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-11-15 Thu&gt;</h3>
<p>After some research, It seems that Haskell web servers should target the WAI (Web Application Interface). WAI provides a fast, generic interface between web servers and applications. By using this interface, server backends can be arbitrarily swapped, with minimal issues.</p>
<h3>
<a name="2012-12-03-mon" class="anchor" href="#2012-12-03-mon"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-12-03 Mon&gt;</h3>
<p>So I’ve been working on this for a few days now, and I’m about halfway through it. The core architecture is done (as in, it’s a multithreaded server that doesn’t really do anything with the Requests it reads in), and I’m working on handling HTTP Requests.</p>
<p>I’ve been having a bit of trouble dealing with the Conduits portion of WAI, and it might be the only real pain point I have right now. There is one other thing that I’m not sure about but it will be a million times easier to deal with.</p>
<h3>
<a name="2012-12-05-wed" class="anchor" href="#2012-12-05-wed"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-12-05 Wed&gt;</h3>
<p>I got around the Conduit problem (without solving it) by using <code>mempty</code>. I wish I had done that days ago, because that has held back the project for a while now.</p>
<h3>
<a name="2012-12-10-mon-2" class="anchor" href="#2012-12-10-mon-2"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-12-10 Mon&gt;</h3>
<p>I’m shelving this project. It’s not done, and it doesn’t really work, but I got what I did it for, which is an understanding of how HTTP servers work, and where they fit into the ‘web stack’.</p>
<h2>
<a name="reflection-matcher" class="anchor" href="#reflection-matcher"><span class="mini-icon mini-icon-link"></span></a>reflection-matcher</h2>
<p><a href="https://github.com/trobertson/reflection-matcher">https://github.com/trobertson/reflection-matcher</a></p>
<p>This is a fork of another Hacker Schooler’s project. It scrapes our Reflections page, and uses certain keeywords to determine who is doing work most similar to some other person.</p>
<p>My contribution was to remove the naive sum(keywords_used) algorithm, and replace it with a sum(ratio_of_used_keywords) algorithm. It is more accurate, and the ratios reflect how long people have been working on the same thing (within the constraints of how well Reflections map what you do).</p>
<h2>
<a name="uri-parse" class="anchor" href="#uri-parse"><span class="mini-icon mini-icon-link"></span></a>uri-parse</h2>
<p><a href="https://github.com/trobertson/uri-parse">https://github.com/trobertson/uri-parse</a></p>
<p>In order to learn more about web development, I’m going to be building some kind of http server. The first part that I’m doing is the URI parsing, which is this project.</p>
<h4>
<a name="dev-log" class="anchor" href="#dev-log"><span class="mini-icon mini-icon-link"></span></a>Dev Log</h4>
<h5>
<a name="2012-11-14-wed" class="anchor" href="#2012-11-14-wed"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-11-14 Wed&gt;</h5>
<p>So far, I’ve built an HTTP URI parser. The URI type is ready to hold more constructors for other types of URI (like tcp, git, ssh, etc.). I may want to split up the Parser file into one file per parser, but since there’s only one parser so far, it isn’t a priority.</p>
<p>I’ve also seperated the logic and the URI type. I’ve had trouble doing this before (read: with cabal configs), but since I haven’t cabal’d this yet, I didn’t have any problems.</p>
<h5>
<a name="2012-11-15-thu-1" class="anchor" href="#2012-11-15-thu-1"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-11-15 Thu&gt;</h5>
<p>So far, I have written HTTP and mailto URL parsers. I have also written a constructor for FTP.</p>
<p>However, I’m not sure I’m going to continue this project. It would seem that Haskell web servers should target WAI, in order to facilitate good interoperability.</p>
<h2>
<a name="hisla" class="anchor" href="#hisla"><span class="mini-icon mini-icon-link"></span></a>hisla</h2>
<p><a href="https://github.com/trobertson/hisla">https://github.com/trobertson/hisla</a></p>
<p>A repl for an isla-like language. It is a data declaration language, where you define objects with parameters… and don’t do much with them. See the hisla README, and the links to the Isla language, to learn more.</p>
<p>&lt;2012-11-15 Thu&gt; I’ve decided to come back to this, and update it with what I’ve learned since the last time I worked on it. Basically, I’m completely redoing the parser, updating the language syntax, and passing around an IORef instead of an entire environment. Those changes will require that I go through most of the rest of the code, to, like the eval function and its helpers. I do get to delete a ton old, brittle code though, so it’ll be fun.</p>
<h3>
<a name="dev-log-1" class="anchor" href="#dev-log-1"><span class="mini-icon mini-icon-link"></span></a>Dev Log</h3>
<h4>
<a name="2012-11-15-thu-2" class="anchor" href="#2012-11-15-thu-2"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-11-15 Thu&gt;</h4>
<p>I’ve made the switch to using an IORef, but it didn’t really change much. I’m still passing around an environment internally, which is what I was trying to avoid. Maybe one of the other state monads could help me more than IORef, which is tied into the IO monad.</p>
<h4>
<a name="2012-11-19-mon" class="anchor" href="#2012-11-19-mon"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-11-19 Mon&gt;</h4>
<p>I finished the new parser, and it correctly lexes and parses the new syntax. It seems, however, that I forgot to account for functions. I’ll do those later. I ended up having to choice an alternative to Parsec’s built-in ‘choice’ combinator, which doesn’ do look-ahead, and instead consumes input. This means that if any parser in the choice list consumes input, every parser afterward it will be screwed. I basically took the source for choice and modified it to use ‘try’ internally, which means that parser failure won’t consume input, and therefore failure won’t waterfall. I creatively named it ‘tryChoice’.</p>
<p>I built the eval portion. It is much shorter than it used to be, but since it is in it’s early stages, it is still very buggy. The biggest bug is when you add data to a preexisting object, and the original data duplicates. It’s really wierd.</p>
<h4>
<a name="2012-11-20-tue" class="anchor" href="#2012-11-20-tue"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-11-20 Tue&gt;</h4>
<p>I found my eval bug. addObject does a lot of merges, when it really only needs to do one. Figuring out when to do that mrege, though, is kinda tricky.</p>
<p>Figured it out. I was trying to merge, which wasn’t necessary, since addObject already performs a merge. So it was trying to merge twice that was causing the bug. I was able to completely do away with mergeVal, which was redundant.</p>
<p>I refactored the project. It is now in several small libraries that are much, much easier to work with. I was getting lost in the earlier 2-300 line file. I also got cabal to recognize my hierarchy, which hasn’t always worked in the past. It was surprisingly painless.</p>
<p>I wrote the README in Org Mode, and Github did a good job formatting it for the web view.</p>
<p>Just to be clear, functions aren’t working at all right now.</p>
<h4>
<a name="2012-11-21-wed" class="anchor" href="#2012-11-21-wed"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-11-21 Wed&gt;</h4>
<p>Working on an Amtrack. Uncomfortable arm positions.</p>
<p>I fixed a syntactical bug in the ‘add _ to _’ statements. hisla will now let you add a nested object to another object, like ‘add john’s pet’s name to joe’s cousin’s pet’, which is an intuitive thing to try. I considered adding the same syntax to ‘remove…’, but it doesn’t make as much sense.</p>
<h2>
<a name="hs-data-bits" class="anchor" href="#hs-data-bits"><span class="mini-icon mini-icon-link"></span></a>hs-data-bits</h2>
<p><a href="https://github.com/trobertson/hs-data-bits">https://github.com/trobertson/hs-data-bits</a></p>
<p>An implementation of the bit level operation that occur on a CPU.</p>
<h3>
<a name="logic-gates" class="anchor" href="#logic-gates"><span class="mini-icon mini-icon-link"></span></a>Logic Gates</h3>
<p>All Completed.</p>
<h3>
<a name="mux-and-dmux" class="anchor" href="#mux-and-dmux"><span class="mini-icon mini-icon-link"></span></a>MUX and DMUX</h3>
<p>2, 4, 8, and 16 bit MUX and DMUX are written.</p>
<h4>
<a name="note-on-mux" class="anchor" href="#note-on-mux"><span class="mini-icon mini-icon-link"></span></a>Note on MUX</h4>
<p>The current implementation of MUXes is poor. The number of input is exceedingly lengthy, and should be switched to a list of input bits with length checks.</p>
<h3>
<a name="adders" class="anchor" href="#adders"><span class="mini-icon mini-icon-link"></span></a>Adders</h3>
<p>A Half Adder, Full Adder, and N Bit adder have been implemented.</p>
<h2>
<a name="sigh" class="anchor" href="#sigh"><span class="mini-icon mini-icon-link"></span></a>sigh</h2>
<p>I’ve actually started following the “Write a Scheme Interpreter in 48 Hours” tutorial, as opposed to writing my own. At this point, I have written the parser, and parts of eval. The repl structure appears to be complete.</p>
<h3>
<a name="2012-11-13-tue" class="anchor" href="#2012-11-13-tue"><span class="mini-icon mini-icon-link"></span></a>&lt;2012-11-13 Tue&gt;</h3>
<p>I decided to stop working on this, as I’ve learned about all I’m going to from it. It was really helpful, though, as it (indirectly) introduced me to a lot of resources for further learning.</p>
<h2>
<a name="little-johny" class="anchor" href="#little-johny"><span class="mini-icon mini-icon-link"></span></a>little-johny</h2>
<p><a href="https://github.com/trobertson/little-johny">https://github.com/trobertson/little-johny</a></p>
<p>A project where I am using monads for the sake of using monads, in order to force myself to need to use Monad Transformers. Because the best way to learn something is to do (or use, in this case) that thing.</p>
<p>I ended up only using the Error Monad, because I fundamentally misunderstood what the different state Monads (IORef, State, ST, MVar, TVar, etc.) actually did. I thought they provided an isolated, mutable interior that could be declared once, and then called throughout the program. What they appear to do is create an isolated space (got that part right), and then you create references to that space, and pass those around. It’s sorta like pointers, except they point to an environment, not a value, and you pass computations into that environment, and read out the results. Explicitly read, with functions and everything.</p>
<p>I think that’s how they work. I’ll be able to state that with more certain (or dismiss it) once I do a project that succesfully incorporates some mutable state.</p>
<h2>
<a name="markov" class="anchor" href="#markov"><span class="mini-icon mini-icon-link"></span></a>markov</h2>
<p><a href="https://github.com/trobertson/markov">https://github.com/trobertson/markov</a></p>
<p>A Markov Chain implementation, adapted tp output sentences according to predefined structures.</p>
<h2>
<a name="pos-parse" class="anchor" href="#pos-parse"><span class="mini-icon mini-icon-link"></span></a>pos-parse</h2>
<p><a href="https://github.com/trobertson/pos-parse">https://github.com/trobertson/pos-parse</a></p>
<p>A program that will read in a string and output to possible parts of speech of each of the words.</p>
<h2>
<a name="trk" class="anchor" href="#trk"><span class="mini-icon mini-icon-link"></span></a>trk</h2>
<p><a href="https://github.com/trobertson/trk">https://github.com/trobertson/trk</a></p>
<p>A simple time tracking cli app. Logs how many hours you spend doing activites.</p>
<h2>
<a name="sc" class="anchor" href="#sc"><span class="mini-icon mini-icon-link"></span></a>sc</h2>
<p><a href="https://github.com/trobertson/sc">https://github.com/trobertson/sc</a></p>
<p>A command line spell checker, using the BK Tree module I wrote. It’s very slow.</p>
<h2>
<a name="bk-tree" class="anchor" href="#bk-tree"><span class="mini-icon mini-icon-link"></span></a>bk-tree</h2>
<p><a href="https://github.com/trobertson/bk-tree">https://github.com/trobertson/bk-tree</a></p>
<p>A purely functional implementation of Burkhard-Keller Trees, or BK Trees for short. They are search trees over metric spaces.</p></article>
  </div>

          </div>
        </div>
      </div>

      <a href="#jump-to-line" rel="facebox" data-hotkey="l" class="js-jump-to-line" style="display:none">Jump to Line</a>
      <div id="jump-to-line" style="display:none">
        <h2>Jump to Line</h2>
        <form accept-charset="UTF-8" class="js-jump-to-line-form">
          <input class="textfield js-jump-to-line-field" type="text">
          <div class="full-button">
            <button type="submit" class="classy">
              Go
            </button>
          </div>
        </form>
      </div>

    </div>
</div>

<div id="js-frame-loading-template" class="frame frame-loading large-loading-area" style="display:none;">
  <img class="js-frame-loading-spinner" src="https://a248.e.akamai.net/assets.github.com/images/spinners/octocat-spinner-128.gif?1347543527" height="64" width="64">
</div>


        </div>
      </div>
      <div class="context-overlay"></div>
    </div>

      <div id="footer-push"></div><!-- hack for sticky footer -->
    </div><!-- end of wrapper - hack for sticky footer -->

      <!-- footer -->
      <div id="footer">
  <div class="container clearfix">

      <dl class="footer_nav">
        <dt>GitHub</dt>
        <dd><a href="https://github.com/about">About us</a></dd>
        <dd><a href="https://github.com/blog">Blog</a></dd>
        <dd><a href="https://github.com/contact">Contact &amp; support</a></dd>
        <dd><a href="http://enterprise.github.com/">GitHub Enterprise</a></dd>
        <dd><a href="http://status.github.com/">Site status</a></dd>
      </dl>

      <dl class="footer_nav">
        <dt>Applications</dt>
        <dd><a href="http://mac.github.com/">GitHub for Mac</a></dd>
        <dd><a href="http://windows.github.com/">GitHub for Windows</a></dd>
        <dd><a href="http://eclipse.github.com/">GitHub for Eclipse</a></dd>
        <dd><a href="http://mobile.github.com/">GitHub mobile apps</a></dd>
      </dl>

      <dl class="footer_nav">
        <dt>Services</dt>
        <dd><a href="http://get.gaug.es/">Gauges: Web analytics</a></dd>
        <dd><a href="http://speakerdeck.com">Speaker Deck: Presentations</a></dd>
        <dd><a href="https://gist.github.com">Gist: Code snippets</a></dd>
        <dd><a href="http://jobs.github.com/">Job board</a></dd>
      </dl>

      <dl class="footer_nav">
        <dt>Documentation</dt>
        <dd><a href="http://help.github.com/">GitHub Help</a></dd>
        <dd><a href="http://developer.github.com/">Developer API</a></dd>
        <dd><a href="http://github.github.com/github-flavored-markdown/">GitHub Flavored Markdown</a></dd>
        <dd><a href="http://pages.github.com/">GitHub Pages</a></dd>
      </dl>

      <dl class="footer_nav">
        <dt>More</dt>
        <dd><a href="http://training.github.com/">Training</a></dd>
        <dd><a href="https://github.com/edu">Students &amp; teachers</a></dd>
        <dd><a href="http://shop.github.com">The Shop</a></dd>
        <dd><a href="/plans">Plans &amp; pricing</a></dd>
        <dd><a href="http://octodex.github.com/">The Octodex</a></dd>
      </dl>

      <hr class="footer-divider">


    <p class="right">&copy; 2012 <span title="0.08783s from fe16.rs.github.com">GitHub</span> Inc. All rights reserved.</p>
    <a class="left" href="https://github.com/">
      <span class="mega-icon mega-icon-invertocat"></span>
    </a>
    <ul id="legal">
        <li><a href="https://github.com/site/terms">Terms of Service</a></li>
        <li><a href="https://github.com/site/privacy">Privacy</a></li>
        <li><a href="https://github.com/security">Security</a></li>
    </ul>

  </div><!-- /.container -->

</div><!-- /.#footer -->


    

<div id="keyboard_shortcuts_pane" class="instapaper_ignore readability-extra" style="display:none">
  <h2>Keyboard Shortcuts <small><a href="#" class="js-see-all-keyboard-shortcuts">(see all)</a></small></h2>

  <div class="columns threecols">
    <div class="column first">
      <h3>Site wide shortcuts</h3>
      <dl class="keyboard-mappings">
        <dt>s</dt>
        <dd>Focus command bar</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>?</dt>
        <dd>Bring up this help dialog</dd>
      </dl>
    </div><!-- /.column.first -->

    <div class="column middle" style='display:none'>
      <h3>Commit list</h3>
      <dl class="keyboard-mappings">
        <dt>j</dt>
        <dd>Move selection down</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>k</dt>
        <dd>Move selection up</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>c <em>or</em> o <em>or</em> enter</dt>
        <dd>Open commit</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>y</dt>
        <dd>Expand URL to its canonical form</dd>
      </dl>
    </div><!-- /.column.first -->

    <div class="column last js-hidden-pane" style='display:none'>
      <h3>Pull request list</h3>
      <dl class="keyboard-mappings">
        <dt>j</dt>
        <dd>Move selection down</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>k</dt>
        <dd>Move selection up</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>o <em>or</em> enter</dt>
        <dd>Open issue</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt><span class="platform-mac">⌘</span><span class="platform-other">ctrl</span> <em>+</em> enter</dt>
        <dd>Submit comment</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt><span class="platform-mac">⌘</span><span class="platform-other">ctrl</span> <em>+</em> shift p</dt>
        <dd>Preview comment</dd>
      </dl>
    </div><!-- /.columns.last -->

  </div><!-- /.columns.equacols -->

  <div class="js-hidden-pane" style='display:none'>
    <div class="rule"></div>

    <h3>Issues</h3>

    <div class="columns threecols">
      <div class="column first">
        <dl class="keyboard-mappings">
          <dt>j</dt>
          <dd>Move selection down</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>k</dt>
          <dd>Move selection up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>x</dt>
          <dd>Toggle selection</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>o <em>or</em> enter</dt>
          <dd>Open issue</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="platform-mac">⌘</span><span class="platform-other">ctrl</span> <em>+</em> enter</dt>
          <dd>Submit comment</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="platform-mac">⌘</span><span class="platform-other">ctrl</span> <em>+</em> shift p</dt>
          <dd>Preview comment</dd>
        </dl>
      </div><!-- /.column.first -->
      <div class="column last">
        <dl class="keyboard-mappings">
          <dt>c</dt>
          <dd>Create issue</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>l</dt>
          <dd>Create label</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>i</dt>
          <dd>Back to inbox</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>u</dt>
          <dd>Back to issues</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>/</dt>
          <dd>Focus issues search</dd>
        </dl>
      </div>
    </div>
  </div>

  <div class="js-hidden-pane" style='display:none'>
    <div class="rule"></div>

    <h3>Issues Dashboard</h3>

    <div class="columns threecols">
      <div class="column first">
        <dl class="keyboard-mappings">
          <dt>j</dt>
          <dd>Move selection down</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>k</dt>
          <dd>Move selection up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>o <em>or</em> enter</dt>
          <dd>Open issue</dd>
        </dl>
      </div><!-- /.column.first -->
    </div>
  </div>

  <div class="js-hidden-pane" style='display:none'>
    <div class="rule"></div>

    <h3>Network Graph</h3>
    <div class="columns equacols">
      <div class="column first">
        <dl class="keyboard-mappings">
          <dt><span class="badmono">←</span> <em>or</em> h</dt>
          <dd>Scroll left</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="badmono">→</span> <em>or</em> l</dt>
          <dd>Scroll right</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="badmono">↑</span> <em>or</em> k</dt>
          <dd>Scroll up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="badmono">↓</span> <em>or</em> j</dt>
          <dd>Scroll down</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>t</dt>
          <dd>Toggle visibility of head labels</dd>
        </dl>
      </div><!-- /.column.first -->
      <div class="column last">
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">←</span> <em>or</em> shift h</dt>
          <dd>Scroll all the way left</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">→</span> <em>or</em> shift l</dt>
          <dd>Scroll all the way right</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">↑</span> <em>or</em> shift k</dt>
          <dd>Scroll all the way up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">↓</span> <em>or</em> shift j</dt>
          <dd>Scroll all the way down</dd>
        </dl>
      </div><!-- /.column.last -->
    </div>
  </div>

  <div class="js-hidden-pane" >
    <div class="rule"></div>
    <div class="columns threecols">
      <div class="column first js-hidden-pane" >
        <h3>Source Code Browsing</h3>
        <dl class="keyboard-mappings">
          <dt>t</dt>
          <dd>Activates the file finder</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>l</dt>
          <dd>Jump to line</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>w</dt>
          <dd>Switch branch/tag</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>y</dt>
          <dd>Expand URL to its canonical form</dd>
        </dl>
      </div>
    </div>
  </div>

  <div class="js-hidden-pane" style='display:none'>
    <div class="rule"></div>
    <div class="columns threecols">
      <div class="column first">
        <h3>Browsing Commits</h3>
        <dl class="keyboard-mappings">
          <dt><span class="platform-mac">⌘</span><span class="platform-other">ctrl</span> <em>+</em> enter</dt>
          <dd>Submit comment</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>escape</dt>
          <dd>Close form</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>p</dt>
          <dd>Parent commit</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>o</dt>
          <dd>Other parent commit</dd>
        </dl>
      </div>
    </div>
  </div>

  <div class="js-hidden-pane" style='display:none'>
    <div class="rule"></div>
    <h3>Notifications</h3>

    <div class="columns threecols">
      <div class="column first">
        <dl class="keyboard-mappings">
          <dt>j</dt>
          <dd>Move selection down</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>k</dt>
          <dd>Move selection up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>o <em>or</em> enter</dt>
          <dd>Open notification</dd>
        </dl>
      </div><!-- /.column.first -->

      <div class="column second">
        <dl class="keyboard-mappings">
          <dt>e <em>or</em> shift i <em>or</em> y</dt>
          <dd>Mark as read</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>shift m</dt>
          <dd>Mute thread</dd>
        </dl>
      </div><!-- /.column.first -->
    </div>
  </div>

</div>

    <div id="markdown-help" class="instapaper_ignore readability-extra">
  <h2>Markdown Cheat Sheet</h2>

  <div class="cheatsheet-content">

  <div class="mod">
    <div class="col">
      <h3>Format Text</h3>
      <p>Headers</p>
      <pre>
# This is an &lt;h1&gt; tag
## This is an &lt;h2&gt; tag
###### This is an &lt;h6&gt; tag</pre>
     <p>Text styles</p>
     <pre>
*This text will be italic*
_This will also be italic_
**This text will be bold**
__This will also be bold__

*You **can** combine them*
</pre>
    </div>
    <div class="col">
      <h3>Lists</h3>
      <p>Unordered</p>
      <pre>
* Item 1
* Item 2
  * Item 2a
  * Item 2b</pre>
     <p>Ordered</p>
     <pre>
1. Item 1
2. Item 2
3. Item 3
   * Item 3a
   * Item 3b</pre>
    </div>
    <div class="col">
      <h3>Miscellaneous</h3>
      <p>Images</p>
      <pre>
![GitHub Logo](/images/logo.png)
Format: ![Alt Text](url)
</pre>
     <p>Links</p>
     <pre>
http://github.com - automatic!
[GitHub](http://github.com)</pre>
<p>Blockquotes</p>
     <pre>
As Kanye West said:

> We're living the future so
> the present is our past.
</pre>
    </div>
  </div>
  <div class="rule"></div>

  <h3>Code Examples in Markdown</h3>
  <div class="col">
      <p>Syntax highlighting with <a href="http://github.github.com/github-flavored-markdown/" title="GitHub Flavored Markdown" target="_blank">GFM</a></p>
      <pre>
```javascript
function fancyAlert(arg) {
  if(arg) {
    $.facebox({div:'#foo'})
  }
}
```</pre>
    </div>
    <div class="col">
      <p>Or, indent your code 4 spaces</p>
      <pre>
Here is a Python code example
without syntax highlighting:

    def foo:
      if not bar:
        return true</pre>
    </div>
    <div class="col">
      <p>Inline code for comments</p>
      <pre>
I think you should use an
`&lt;addr&gt;` element here instead.</pre>
    </div>
  </div>

  </div>
</div>


    <div id="ajax-error-message" class="flash flash-error">
      <span class="mini-icon mini-icon-exclamation"></span>
      Something went wrong with that request. Please try again.
      <a href="#" class="mini-icon mini-icon-remove-close ajax-error-dismiss"></a>
    </div>

    
    
    <span id='server_response_time' data-time='0.08899' data-host='fe16'></span>
    
  </body>
</html>

