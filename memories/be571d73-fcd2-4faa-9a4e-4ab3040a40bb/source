<!DOCTYPE html>
<html lang="">

<head>
	<meta http-equiv="x-ua-compatible" content="ie=edge">
	<meta charset="utf-8">
	<title>mvanier: Yet Another Monad Tutorial (part 4: The Maybe and List Monads)</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	

	<link rel="home" title="Home" href="http://www.livejournal.com/">
	<link rel="contents" title="Site Map" href="http://www.livejournal.com/site/">
	<link rel="help" title="Technical Support" href="http://www.livejournal.com/support/">

	<link rel="apple-touch-icon" href="http://l-stat.livejournal.com/img/apple-touch-icon.png?v=6037">
	
		<!--[if IE]><link rel="shortcut icon" type="image/x-icon" href="http://l-stat.livejournal.com/img/userinfo.ico"><![endif]-->
		<link rel="icon" type="image/gif" href="http://l-stat.livejournal.com/img/userinfo.gif">
	

	
	

	

	

	<link rel="stylesheet" type="text/css" href="http://l-stat.livejournal.com/??.b4be?v=1363723174" />
<!--[if lt IE 7]><link rel="stylesheet" type="text/css" href="http://l-stat.livejournal.com/??lj_base-ie.css,horizon/ie.css?v=1363723174" /><![endif]-->
<!--[if lte IE 7]><link rel="stylesheet" type="text/css" href="http://l-stat.livejournal.com/??interstitial_banner_us.css?v=1363723174" /><![endif]-->
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="http://l-stat.livejournal.com/??ie.css,popup/popupus-ie.css?v=1363723174" /><![endif]-->

	            <script type="text/javascript">
                Site = window.Site || {};
                Site.ml_text = {"fotki.photo.upload.error.file_type_not_supported":"File type is not supported","fotki.album.link.click.to.upload":"Click to upload <br> new images","talk.link.button":"Insert","fotki.privacy":"Privacy","fotki.album.description":"Add your description","fotki.album.no.pics":"There are no photos in this album.","fotki.album.add.photos":"To add multiple files, hold down the CTRL or Shift button.","fotki.album.link.from.image":"Link from this image (optional)","fotki.album.stop.upload.confirm":"Do you really want to stop the upload and close without saving? ","fotki.photo.upload.error.file_not_selected":"File not selected","confirm.bubble.no":"No","fotki.album.upload.unknown.error":"Unknown error","fotki.photo.upload.error.not_enough_space":"Scrapbook: not enough space","fotki.album.add.images":"Add to post","fotki.album.change":"Your current selection will be lost. Do you really want to change albums? ","fotki.album.album_cover":"Album cover","talk.postcomment":"Add a comment","fotki.album.close.without.saving.confirm":"Do you really want to close without saving?","fotki.album.new.album.name":"New album name","fotki.album.custom.size":"Custom","fotki.photo.upload.error.no_access_to_storage_media":"No access to storage media","talk.link.button.delete":"Delete","talk.editcomment":"Save comment","fotki.album.stop.upload":"Stop uploading?","fotki.album.comment.images":"Add to comment","confirm.bubble.yes":"Yes","talk.answer":"Reply","fotki.album.paste.from.album":"From Album","fotki.album.resize.to.post":"Resize","fotki.album.browse.photo":"Browse","fotki.album.click.image":"Click on image to remove it.","fotki.album.remove.this.image":"Remove this image","talk.spamcount":"[[count]] [[?count|suspicious comment|suspicious comments]]","talk.replycount":"[[count]] [[?count|comment|comments]]","fotki.album.save.images":"Save images","fotki.photo.upload.error.common_error":"Common error","fotki.album.upgrade":"Extra Storage Space","widget.form.skip_word":"Skip word","fotki.album.create.new":"(Create new)","fotki.album.select_album":"Select album:","fotki.album.uploading.image":"Uploading image...","fotki.album.upload.images":"Upload images","fotki.album.add.image.name":"Add image name","fotki.photo.upload.error.forbidden":"You cannot access this page because this journal is not visible.","pics.ui.link_to_original_title":"Check to include a link to the full size image","fotki.photo.upload.error.cant_get_storage_space":"Can't get count of used storage space","fotki.album.remove.image":"Remove this image","fotki.album.uploading.message":"Uploading...","fotki.album.load.more":"Loading more..","fotki.album.available.now":"Available now","fotki.branding_04_2012.html":"<a href=\"http://url\">link</a>","fotki.album.cancel.album":"Cancel","fotki.album.upload.io.error":"","fotki.album.resize.width":"Width","fotki.photo.upload.error.no_access_rpc":"Internal Error","talk.general.save":"Save","entry.reference.label.reposted":"Reposted","talk.replytothis":"Reply","fotki.album.paste.url":"Paste URL","fotki.photo.upload.error.auth_token_invalid":"Auth error","fotki.album.post.images":"Add to post","pics.ui.link_to_original":"Add a link to the original image","fotki.album.default.sizes":"Default sizes","widget.form.no_suggestions":"No suggestions","entry.reference.label.title":"Remove repost","fotki.album.resize.height":"Height","fotki.album.paste.url.here":"Paste image URL here"};
                Site.page = {"hasactiveuserpic":0,"ajaxPagination":1,"fotki":{"uploader":{"albumsData":[],"action":"add_new_post","privacyData":[{"groupname":"Everyone (Public)","security":"public"},{"groupname":"Friends","security":"allfriends"},{"groupname":"Just Me (Private)","security":"private"}],"tracking_opendialog":"tracking_photouploaded","sizesData":[{"is_default":0,"text":"100","size":"100"},{"is_default":0,"text":"300","size":"300"},{"is_default":0,"text":"600","size":"600"},{"is_default":1,"text":"900","size":"900"},{"is_default":0,"text":"1000","size":"1000"},{"is_default":0,"text":"Original","size":"original"}],"type":"upload","guid":""},"migration":0,"upload":0,"enabled":0},"hasdefaultuserpic":0,"hasuserpics":0,"spamcount":0,"replycount":12,"comments_page":1,"scheme":"horizon","D":{},"activeuserpic":""};
                Site.timer = +(new Date());
                (function(){
                    var p = {"remote_is_identity":null,"remote_is_maintainer":0,"auth_token":"sessionless:1363852800:/__api/::b06e6196536ddb48f57d7db52ba0937aaa6c8d95","locale":"en_US","remoteUser":null,"remote_is_sup":0,"remoteJournalBase":null,"statprefix":"http://l-stat.livejournal.com","ctx_popup":1,"jsonrpcprefix":"http://l-api.livejournal.com","siteroot":"http://www.livejournal.com","country":"US","templates_update_time":900,"media_embed_enabled":1,"inbox_update_poll":0,"rpc":{"public":["sitemessage.get_message","comment.get_thread"]},"v":1363723174,"has_remote":0,"currentEntryRecommendations":0,"remoteLocale":"en_US","server_time":1363855719,"picsUploadDomain":"up.pics.livejournal.com","remote_is_suspended":0,"logprefix":"","imgprefix":"http://l-stat.livejournal.com/img","esn_async":1,"remote_can_track_threads":null,"currentJournal":"mvanier","pics_production":"","currentEntry":"http://mvanier.livejournal.com/4647.html","currentJournalBase":"http://mvanier.livejournal.com"}, i;
                    for (i in p) Site[i] = p[i];
                })();
                Site.current_journal = {"url_profile":"http://mvanier.livejournal.com/profile","url_journal":"http://mvanier.livejournal.com","is_identity":"","userid":14687195,"is_shared":"","display_name":"mvanier","is_comm":"","username":"mvanier","is_syndicated":"","can_receive_vgifts":1,"url_allpics":"http://www.livejournal.com/allpics.bml?user=mvanier","is_person":"1","url_message":"http://www.livejournal.com/inbox/compose.bml?user=mvanier","display_username":"mvanier"};
                Site.version = '102.1';
           </script>
<script type="text/javascript" src="http://l-stat.livejournal.com/js/??.ljlib.js?v=1363723174"></script>
<script type="text/javascript" src="http://l-stat.livejournal.com/js/??.comments.js?v=1363723174"></script>
<script type="text/javascript" src="http://l-stat.livejournal.com/js/??.b8aa?v=1363723174"></script>
<!--[if IE]><script type="text/javascript" src="http://l-stat.livejournal.com/js/??jquery/jquery.ie6multipleclass.min.js?v=1363723174"></script><![endif]-->
<!--[if lt IE 9]><script type="text/javascript" src="http://l-stat.livejournal.com/js/??lib/html5shiv.js?v=1363723174"></script><![endif]-->
<!--[if lte IE 9]><script type="text/javascript" src="http://l-stat.livejournal.com/js/??ie9pinned.js?v=1363723174"></script><![endif]-->
<script type="text/javascript">
LJShare.init({"ml":{"close":"Close","title":"Share"},"services":{"stumbleupon":{"bindLink":"http://www.livejournal.com/redirect/SHARING_stumbleupon?url=http%3A%2F%2Fwww.stumbleupon.com%2Fsubmit%3Furl%3D{url}","title":"StumbleUpon"},"moimir":{"bindLink":"http://www.livejournal.com/redirect/SHARING_moimir?url=http%3A%2F%2Fconnect.mail.ru%2Fshare%3Furl%3D{url}","title":"Moi mir"},"twitter":{"bindLink":"http://www.livejournal.com/redirect/SHARING_twitter?url=http%3A%2F%2Ftwitter.com%2Fshare%3Furl%3D{url}%26text%3D{title}","title":"Twitter"},"digg":{"bindLink":"http://www.livejournal.com/redirect/SHARING_digg?url=http%3A%2F%2Fdigg.com%2Fsubmit%3Furl%3D{url}","title":"Digg"},"email":{"bindLink":"http://www.livejournal.com/redirect/SHARING_email?url=http%3A%2F%2Fapi.addthis.com%2Foexchange%2F0.8%2Fforward%2Femail%2Foffer%3Fusername%3Dinternal%26url%3D{url}%26title%3D{title}","title":"E-mail"},"livejournal":{"bindLink":"http://www.livejournal.com/redirect/SHARING_livejournal?url=http%3A%2F%2Fwww.livejournal.com%2Fupdate.bml%3Frepost_type%3Dc%26repost%3D{url}","title":"LiveJournal"},"vkontakte":{"bindLink":"http://www.livejournal.com/redirect/SHARING_vkontakte?url=http%3A%2F%2Fvkontakte.ru%2Fshare.php%3Furl%3D{url}","title":"VKontakte"},"facebook":{"bindLink":"http://www.livejournal.com/redirect/SHARING_facebook?url=http%3A%2F%2Fwww.facebook.com%2Fsharer.php%3Fu%3D{url}","title":"Facebook"},"odnoklassniki":{"bindLink":"http://www.livejournal.com/redirect/SHARING_odnoklassniki?url=http%3A%2F%2Fwww.odnoklassniki.ru%2Fdk%3Fst.cmd%3DaddShare%26st.s%3D1%26st._surl%3D{url}","title":"Odnoklassniki"},"tumblr":{"bindLink":"http://www.livejournal.com/redirect/SHARING_tumblr?url=http%3A%2F%2Fwww.tumblr.com%2Fshare%3Fv%3D3%26u%3D{url}","title":"Tumblr"}},"links":["livejournal","facebook","twitter","digg","tumblr","stumbleupon","email"]})</script>
<script type="text/javascript">if (jQuery.VK) { jQuery.VK.init({apiId: 2244371, onlyWidgets: true})} </script> 
	<meta property="og:description" content="In the previous articles in this series, I covered the conceptual basis of monads, but the discussion was pretty abstract. Now that (I hope) you have a pretty good idea of what monads are and what they&#39;re for, it&#39;s time to get into the nitty-gritty details of how to actually derive the …" /><meta property="og:image" content="http://l-stat.livejournal.com/img/userinfo.gif?v=3" /><meta property="og:title" content="Yet Another Monad Tutorial (part 4: The Maybe and List Monads)" /><meta property="og:type" content="website" /><meta property="og:url" content="http://mvanier.livejournal.com/4647.html" /><meta property="twitter:card" content="summary" /><meta property="twitter:site" content="@livejournal" /><link href='http://www.livejournal.com/go.bml?journal=mvanier&amp;itemid=4647&amp;dir=prev' rel='Previous' />
<link href='http://www.livejournal.com/go.bml?journal=mvanier&amp;itemid=4647&amp;dir=next' rel='Next' />
<noscript><meta http-equiv="refresh" content="0; url=http://mvanier.livejournal.com/4647.html?nojs=1" /></noscript><script>jQuery('noscript').last().remove()</script>

	

	<script type="text/javascript" src="http://l-stat.livejournal.com/tmpl/??Widgets/bubble.tmpl,Form/UpicSelect.tmpl,Widgets/photouploader/photouploader.tmpl,Widgets/photouploader/insertedItem.tmpl,Widgets/photouploader/uploadedItem.tmpl,Comments/Twig.tmpl?v=1363247955&tm=1515395;uselang=en_LJ"></script>
<script type="text/javascript" src="http://l-stat.livejournal.com/tmpl/??Widgets/contextualhover.jqtmpl?v=1343758569&tm=1515395;uselang=en_LJ"></script>

</head>
<body class="s-horizon p-footer-lite logged-out"  >
	

	<!-- Content Wrapper -->
	<div class="s-content-wrapper">

		

		

		<!-- Header -->
		<header class="s-header">
			
			
				<p class="s-header-logo">
					<a href="http://www.livejournal.com">
						LiveJournal
					</a>
				</p>
			

			

			

			


			<!-- Navbar -->
			<nav class="s-navbar s-show-local-menu" role="navigation">
					

				<ul class='s-navmenu'>
					
						<li class='s-navmenu-item horizon-menu-home'>
							<a class="s-navmenu-rootlink" href='http://www.livejournal.com/'><span>Home</span></a>

							
								
							
						</li>
					
						<li class='s-navmenu-item horizon-menu-create'>
							<a class="s-navmenu-rootlink" href='http://www.livejournal.com/create.bml'>Create an account</a>

							
								
							
						</li>
					
						<li class='s-navmenu-item horizon-menu-explore'>
							<a class="s-navmenu-rootlink" href='http://www.livejournal.com/search/'>Explore</a>

							
								
									<ul class='s-navmenu-submenu'>
									<li  ><a href='http://www.livejournal.com/interests.bml'>Search by Interest</a></li><li  ><a href='http://www.livejournal.com/schools/'>Search by School</a></li><li  ><a href='http://www.livejournal.com/ratings/'>Ratings</a></li><li  ><a href='http://www.livejournal.com/browse/'>Community Directory</a></li><li  ><a href='http://www.livejournal.com/syn/'>Feeds</a></li><li  ><a href='http://www.livejournal.com/radio/'>FRNK Radio</a></li>
									</ul>
								
							
						</li>
					
						<li class='s-navmenu-item horizon-menu-shop'>
							<a class="s-navmenu-rootlink" href='http://www.livejournal.com/shop/'>Shop</a>

							
								
									<ul class='s-navmenu-submenu'>
									<li  ><a href='http://www.livejournal.com/shop/vgift.bml'>Virtual Gifts</a></li><li  ><a href='http://www.livejournal.com/shop/theme/'>Themes</a></li><li  ><a href='http://www.livejournal.com/shop/userheads.bml'>Custom Userheads</a></li><li  ><a href='http://www.livejournal.com/shop/domain_ru.bml'>Domains RF</a></li><li  ><a href='http://www.zazzle.com/livejournal'>Merchandise</a></li>
									</ul>
								
							
						</li>
					
						<li class='s-navmenu-item horizon-menu-apps'>
							<a class="s-navmenu-rootlink" href='http://www.livejournal.com/extra/'>LJ Extras</a>

							
								
									<ul class='s-navmenu-submenu'>
									<li  ><a href='http://www.livejournal.com/devices'>Mobile</a></li><li  ><a href='http://www.livejournal.com/chat/'>LJ Talk</a></li><li  ><a href='http://www.livejournal.com/download/'>Downloads</a></li>
									</ul>
								
							
						</li>
					
				</ul>

				

			</nav>
			<!--/ Navbar -->

		</header>
		<!--/ Header -->

		
		<!-- Login -->
			<div class="lj_loginform s-login">
				<form method="post" action="https://www.livejournal.com/login.bml?ret=1" id="login" class="lj_login_form">
					
					<input type='hidden' name='mode' value='login'>
					
					<fieldset class="s-login-lj">
						<dl class="s-login-lj-username">
							<dt><label for='login_user'>Username</label></dt>
							<dd><input type="text" name="user" size="24" id='login_user' tabindex="1" placeholder="Username"></dd>
						</dl>
						<dl class="s-login-lj-password">
							<dt><label for='login_password'>Password</label></dt>
							<dd>
								<input type="password" id="login_password" name="password" size="15" class="lj_login_password" tabindex="2" placeholder="Password">
								<input type='submit' value="Log in" tabindex='3'>
							</dd>
						</dl>
						<dl class="s-login-lj-remember">
							<dt></dt>
							<dd><label><input type="checkbox" name="remember_me" value="1" tabindex="4" /> Remember Me</label></dd>
						</dl>
						<dl class="s-login-langs">
							<dt>Change language:</dt>
							<dd>
								<a href="http://www.livejournal.com/manage/settings/?cat=display">
									<ul>
										<li>English</li>
										<li>Español</li> 
										<li>Deutsch</li> 
										<li>Русский&hellip;</li>
									</ul>
								</a>
							</dd>
						</dl>					
					</fieldset>
					<fieldset class="s-login-options">
						<p class="s-login-option"><a href="http://www.livejournal.com/create.bml">Create an Account</a></p>
						<p class="s-login-option"><a href="http://www.livejournal.com/lostinfo.bml">Forgot your login or password?</a></p>
						<p class="s-login-more"><a href="http://www.livejournal.com/identity/login.bml?type=facebook" title="Facebook" class="i-auth"><img src="http://l-stat.livejournal.com/img/icons/facebook-16.gif?v=17127" width="16" height="16" alt="Facebook"></a>
						<a href="http://www.livejournal.com/identity/login.bml?type=twitter" title="Twitter" class="i-auth"><img src="http://l-stat.livejournal.com/img/icons/twitter-16.gif?v=18540" width="16" height="16" alt="Twitter"></a>
						<a href="#login-more" class="i-auth i-loginpopup-show"><img src="http://l-stat.livejournal.com/img/icons/showmore.gif?v=11430" width="16" height="16" alt="More login options" /></a></p>
						<div class="b-loginpopup" id="login-more">
							<ul class="b-loginpopup-items">
								<li class="b-loginpopup-item">
									<a href="http://www.livejournal.com/identity/login.bml?type=openid" title="OpenID"><img src="http://l-stat.livejournal.com/img/icons/openid-16.gif?v=17127" width="16" height="16" alt="OpenID" />OpenID</a>
								</li>
								<li class="b-loginpopup-item">
									<a href="http://www.livejournal.com/identity/login.bml?type=google" title="Google"><img src="http://l-stat.livejournal.com/img/icons/google-16.png?v=12457" width="16" height="16" alt="Google" />Google</a>
								</li>
								<li class="b-loginpopup-item">
									<a href="http://www.livejournal.com/identity/login.bml?type=mailru" title="Mail.Ru"><img src="http://l-stat.livejournal.com/img/icons/mailru-16.gif?v=11910" width="16" height="16" alt="Mail.Ru" />Mail.Ru</a>
								</li>
								<li class="b-loginpopup-item">
									<a href="http://www.livejournal.com/identity/login.bml?type=vkontakte" title="VKontakte"><img src="http://l-stat.livejournal.com/img/icons/vkontakte-16.gif?v=10284" width="16" height="16" alt="VKontakte" />VKontakte</a>
								</li>
							</ul>
						</div>
						<script type="text/javascript">
							jQuery('div.b-loginpopup').bubble({ target: jQuery('a.i-loginpopup-show'), closeControl: false, showOn: 'click' });
						</script>
					</fieldset>
				</form>
			</div>
		<!--/ Login -->
		

		

		<!-- Content -->
		<div class="s-content">

			

				

				

				

				

				

				

				

				<!-- Text Wrapper -->
				<div class='s-text-wrapper ' style='margin-right: px; height: 1%'>

					

					

					<div class="b-singlepost"> <div class="b-singlepost-about"> <dl class="b-singlepost-author"> <dt class="b-singlepost-author-userpic">  <img src="http://l-stat.livejournal.com/img/userpics/userpic-user.png?v=15821" alt="">  </dt> <dd class="b-singlepost-author-userinfo"> Mike Vanier (<span  class="ljuser  i-ljuser     "  lj:user="mvanier"><a href="http://mvanier.livejournal.com/profile" ><img width="16" height="16"  class="i-ljuser-userhead"  src="http://l-stat.livejournal.com/img/userinfo.gif?v=102.1" /></a><a href="http://mvanier.livejournal.com/" class="i-ljuser-username"   ><b>mvanier</b></a></span>) wrote,<br/> <span class="b-singlepost-author-date"><a href="http://mvanier.livejournal.com/2010/">2010</a>-<a href="http://mvanier.livejournal.com/2010/07/">07</a>-<a href="http://mvanier.livejournal.com/2010/07/25/">25</a> 22:26:00</span> </dd> </dl> <div class="b-singlepost-standout"> <ul class="b-linkbar">  <li class="b-linkbar-item"><a href="http://www.livejournal.com/go.bml?journal=mvanier&amp;itemid=4647&amp;dir=prev" rel="nofollow" title="Previous" class="b-controls b-controls-prev"><i class="b-controls-bg"></i>Previous</a></li>  <li class="b-linkbar-item"><a href="http://www.livejournal.com/tools/memadd.bml?journal=mvanier&amp;itemid=4647" rel="nofollow" title="Memorize" class="b-controls b-controls-memadd"><i class="b-controls-bg"></i>Memorize</a></li>  <li class="b-linkbar-item"><a href="#" rel="nofollow" title="Share" class="b-controls b-controls-share"><i class="b-controls-bg"></i>Share</a><script type="text/javascript">LJShare.link({"url":"http://mvanier.livejournal.com/4647.html","title":"Yet Another Monad Tutorial (part 4: The Maybe and List Monads)"});</script></li>  <li class="b-linkbar-item"><a href="http://www.livejournal.com/go.bml?journal=mvanier&amp;itemid=4647&amp;dir=next" rel="nofollow" title="Next" class="b-controls b-controls-next"><i class="b-controls-bg"></i>Next</a></li>  </ul> </div> </div>    <div class="b-singlepost-wrapper">    <h1 class="b-singlepost-title">     Yet Another Monad Tutorial (part 4: The Maybe and List Monads)  </h1>  <div class="b-singlepost-body"> <p>In the <a href="http://mvanier.livejournal.com/3917.html" rel="nofollow">previous</a> <a href="http://mvanier.livejournal.com/4305.html" rel="nofollow">articles</a> <a href="http://mvanier.livejournal.com/4586.html" rel="nofollow">in</a> this
series, I covered the conceptual basis of monads, but the discussion was pretty
abstract.  Now that (I hope) you have a pretty good idea of what monads are and
what they're for, it's time to get into the nitty-gritty details of how to
actually derive the definitions of specific monads.  That means that we are
going to have to define the correct instances of the type class
<code>Monad</code> for the various notions of computation we talked about
previously.  In our derivations, we will use our understanding of how monadic
composition should work in each particular case to give us the definition of
monadic apply (the <code>&gt;&gt;=</code> operator), and we'll use the monad
laws to give us the definition of <code>return</code>.</p>

<p><a name="cutid1"></a></p>

<h2>The <code>Maybe</code> monad</h2>

<p>The <code>Maybe</code> monad is often the first monad shown to new Haskell programmers
in tutorials, because it's very simple to use, to implement, and to
understand.  To start with, let's look at the definition of the <code>Maybe</code> data
type:</p>

<pre><code>  data Maybe a = Nothing | Just a
</code></pre>

<p>This states that <code>Maybe</code> is a type constructor that acts on a particular type
<code>a</code> to give a (concrete) data type.  We usually describe this by saying that
<code>Maybe</code> is a "polymorphic" data type, but the meaning is the same.  So if <code>a</code>
was <code>Int</code>, we'd have</p>

<pre><code>  data Maybe Int = Nothing | Just Int
</code></pre>

<p>except that we don't have to define this directly, as the one definition
given above suffices for all types.</p>

<p>A value of type <code>Maybe a</code> is either there or not there; if it's <code>Nothing</code>, it's
"not there" and if it's <code>Just x</code> for some value <code>x</code>, it's "just" the value <code>x</code>.
One way to think of this is as a container that either has zero or one elements.
(Remember that I said previously that monadic values were sometimes described,
misleadingly, as containers.  This is a case in point.)</p>

<p>The <code>Maybe</code> polymorphic type is useful because we can use it to model a kind
of "extended function" which can either produce a value as its output or fail
to produce any output (<em>i.e.</em> a function that can fail).  This can be written
as follows:</p>

<pre><code>  f :: a -&gt; Maybe b
</code></pre>

<p>A function <code>f</code> of this type takes in an input value of type <code>a</code>, and either
returns <code>Nothing</code> (which indicates failure) or a value <code>Just x</code> where <code>x</code> has
type <code>b</code>.  Functions like <code>f</code> will be the ones that will be used in the <code>Maybe</code>
monad, and composing two functions of this kind will look like this:</p>

<pre><code>  f :: a -&gt; Maybe b   -- assume it's defined elsewhere
  g :: b -&gt; Maybe c   -- assume it's defined elsewhere

  h :: a -&gt; Maybe c   -- monadic composition of f and g
  h = f &gt;=&gt; g         -- recall: &gt;=&gt; is the monadic composition operator
</code></pre>

<p>We said that all monads must be type constructors.  <code>Maybe</code> is a type
constructor, so it qualifies in that sense.  But in order to make <code>Maybe</code>
into a monad, we have to make it an instance of the type class <code>Monad</code>, which
means that we have to fill out this definition:</p>

<pre><code>  instance Monad Maybe where
    (&gt;&gt;=)  = {- definition of &gt;&gt;= for Maybe -}
    return = {- definition of return for Maybe -}
</code></pre>

<p>How do we define <code>(&gt;&gt;=)</code> and <code>return</code> for <code>Maybe</code>?</p>

<p>First, let's write a skeleton definition for the <code>&gt;&gt;=</code> operator, covering the
two possible cases of a left operand of type <code>Maybe a</code>:</p>

<pre><code>  Nothing &gt;&gt;= f  =  {- to be defined -}
  Just x  &gt;&gt;= f  =  {- to be defined -}
</code></pre>

<p>where <code>x</code> has type <code>a</code>.  It would also be legal to write the left-hand side
of this definition as:</p>

<pre><code>  (&gt;&gt;=) Nothing  f  =  {- to be defined -}
  (&gt;&gt;=) (Just x) f  =  {- to be defined -}
</code></pre>

<p>but it looks better if we define it the way we use it, as an operator, and
Haskell allows us to do this.</p>

<p>To complete this definition, consider how we want monadic composition to work
in the <code>Maybe</code> monad.  Let's take our example above with <code>f</code> and <code>g</code>
composing monadically to make <code>h</code>:</p>

<pre><code>  f :: a -&gt; Maybe b
  g :: b -&gt; Maybe c
  h :: a -&gt; Maybe c
  h = f &gt;=&gt; g
</code></pre>

<p>If we pass an argument to <code>f</code> and it returns <code>Nothing</code> (<em>i.e.</em> it fails),
then what should <code>h</code> return on the same output?</p>

<pre><code>  f x = Nothing
  h x = (f &gt;=&gt; g) x = ???
</code></pre>

<p>It seems apparent that if <code>f x</code> is <code>Nothing</code>, <code>h x</code> must also be <code>Nothing</code>,
because if the first function (<code>f</code>) in the definition of <code>h</code> fails to produce
an output, then <code>h</code> as a whole must also fail to produce an output.  The only
way <code>h</code> could produce an output is if <code>f</code> produced an output (call it <code>y</code>),
passed it to <code>g</code>, and <code>g y</code> also produced an output.  If either <code>f</code> or <code>g</code>
fails, then <code>h</code> fails too <em>i.e.</em> <code>h x</code> will evaluate to <code>Nothing</code>.</p>

<p>Putting this into our definition of <code>h</code>, we have:</p>

<pre><code> h = f &gt;=&gt; g
 h = \x -&gt; (f x &gt;&gt;= g)  -- equivalent (from the definition of &gt;=&gt;)
 h x = f x &gt;&gt;= g        -- equivalent
 -- assume f x == Nothing
 h x = (Nothing &gt;&gt;= g)
     = Nothing
 -- therefore:
 Nothing &gt;&gt;= g = Nothing
</code></pre>

<p>So we know how the <code>(&gt;&gt;=)</code> operator will work with an input of <code>Nothing</code>
&mdash; it will just return <code>Nothing</code>:</p>

<pre><code>  Nothing &gt;&gt;= f  =  Nothing
  Just x  &gt;&gt;= f  =  {- to be defined -}
</code></pre>

<p>Note that I changed <code>g</code> to <code>f</code> here, which is fine because the name of the
function doesn't matter in the definition.  In fact, where possible we leave off
the name of the function entirely and use the <code>_</code> wildcard operator as follows:</p>

<pre><code>  Nothing &gt;&gt;= _  =  Nothing
</code></pre>

<p>We can't do this for the second equation because we'll need the function <code>f</code> in
the definition.</p>

<p>Now let's look at the other case.  If <code>f x</code> does <em>not</em> fail, it will produce
an output of the form <code>Just y</code> for some result value <code>y</code>.  We need to
"unpack" a value from <code>Just y</code> to get the value <code>y</code>, which we will give as
the argument to <code>g</code>, and <code>g y</code> will be what <code>h x</code> evaluates to:</p>

<pre><code> h = f &gt;=&gt; g
 h = \x -&gt; (f x &gt;&gt;= g)  -- equivalent (from the definition of &gt;=&gt;)
 h x = f x &gt;&gt;= g        -- equivalent
 -- assume f x == Just y 
 h x = (Just y &gt;&gt;= g)
     = g y
</code></pre>

<p>This gives us the second part of our definition:</p>

<pre><code>  Nothing &gt;&gt;= f  =  Nothing
  Just x  &gt;&gt;= f  =  f x
</code></pre>

<p>Note that I changed <code>y</code> to <code>x</code> and <code>g</code> to <code>f</code> in the definition.  Again, the
variable and function names don't matter as long as you're consistent.</p>

<p>That completes the definition of the <code>&gt;&gt;=</code> operator for the <code>Maybe</code> monad.
Now we need to define the <code>return</code> function for this monad:</p>

<pre><code>  return x  =  ???
</code></pre>

<p>for an arbitrary value <code>x</code>.  What possibilities have we got?  We could just
say that</p>

<pre><code>  return x  =  Nothing
</code></pre>

<p>for any <code>x</code>.  If this were the case, however, we would violate our monad laws:</p>

<pre><code>  return x &gt;&gt;= f  ==  f x
  Nothing &gt;&gt;=  f  ==  f x
  Nothing         ==  f x   -- WRONG!
</code></pre>

<p>Since we can assume that at least <em>some</em> <code>f x</code> values are not <code>Nothing</code> (for
instance, consider the monadic function <code>f x = Just x</code>), this can't be
correct.  The obvious alternative is:</p>

<pre><code>  return x  =  Just x
</code></pre>

<p>which obeys the monad laws:</p>

<pre><code>  return x &gt;&gt;= f
    = (Just x) &gt;&gt;= f   -- definition of return for Maybe monad
    = f x              -- definition of &gt;&gt;= for Maybe monad
                       -- correct according to monad law 1

  Just x &gt;&gt;= return
    = return x         -- definition of &gt;&gt;= for Maybe monad
    = Just x           -- definition of return for Maybe monad
                       -- correct according to monad law 2

  Nothing &gt;&gt;= return
    = Nothing          -- definition of &gt;&gt;= for Maybe monad
                       -- correct according to monad law 2
</code></pre>

<p>This works, so let's use it.  The complete definition of the <code>Maybe</code> monad is
thus:</p>

<pre><code>  instance Monad Maybe where
    return x  =  Just x

    Nothing &gt;&gt;= f  =  Nothing
    Just x  &gt;&gt;= f  =  f x
</code></pre>

<p>Woo hoo!  We've just derived our first monad!</p>

<p>Just to be on the safe side, let's check that our definition obeys monad law
3, which is:</p>

<pre><code>  (mv &gt;&gt;= f) &gt;&gt;= g    ==    mv &gt;&gt;= (\x -&gt; (f x &gt;&gt;= g))
</code></pre>

<p>First let's check that it's correct when <code>mv</code> is <code>Nothing</code>:</p>

<pre><code>  (Nothing &gt;&gt;= f) &gt;&gt;= g             -- left hand side
    = Nothing &gt;&gt;= g                 -- definition of &gt;&gt;=
    = Nothing                       -- definition of &gt;&gt;=

  Nothing &gt;&gt;= (\x -&gt; (f x &gt;&gt;= g))   -- right hand side
    = Nothing                       -- definition of &gt;&gt;=
</code></pre>

<p>OK, that checks out.  Now let's see if it works when <code>mv</code> is <code>Just v</code> for
some value <code>v</code>:</p>

<pre><code>  ((Just v) &gt;&gt;= f) &gt;&gt;= g            -- left hand side
    = f v &gt;&gt;= g                     -- definition of &gt;&gt;=

  (Just v) &gt;&gt;= (\x -&gt; (f x &gt;&gt;= g))  -- right hand side
    = (\x -&gt; (f x &gt;&gt;= g)) v         -- definition of &gt;&gt;=
    = f v &gt;&gt;= g                     -- normal function application (beta reduction)
</code></pre>

<p>so this checks out too.  So it works!  This <em>is</em> the correct definition of 
the <code>Maybe</code> monad!  And the audience goes wild!</p>

<p>What's the significance of this?  It means that we can compose a bunch of
monadic functions in the <code>Maybe</code> monad easily.  And why, you will certainly be
asking yourself, is that important?  It's not hard to imagine having a bunch of
<code>Maybe</code> monadic functions <em>i.e.</em> functions that can fail.  Let's say that they
all have type <code>Int -&gt; Maybe Int</code>.  Here are three such functions:</p>

<pre><code>  f :: Int -&gt; Maybe Int
  f x = if x `mod` 2 == 0 then Nothing else Just (2 * x)

  g :: Int -&gt; Maybe Int
  g x = if x `mod` 3 == 0 then Nothing else Just (3 * x)

  h :: Int -&gt; Maybe Int
  h x = if x `mod` 5 == 0 then Nothing else Just (5 * x)
</code></pre>

<p>We'd like to compose them to get a final function:</p>

<pre><code>  k :: Int -&gt; Maybe Int
</code></pre>

<p>which is the result of applying <code>f</code>, then <code>g</code>, then <code>h</code> one after another,
with <code>Nothing</code> returned if any of them failed.  All this does is multiply the
input number by 30 unless the number is a multiple of 2, 3, or 5 (in which
case it fails <em>i.e.</em> returns <code>Nothing</code>).</p>

<p>If you've followed the previous discussion it should be clear that you can
define <code>k</code> using monadic composition as follows:</p>

<pre><code>  k = f &gt;=&gt; g &gt;=&gt; h
</code></pre>

<p>Or, if you want to use the <code>&gt;&gt;=</code> operator instead:</p>

<pre><code>  k x = f x &gt;&gt;= g &gt;&gt;= h
</code></pre>

<p>Or, if you like the <code>do</code> notation:</p>

<pre><code>  k x = do y &lt;- f x
           z &lt;- g y
           h z
</code></pre>

<p>Any way you slice it, though, it's pretty simple.</p>

<p>Now, it's perfectly possible to define <code>h</code> without using monads at all.  It
looks like this:</p>

<pre><code>  k x = case f x of
          Nothing -&gt; Nothing
          Just y  -&gt; case g y of
                       Nothing -&gt; Nothing
                       Just z  -&gt; h z
</code></pre>

<p>This shows why the <code>Maybe</code> monad is important: it drastically cuts down on the
boilerplate code we have to write to chain <code>Maybe</code>-producing functions together.
Imagine how grungy the non-monadic code would be if there were ten <code>Maybe</code>
monadic functions in a row being chained together &mdash; it would be indented
so far to the left that you wouldn't be able to read it, and the overall
structure of the computation would be lost in a maze of <code>case</code> statements.  But
with monads, you could write it like this:</p>

<pre><code>    f11 = f1 &gt;=&gt; f2 &gt;=&gt; f3 &gt;=&gt; f4 &gt;=&gt; f5 &gt;=&gt; f6 &gt;=&gt; f7 &gt;=&gt; f8 &gt;=&gt; f9 &gt;=&gt; f10
</code></pre>

<p>or (using <code>&gt;&gt;=</code>):</p>

<pre><code>    f11 x = f1 x &gt;&gt;= f2 &gt;&gt;= f3 &gt;&gt;= f4 &gt;&gt;= f5 &gt;&gt;= f6 &gt;&gt;= f7 &gt;&gt;= f8 &gt;&gt;= f9 &gt;&gt;= f10
</code></pre>

<p>So monads have made composition of monadic functions just as easy as composition
of regular (non-monadic) functions is.</p>

<p>The <code>Maybe</code> monad is very useful for illustrating basic concepts, but it may
be confusing in one sense: many people mistakenly believe that the only
reason for having monads in Haskell is to handle non-functional computations
<em>i.e.</em> ones that do (file or terminal) I/O, alter global variables, etc.  And
yet, here I showed you a monadic computation which can be done perfectly well
without monads.  In this case, monads are not essential; they're just <em>very</em>
convenient.  And that's why I said that even though the <em>original</em> reason for
adding monads to Haskell had to do with dealing with inherently
non-functional kinds of computations (like computations involving I/O), they
turned out to have a far greater applicability.  That's why they're neat.</p>

<p>Now, on to our next monad.</p>

<h2>The list monad</h2>

<p>If you liked the <code>Maybe</code> monad, you're going to <em>love</em> the list monad ;-)  We're
going to be filling in this instance definition:</p>

<pre><code>  instance Monad [] where
    (&gt;&gt;=)  = {- definition of &gt;&gt;= for lists -}
    return = {- definition of return for lists -}
</code></pre>

<p>Note that we use the empty list <code>[]</code> to represent the list type constructor.
This is a bit of a hack (lists have special syntactic support in Haskell).
Whatever.</p>

<p>As with all monads, the first task is to be clear about what the monad's
monadic function represents.  For the list monad, a monadic function <code>f</code>
looks like this:</p>

<pre><code>  f :: a -&gt; [b]
</code></pre>

<p>(where, of course, the notation <code>[b]</code> means "list of <code>b</code>").  Recall that the
generic definition of a monadic function is this:</p>

<pre><code>  f :: a -&gt; m b
</code></pre>

<p>for some monad <code>m</code> which has to be a type constructor.  Lists are a plausible
candidate for a monad because "list of" is a type constructor (even though
the syntax is hard-wired into Haskell); if we wanted to, we could even define
a list datatype ourselves:</p>

<pre><code>  data List a = Nil | Cons a (List a)
</code></pre>

<p>and then the monadic function would look like this:</p>

<pre><code>  f :: a -&gt; List b
</code></pre>

<p>We'll stick to the standard list syntax from now on.</p>

<p>What do functions of this sort represent?  The normal way of thinking about them
is that they take in an input value of type <code>a</code>, and produce a bunch of output
values of type <code>b</code>, collected in one convenient container (the list).  (Here
again, we have a monad that seems to be a container.)  A different way of
thinking about functions of this type is that they represent functions with
multiple return values <em>i.e.</em> functions which can somehow return a bunch of
different values "all at once". (I don't want to say "in parallel" because that
implies simultaneous processing which isn't going on here.)  The multiple return
values are just the elements of the list.  This turns out to be a useful
perspective when you have multiple functions of this type, for instance:</p>

<pre><code>  f :: Int -&gt; [Int]
  g :: Int -&gt; [Int]
</code></pre>

<p>Here, <code>f</code> and <code>g</code> both take in a single <code>Int</code> as an argument and return a bunch
of <code>Int</code>s as results.  What if we wanted to take every result from <code>f</code> and apply
<code>g</code> individually to each result, collecting all the results together?  It would
be great if we could do this directly, without having to unpack every element
from the list of results that <code>f</code> returns and apply <code>g</code> to each one.  This is
what the list monad will allow us to do.</p>

<p>Let's flesh this out a bit with some example functions:</p>

<pre><code>  f :: Int -&gt; [Int]
  f x = [x-1, x, x+1]

  g :: Int -&gt; [Int]
  g x = [-x, x]
</code></pre>

<p>How would we "compose" these two functions?  <code>f x</code> returns a list, so to apply
<code>g</code> to each element of the list we will need the <code>map</code> function:</p>

<pre><code>  f 10   --&gt;  [9, 10, 11]
  map g (f 10)  --&gt;  [[-9, 9], [-10, 10], [-11, 11]]
</code></pre>

<p>This new result may be interesting, but it can't be the composition of <code>f</code> and
<code>g</code> because it doesn't have the same type (it's a list of lists of <code>Int</code>s, not a
list of <code>Int</code>s).  To turn it into a simple list of <code>Int</code>s, we can flatten the
list of lists using the <code>concat</code> function (which just concatenates a list of
lists into a single list):</p>

<pre><code>  -- N.B. concat has the type [[a]] -&gt; [a]
  concat (map g (f 10))  --&gt;  [-9, 9, -10, 10, -11, 11]
</code></pre>

<p>What this result represents is the collection of all the results obtained by
applying <code>f</code> to an integer input and then applying <code>g</code> to one of the results.
If you think of <code>f</code> and <code>g</code> as functions which produce multiple results "all at
once", then this result is just the collection of all possible results of
applying <code>f</code> and then <code>g</code>.  Diagrammatically, we can represent this as:</p>

<pre><code>                  g   |  -9
           |  9 ----&gt; |
           |          |   9
           |
       f   |      g   | -10
  10 ----&gt; | 10 ----&gt; |
           |          |  10
           |
           |      g   | -11
           | 11 ----&gt; |
                      |  11
</code></pre>

<p>This shows that the composition of <code>f</code> and <code>g</code> is the collection of all paths
through the <code>f</code> and <code>g</code> functions.</p>

<p>Interestingly enough, we've just determined what the <code>&gt;&gt;=</code> operator has to be
for the list monad!  It's defined as follows:</p>

<pre><code>  -- mv :: [a]
  -- g  :: a -&gt; [b]
  mv &gt;&gt;= g = concat (map g mv)
</code></pre>

<p>where <code>mv</code> is a monadic value in the list monad (which is just a list of values
of type <code>a</code>).  In the previous example, <code>mv</code> is just the result of evaluating <code>f
10</code> and <code>g</code> is as it was before.  This definition even works if <code>mv</code> is the
empty list <code>[]</code>, since mapping a function over the empty list just returns the
empty list, and <code>concat</code> applied to the empty list returns the empty list as
well.  So the definition of the <code>&gt;&gt;=</code> operator for this monad is very simple.</p>

<p>[Note for GHC fans: The GHC Haskell compiler actually implements <code>&gt;&gt;=</code> for the
list monad in a slightly different way which is (I believe) more efficient but
which gives the same results.]</p>

<p>How would we define <code>return</code> in this monad?  Let's think of the list monadic
value as an "action" returning various values.  Let's also recall that <code>return</code>
should be the equivalent of the identity function in any given monad.  What
would be the equivalent of the identity function in the list monad?  It would
take an input value and return an "action" which simply returns that value when
"executed".  So we know that <code>return</code> can't simply return the empty list, for
instance.  A reasonable possibility is to define <code>return</code> as follows:</p>

<pre><code>  return :: a -&gt; [b]
  return x = [x]
</code></pre>

<p>In other words, <code>return</code> just creates a list with a single value.  Let's see if
this is plausible by seeing if it obeys the monad laws:</p>

<pre><code>  -- f :: a -&gt; [b]
  -- x :: a
  return x &gt;&gt;= f  =  concat (map f (return x))   -- definition of &gt;&gt;=
                  =  concat (map f [x])          -- definition of return
                  =  concat [f x]                -- definition of map
                  =  f x                         -- definition of concat
                     -- correct according to monad law 1

  -- mv :: [a]
  mv &gt;&gt;= return   =  concat (map return mv)      -- definition of &gt;&gt;=
                  =  concat (map (\x -&gt; [x]) mv) -- definition of return
                  -- Two cases:
                  -- Case 1:  mv == []
                  =  concat (map (\x -&gt; [x]) []) -- definition of mv
                  =  concat []                   -- definition of map
                  =  []                          -- definition of concat
                  =  mv                          -- definition of mv
                  -- Case 2:  mv == [v1, v2, ...]
                  =  concat (map (\x -&gt; [x]) [v1, v2, ...])  -- definition of mv
                  =  concat [[v1], [v2], ...]    -- definition of map
                  =  [v1, v2, ...]               -- definition of concat
                  =  mv                          -- definition of mv
                     -- correct according to monad law 2
</code></pre>

<p>OK, this works.  You might want to try other possible definitions for <code>return</code>
in the list monad (<em>e.g.</em> where <code>return</code> returns a list which contains 0, 2, 3,
or an infinite number of copies of its argument), and find out why they violate
the monad laws.  This is a good way to get practice using the monad laws.</p>

<p>To prove that our list monad is really a monad, we still have to show that monad
law 3 is obeyed.  This will be a lot harder, but let's do it anyway.  It'll turn
out to be easier to do if we use the nice version of monad law 3 (the one
involving monadic composition).  To start, we need to define monadic composition
in the list monad:</p>

<pre><code>  -- Monad law 3 (nice version):  
  (f &gt;=&gt; g) &gt;=&gt; h  =  f &gt;=&gt; (g &gt;=&gt; h)
  -- By definition: 
  f &gt;=&gt; g = \x -&gt; f x &gt;&gt;= g
  -- In the list monad, using the definition of &gt;&gt;= for lists:
  f &gt;=&gt; g = \x -&gt; concat (map g (f x))
  -- Using the composition operator (.), this can be written as:
  f &gt;=&gt; g = concat . map g . f
</code></pre>

<p>In addition, I'll be using several identities involving <code>map</code> and <code>concat</code>
applied to lists.  You should just take these on faith for now, though I'll show
how to derive them below.</p>

<pre><code>  -- equation 1:
  map (f . g)  =  map f . map g
  -- equation 2:
  map f . concat =  concat . map (map f)
  -- equation 3:
  concat . concat  =  concat . map concat
</code></pre>

<p>As I mentioned above, <code>.</code> refers to the (pure) function composition operator.
It has lower precedence than function application (via concatenation), so an
expression like <code>map f . map g</code> actually means <code>(map f) . (map g)</code>.  Haskell
programmers usually prefer to leave out unnecessary parentheses when possible.
It's also important to note that <em>e.g.</em> <code>map f</code> is a function even though <code>map</code>
normally takes two arguments (a function and a list to map the function over).
If you recall what I said about currying previously, then you'll understand that
<code>map f</code> is a function which takes a list as its only argument and returns a new
list, which what you get when you apply the function <code>f</code> to all the elements of
the original list and collect the results into a new list.  We'll be using
currying a lot below.</p>

<p>Given all that, here's the derivation:</p>

<pre><code>  (f &gt;=&gt; g) &gt;=&gt; h
    = (concat . map g . f) &gt;=&gt; h                     -- definition of &gt;=&gt;
    = concat . map h . (concat . map g . f)          -- definition of &gt;=&gt;
    = concat . map h . concat . map g . f            -- remove unnecessary parentheses

  f &gt;=&gt; (g &gt;=&gt; h)
    = f &gt;=&gt; (concat . map h . g)                     -- definition of &gt;=&gt;
    = concat . map (concat . map h . g) . f          -- definition of &gt;=&gt;
    = concat . map ((concat . map h) . g) . f        -- equivalent
    = concat . (map (concat . map h)) . (map g) . f  -- equation 1
    = concat . map (concat . map h) . map g . f      -- remove unnecessary parentheses
    = concat . map concat . map (map h) . map g . f  -- equation 1
</code></pre>

<p>So we need to show that:</p>

<pre><code>  concat . map h . concat . map g . f  =  concat . map concat . map (map h) . map g . f
</code></pre>

<p>which will be true if we can show that:</p>

<pre><code>  concat . map h . concat  =  concat . map concat . map (map h)
</code></pre>

<p>Let's do that:</p>

<pre><code>  -- add parentheses for clarity:
  concat . (map h . concat) = concat . map concat . map (map h)
  -- use equation 2:
  concat . concat . map (map h)  =  concat . map concat . map (map h)
  -- add parentheses for clarity:
  (concat . concat) . map (map h)  =  concat . map concat . map (map h)
  -- use equation 3:
  concat . map concat . map (map h)  =  concat . map concat . map (map h)
</code></pre>

<p>and we're done.  Whew!  In fact, Haskell programmers very rarely do derivations
of this kind, but they are necessary to show that a purported monad really is a
monad.</p>

<blockquote>
  <h4>ASIDE: Deriving the <code>map</code>/<code>concat</code> identities (equations 1, 2, and 3)</h4>

<p><b><u>Preliminaries</u>:</b></p>

<p>To prove these identities, we will need to first prove a few simpler ones 
(math is hard!).  They are:</p>

<pre><code>  -- Equation 4:
concat (x:xs) = x ++ concat xs
-- Equation 5:
concat (x ++ y) = concat x ++ concat y
-- Equation 6:
map f (x ++ y) = map f x ++ map f y
</code></pre>

<p>Equation 4 follows from the definition of <code>concat</code>.  Equation 5 is easily
proved by induction on the length of <code>x</code> and using equation 4:</p>

<pre><code>  -- base case: x is an empty list
concat ([] ++ y) = concat [] ++ concat y
concat y = [] ++ concat y  -- definition of concat []
concat y = concat y        -- definition of ++
-- OK

-- inductive case: x is non-empty; call its parts x1 (head) and xs (tail)
concat ((x1:xs) ++ y) 
  = concat (x1 : (xs ++ y))      -- definition of ++
  = x1 ++ concat (xs ++ y)       -- equation 4
  = x1 ++ concat xs ++ concat y  -- inductive hypothesis

concat (x1:xs) ++ concat y
  = x1 ++ concat xs ++ concat y  -- equation 4
-- OK, so Q.E.D.
</code></pre>

<p>Equation 6 is proved similarly:</p>

<pre><code>  -- base case: x is an empty list
map f ([] ++ y) = map f [] ++ map f y
map f y = [] ++ map f y
map f y = map f y
-- OK

-- inductive case: x is non-empty; call its parts x1 (head) and xs (tail)
map f (x ++ y)
  = map f ((x1:xs) ++ y)
  = map f (x1 : (xs ++ y))            -- definition of ++
  = f x1 : map f (xs ++ y)            -- definition of map
  = f x1 : (map f xs ++ map f y)      -- inductive hypothesis
  = (f x1 : map f xs) ++ map f y      -- definition of ++
  = map f (x1:xs) ++ map f y          -- definition of map
  = map f x ++ map f y                -- definition of x
-- OK, so Q.E.D.
</code></pre>

<p>With that out of the way, let's get to the proofs of equations 1, 2, and 3.</p>

<p><b><u>Equation 1</u>:</b></p>

<pre><code>   map (f . g)  =  map f . map g
</code></pre>

<p>Use induction on the length of the implicit list argument on both sides, as
well as the definition of <code>map</code>:</p>

<pre><code>   -- base case: empty list
 map (f . g) [] = []
 (map f . map g) [] = map f (map g []) = map f [] = []
 -- OK

 -- inductive case: non-empty list
 map (f . g) (x:xs) 
   = ((f . g) x) : (map (f . g) xs)        -- definition of map
   = (f (g x)) : (map (f . g) xs)          -- definition of .
 (map f . map g) (x:xs) 
   = map f (map g (x:xs))                  -- definition of .
   = map f ((g x) : (map g xs))            -- definition of map
   = (f (g x)) : (map f (map g xs))        -- definition of map
   = (f (g x)) : ((map f . map g) xs)      -- definition of .
   = (f (g x)) : (map (f . g) xs)          -- inductive hypothesis
 -- OK, so Q.E.D.
</code></pre>

<p><b><u>Equation 2</u>:</b></p>

<pre><code>  map f . concat =  concat . map (map f)
</code></pre>

<p>Use induction on the length of the list argument:</p>

<pre><code>  -- base case: empty list
(map f . concat) [] = map f (concat []) = map f [] = []
(concat . map (map f)) [] = concat (map (map f) []) = concat [] = []
-- OK

-- inductive case: non-empty list
(map f . concat) (x:xs)
  = map f (concat (x:xs))                   -- definition of .
  = map f (x ++ concat xs)                  -- equation 4 
  = map f x ++ (map f (concat xs))          -- equation 6
  = map f x ++ ((map f . concat) xs)        -- definition of .
  = map f x ++ ((concat . map (map f)) xs)  -- inductive hypothesis
  = map f x ++ concat (map (map f) xs)      -- definition of .

(concat . map (map f)) (x:xs)
  = concat (map (map f) (x:xs))             -- definition of .
  = concat (map f x : map (map f) xs)       -- definition of map
  = map f x ++ concat (map (map f) xs)      -- equation 4
-- OK, so Q.E.D.
</code></pre>

<p><b><u>Equation 3</u>:</b></p>

<pre><code>  concat . concat  =  concat . map concat
</code></pre>

<p>As usual, use induction on the length of the list argument:</p>

<pre><code>  -- base case: empty list
(concat . concat) [] = concat (concat []) = concat [] = []
(concat . map concat) [] = concat (map concat []) = concat [] = []
-- OK

-- inductive case: non-empty list
(concat . concat) (x:xs)
  = concat (concat (x:xs))                 -- definition of . 
  = concat (x ++ concat xs)                -- equation 4
  = concat x ++ concat (concat xs)         -- equation 5

(concat . map concat) (x:xs)
  = concat (map concat (x:xs))             -- definition of .
  = concat (concat x : map concat xs)      -- definition of map
  = concat x ++ concat (map concat xs)     -- equation 4
  = concat x ++ (concat . map concat) xs   -- definition of .
  = concat x ++ (concat . concat) xs       -- inductive hypothesis
  = concat x ++ concat (concat xs)         -- definition of .
-- OK, so Q.E.D.
</code></pre>
</blockquote>

<p>By now, I hope you're fully convinced that the list monad is in fact a monad ;-)</p>

<p>A much more interesting question, of course, is this: what can we <em>do</em> with the
list monad that was hard to do before?  Here's a simple example: find all pairs
of numbers between 1 and 6 that sum to the number 7 (the numbers might represent
<em>e.g.</em> dice rolls).  With the list monad, this is trivial:</p>

<pre><code>  -- Using do-notation:
  do n1 &lt;- [1..6]
     n2 &lt;- [1..6]
     if n1 + n2 == 7 then return (n1, n2) else []
  -- Result: [(1,6),(2,5),(3,4),(4,3),(5,2),(6,1)]
</code></pre>

<p>This can also be written without the <code>do</code>-notation, though it's less clear:</p>

<pre><code>  [1..6] &gt;&gt;= \n1 -&gt;
    [1..6] &gt;&gt;= \n2 -&gt;
      if n1 + n2 == 7 then return (n1, n2) else []
</code></pre>

<p>How does this work?  You should really sit down and work this out for yourself
given the definitions of <code>&gt;&gt;=</code> and <code>return</code> for lists, but here's a hand-wavy
explanation.  Note that <code>[1..6]</code> is a monadic value in the list monad, so it
delivers <em>all</em> of its values to <code>n1</code> (one at a time, of course), and then again
to <code>n2</code>, and then if the sum is correct all the pairs <code>(n1, n2)</code> will be
returned.  So we're doing a computation on all elements of a list as easily as
if it were computations on only single elements.  That's what the list monad
buys you.</p>

<p>If you've done any significant amount of Haskell programming, alarm bells are
going off in your head right about now.  "But wait!" I hear you cry.  "Can't you
just use a list comprehension to do this?"  Indeed you can, and it looks like
this:</p>

<pre><code>  [(n1, n2) | n1 &lt;- [1..6], n2 &lt;- [1..6], n1 + n2 == 7]
</code></pre>

<p>The list monad can in fact do anything that list comprehensions can do.  Which
syntax one prefers is a matter of taste and may also depend on the particular
problem.  In fact, Phil Walder, in the paper <em>Comprehending Monads</em> (there's a
pun in that title, as there are in most of Phil's paper titles) suggested that
the list comprehension syntax be extended to arbitrary monads.  That proposal
was eventually rejected in favor of the current notation.</p>

<p>The list monad is more than just an alternate version of list comprehensions,
though.  For one thing, there are many very generic functions that can work on
instances of any monad; having a list monad means that those functions can work
on lists as well.  Furthermore, there is an extension to the <code>Monad</code> type class
called <code>MonadPlus</code> which adds extra functionality to monads (specifically, it
defines a "zero" element for a monad as well as a way of "adding" two monadic
values).  Lists turn out to be an instance of <code>MonadPlus</code> as well as of <code>Monad</code>,
and this means that generic functions that work on all instances of <code>MonadPlus</code>
will also work on lists.  (For instance, there is a generalization of the
<code>concat</code> function called <code>msum</code> which works for any instance of <code>MonadPlus</code>,
including lists.)  It's better to have generic functions that can work on large
numbers of datatypes than to have to define new functions for each particular
datatype, so this is a clear win.</p>

<h2>Next time</h2>

<p>In the <a href="http://mvanier.livejournal.com/5103.html" rel="nofollow">next</a> installment I'll look at monads to deal with error
handling.</p> </div>  </div>   <div  id="comments"  class=" b-grove b-grove-hover  ljtimes-disabled     lj-widget" data-authtoken="c0:1363852800:2919:86400:ZfCMezBdPS-0-:f90610867bb238c23ba97c90a537b9a8" data-widget="comments"> <div class="b-xylem b-xylem-first"> <ul class="b-xylem-cells">  <li class="b-xylem-cell b-xylem-cell-add">  <a class="b-addcomment" href="http://mvanier.livejournal.com/4647.html?mode=reply#add_comment"><span class="b-addcomment-inner"><i class="b-addcomment-icon"></i>Post a new comment</span></a>   <div class=" b-watering  b-watering-trueauth-anonymous b-watering-realauth-anonymous b-watering-authtype-anonymous     b-watering-user-notafriend b-watering-user-regonly   b-watering-user-logips b-watering-user-logips-anon  b-watering-user-screened b-watering-user-screened-all     b-watering-captcha-all  "> <form action="http://www.livejournal.com/talkpost_do.bml" method="post" id="postform"> <div class="b-watering-wrapper"> <input type='hidden' name="journal" value="mvanier" /> <input type='hidden' name="itemid" value="4647" /> <input type='hidden' name="response" value="" /> <input type='hidden' name="lj_form_auth" value="c0:1363852800:2919:86400:ZfCMezBdPS-0-:f90610867bb238c23ba97c90a537b9a8" id="lj_form_auth" /> <input type='hidden' name="chrp1" value="4647-14687195-1363852800-WOKUugSZIFeFY6PQdVDE-31a8a35b33b8789badf49289d56fe964" /> <input type='hidden' name="chal" value="c0:1363852800:2919:900:70la2QoQUvSxPAR1nRNe:a9e38632f01dc530e0ef7d3262139e22" /> <input type='hidden' name="cookieuser" value="" /> <input type='hidden' name="replyto" value="0" id="replyto" /> <input type='hidden' name="parenttalkid" value="0" id="parenttalkid" /> <input type='hidden' name="editid" value="0" /> <input type='hidden' name="json" value="0" /> <input type='hidden' name="talkpost_do" value="0" /> <input type='hidden' name="subject" /> <input type='hidden' name="stylemine" value="0" /> <input type='hidden' name="viewing_thread" value="" id="viewing_thread" /> <div class="b-msgsystem-errorbox"> <h4 class="b-msgsystem-errorbox-head">Error</h4> <p class="b-msgsystem-error b-msgsystem-error-ajax"></p>          <p class="b-msgsystem-error b-msgsystem-error-regonly">Anonymous comments are disabled in this journal</p>   </div> <div class="b-watering-outer"> <div class="b-watering-fields"> <div class="b-watering-inner"> <div class="b-watering-user"> <div class="b-watering-user-login"> <ul class="b-watering-user-login-items">   <li class="b-watering-user-login-item b-watering-user-login-user">  <input name="usertype" value="user"  id="user" class="b-watering-user-login-checkbox" type="radio">  <i class="b-watering-user-login-pic"></i>  <span class="b-watering-user-login-details"> <input placeholder="Username" name="userpost" type="text" tabindex="25" autocomplete="off" class="auth-input"> <input placeholder="Password" name="password" type="password" tabindex="25" autocomplete="off" class="auth-input"> </span>  </li>    <li class="b-watering-user-login-item b-watering-user-login-facebook">  <input name="usertype" value="facebook"  id="facebook" class="b-watering-user-login-checkbox" type="radio">  <i class="b-watering-user-login-pic"></i>   <span class="b-watering-user-login-details">  We will log you in after post  </span>   </li>    <li class="b-watering-user-login-item b-watering-user-login-twitter">  <input name="usertype" value="twitter"  id="twitter" class="b-watering-user-login-checkbox" type="radio">  <i class="b-watering-user-login-pic"></i>   <span class="b-watering-user-login-details">  We will log you in after post  </span>   </li>    <li class="b-watering-user-login-item b-watering-user-login-openid">  <input name="usertype" value="openid"  id="openid" class="b-watering-user-login-checkbox" type="radio">  <i class="b-watering-user-login-pic"></i>   <span class="b-watering-user-login-details">  <input id="openid" name="openid:url" placeholder="openid" type="text"  tabindex="25" autocomplete="off" class="auth-input">  </span>   </li>    <li class="b-watering-user-login-item b-watering-user-login-google">  <input name="usertype" value="google"  id="google" class="b-watering-user-login-checkbox" type="radio">  <i class="b-watering-user-login-pic"></i>   <span class="b-watering-user-login-details">  We will log you in after post  </span>   </li>    <li class="b-watering-user-login-item b-watering-user-login-mailru">  <input name="usertype" value="mailru"  id="mailru" class="b-watering-user-login-checkbox" type="radio">  <i class="b-watering-user-login-pic"></i>   <span class="b-watering-user-login-details">  We will log you in after post  </span>   </li>    <li class="b-watering-user-login-item b-watering-user-login-vkontakte">  <input name="usertype" value="vkontakte"  id="vkontakte" class="b-watering-user-login-checkbox" type="radio">  <i class="b-watering-user-login-pic"></i>   <span class="b-watering-user-login-details">  We will log you in after post  </span>   </li>    <li class="b-watering-user-login-item b-watering-user-login-anonymous">  <input name="usertype" value="anonymous" checked id="anonymous" class="b-watering-user-login-checkbox" type="radio">  <i class="b-watering-user-login-pic"></i>   <span class="b-watering-user-login-details">  Anonymously  </span>   </li>   </ul> </div> <div class="b-watering-user-options">  <a href="javascript:void(0);" class="b-watering-user-change b-pseudo" tabindex="10">switch</a>  <div class="b-watering-user-services"> <ul class="b-watering-user-services-items">  <li class="b-watering-user-services-item b-watering-user-services-user"> <a href="#user" tabindex="20"><i class="b-watering-user-services-pic"></i><span class="b-watering-user-services-name">LiveJournal</span> </a> </li>  <li class="b-watering-user-services-item b-watering-user-services-facebook"> <a href="#facebook" tabindex="20"><i class="b-watering-user-services-pic"></i><span class="b-watering-user-services-name">Facebook</span> </a> </li>  <li class="b-watering-user-services-item b-watering-user-services-twitter"> <a href="#twitter" tabindex="20"><i class="b-watering-user-services-pic"></i><span class="b-watering-user-services-name">Twitter</span> </a> </li>  <li class="b-watering-user-services-item b-watering-user-services-openid"> <a href="#openid" tabindex="20"><i class="b-watering-user-services-pic"></i><span class="b-watering-user-services-name">OpenId</span> </a> </li>  <li class="b-watering-user-services-item b-watering-user-services-google"> <a href="#google" tabindex="20"><i class="b-watering-user-services-pic"></i><span class="b-watering-user-services-name">Google</span> </a> </li>  <li class="b-watering-user-services-item b-watering-user-services-mailru"> <a href="#mailru" tabindex="20"><i class="b-watering-user-services-pic"></i><span class="b-watering-user-services-name">MailRu</span> </a> </li>  <li class="b-watering-user-services-item b-watering-user-services-vkontakte"> <a href="#vkontakte" tabindex="20"><i class="b-watering-user-services-pic"></i><span class="b-watering-user-services-name">VKontakte</span> </a> </li>  <li class="b-watering-user-services-item b-watering-user-services-anonymous"> <a href="#anonymous" tabindex="20"><i class="b-watering-user-services-pic"></i><span class="b-watering-user-services-name">Anonymously</span> </a> </li>  </ul> </div>   </div> </div> <div class="  b-ljuserpic   b-ljuserpic-nopics  ">  <input type="hidden" name="prop_picture_keyword" id="prop_picture_keyword" value="">  <span class="b-ljuserpic-default">default userpic</span> <div class=" b-myuserpic  b-myuserpic-anonymous "> <a href="javascript:void(0);" class="b-myuserpic-current"  data-nodefpic="url(http://l-stat.livejournal.com/img/userpics/userpic-user.png?v=15821)" data-nodeflabel="default userpic"  style="background-image: url(  http://l-stat.livejournal.com/img/userpics/userpic-anonymous.png?v=15821  );" tabindex="30"></a>  </div> </div> <div class=" b-updateform lj-widget " data-widget="commentsFormToolbar" > <div class="b-updateform-bar"> <ul class="b-updateform-buttons b-updateform-buttons-firstsection">   <li class="b-updateform-buttons-item"> <a href="javascript:void(0);" class="b-updateform-button b-updateform-button-bold" title="Insert Bold" tabindex="151" data-type="bold" data-role="style"> <i class="b-updateform-button-pic"></i> <span class="b-updateform-button-title b-pseudo">Insert Bold</span> </a> </li>    <li class="b-updateform-buttons-item"> <a href="javascript:void(0);" class="b-updateform-button b-updateform-button-italic" title="Insert Italic" tabindex="151" data-type="italic" data-role="style"> <i class="b-updateform-button-pic"></i> <span class="b-updateform-button-title b-pseudo">Insert Italic</span> </a> </li>    <li class="b-updateform-buttons-item"> <a href="javascript:void(0);" class="b-updateform-button b-updateform-button-underline" title="Insert Underline" tabindex="151" data-type="underline" data-role="style"> <i class="b-updateform-button-pic"></i> <span class="b-updateform-button-title b-pseudo">Insert Underline</span> </a> </li>    <li class="b-updateform-buttons-item"> <a href="javascript:void(0);" class="b-updateform-button b-updateform-button-strikethrough" title="Insert Strikethrough" tabindex="151" data-type="strikethrough" data-role="style"> <i class="b-updateform-button-pic"></i> <span class="b-updateform-button-title b-pseudo">Insert Strikethrough</span> </a> </li>             </ul> <ul class="b-updateform-buttons b-updateform-buttons-secondsection">           <li class="b-updateform-buttons-item"> <a href="javascript:void(0);" class="b-updateform-button b-updateform-button-link" title="Insert Link" tabindex="151" data-type="link" data-role="bubble"> <i class="b-updateform-button-pic"></i> <span class="b-updateform-button-title b-pseudo">Insert Link</span> </a> </li>    <li class="b-updateform-buttons-item"> <a href="javascript:void(0);" class="b-updateform-button b-updateform-button-user" title="Insert LJ User" tabindex="151" data-type="user" data-role="bubble"> <i class="b-updateform-button-pic"></i> <span class="b-updateform-button-title b-pseudo">Insert LJ User</span> </a> </li>         </ul> <ul class="b-updateform-buttons b-updateform-buttons-thirdsection">               <li class="b-updateform-buttons-item"> <a href="javascript:void(0);" class="b-updateform-button b-updateform-button-photo" title="Insert Photo" tabindex="151" data-type="photo" data-role="photouploader"> <i class="b-updateform-button-pic"></i> <span class="b-updateform-button-title b-pseudo">Insert Photo</span> </a> </li>    <li class="b-updateform-buttons-item"> <a href="javascript:void(0);" class="b-updateform-button b-updateform-button-video" title="Insert Video" tabindex="151" data-type="video" data-role="bubble"> <i class="b-updateform-button-pic"></i> <span class="b-updateform-button-title b-pseudo">Insert Video</span> </a> </li>     </ul> <ul class="b-updateform-buttons b-updateform-buttons-aside">                   <li class="b-updateform-buttons-item">  <a href="javascript:void(0);" class="b-updateform-button b-updateform-button-spell" title="Spell check" tabindex="151" data-type="spell" data-role="spell"> <i class="b-updateform-button-pic"></i> <span class="b-updateform-button-title b-pseudo">Spell check</span> </a>  </li>   </ul> </div> <textarea  name="body" id="body" cols="60" rows="10" class="b-updateform-textarea" tabindex="50" autocomplete="off"></textarea> </div> <div class="b-watering-msgbox">    <p class="b-msgsystem-error b-msgsystem-error-screened">Your reply will be screened</p>    <p class="b-msgsystem-error b-msgsystem-error-logcommentips"> Your IP address will be recorded &nbsp; <a href="http://www.livejournal.com/support/faq/66.html" class="b-watering-help-link" target="_blank"><i class="b-watering-help-icon"></i></a> </p>  </div>  <div class="b-watering-captchabox b-watering-captchabox-active" id="captcha-container">  <script type="text/javascript">
//<![CDATA[
var RecaptchaOptions = {"lang":"en_LJ","theme":"clean"};
//]]>
</script>
<script src="http://www.google.com/recaptcha/api/challenge?k=6LegWAEAAAAAANJcmtbLTuHlG7AbDzLPxvimCw_Z" type="text/javascript"></script>
<noscript><iframe frameborder="0" height="300" src="http://www.google.com/recaptcha/api/noscript?k=6LegWAEAAAAAANJcmtbLTuHlG7AbDzLPxvimCw_Z" width="500"></iframe><textarea cols="40" name="recaptcha_challenge_field" rows="3"></textarea><input name="recaptcha_response_field" type="hidden" value="manual_challenge" /></noscript>
  </div> <div class="b-watering-submit"> <div class="b-ljbutton b-ljbutton-submit"> <button type="submit" name="submitpost" tabindex="80">Post a new comment</button> </div> </div> </div> </div> <div class="b-watering-aside"> <div class="b-watering-help"> <a href="http://www.livejournal.com/support/faq/46.html" class="b-watering-help-link" target="_blank"><i class="b-watering-help-icon"></i>Help</a> </div> </div> </div> </div> <script id="tmpl-updateform-link" type="text/html"> <i class="b-updateform-bubble-bg"></i> <div class="b-updateform-bubble-wrapper b-updateform-bubble-link-empty"> <div class="b-updateform-bubble-link-fields"><label for="updateform-link-url">Link</label><br><input type="text" id="updateform-link-url" size="50" value="" class="b-updateform-bubble-input"><br><span class="b-updateform-bubble-option"><input type="checkbox" id="updateform-link-target" class="b-updateform-bubble-checkbox" tabindex="50" checked disabled><label for="updateform-link-target" class="b-updateform-bubble-option-label">open in new window</label></span></div> <div class="b-updateform-bubble-link-button"><div class="b-ljbutton b-ljbutton-delete b-updateform-bubble-link-button-remove"><button name="removelinks" type="button">Remove all links in selection</button></div><div class="b-ljbutton b-ljbutton-submit b-ljbutton-disabled"><button name="submitpost" type="button" disabled="disabled">Insert</button></div></div> </div> </script> <script id="tmpl-updateform-photo" type="text/html"> <i class="b-updateform-bubble-bg"></i> <div class="b-updateform-bubble-wrapper"> <div class="b-updateform-bubble-photo-pic"><span class="b-updateform-bubble-photo-inner"><img src="http://l-stat.livejournal.com/img/spacer.gif?v=13339" alt="" class="b-updateform-bubble-photo-preview"></span></div> <div class="b-updateform-bubble-photo-fields"><label for="updateform-bubble-photo-url">Photo</label><br><input type="text" id="updateform-photo-url" size="50" value="" class="b-updateform-bubble-input"><br><span class="b-updateform-bubble-hint">Hint&nbsp;<span class="b-pseudo b-updateform-bubble-example">http://pics.livejournal.com/igrick/pic/000r1edq</span></span></div> <div class="b-updateform-bubble-photo-button"><div class="b-ljbutton b-ljbutton-submit b-ljbutton-disabled"><button name="submitpost" type="button" disabled="disabled">Insert</button></div></div> </div> </script> <script id="tmpl-updateform-video" type="text/html"> <i class="b-updateform-bubble-bg"></i> <div class="b-updateform-bubble-wrapper"> <div class="b-updateform-bubble-video-fields"><label for="updateform-video-url">Video</label><br><textarea rows="5" cols="60" id="updateform-video-url" class="b-updateform-bubble-input" ></textarea><span class="b-updateform-bubble-hint" data-hint-target="#updateform-video-url">Embed, iframe, <a href="http://www.youtube.com/watch?v=-LMebrVm-uU" target="_blank">youtube</a> or <a href="http://vimeo.com/59545564" target="_blank">vimeo</a></span></div> <div class="b-updateform-bubble-video-button"><div class="b-ljbutton b-ljbutton-submit b-ljbutton-disabled"><button name="submitpost" type="button" disabled="disabled">Insert</button></div></div> </div> </script> <script id="tmpl-updateform-user" type="text/html"> <i class="b-updateform-bubble-bg"></i> <div class="b-updateform-bubble-wrapper"> <div class="b-updateform-bubble-user-fields"><label for="updateform-bubble-user-name">User</label><br><span class="b-updateform-bubble-input-wrapper b-updateform-bubble-input-username"><input type="text" id="updateform-bubble-user-name" size="30" maxlength="15" value="" class="b-updateform-bubble-input"><i class="b-updateform-bubble-input-pic"></i></span><span class="b-updateform-bubble-hint">Example:&nbsp;<span class="b-pseudo b-updateform-bubble-example">igrick</span></span><span class="b-updateform-bubble-warning b-bubble b-bubble-warning b-bubble-intext">No such user</span><span class="b-updateform-bubble-input-title"><label for="updateform-bubble-user-title">User title (optional)</label><br><input type="text" id="updateform-bubble-user-title" size="30" maxlength="255" value="" class="b-updateform-bubble-input"></span></div> <div class="b-updateform-bubble-user-button"><div class="b-ljbutton b-ljbutton-submit b-ljbutton-disabled"><button name="submitpost" type="button" disabled="disabled">Insert user</button></div></div> </div> </script> </form> <script type="text/javascript"> jQuery('#body').spellchecker() .spellchecker('option', 'minHeight', 180) .spellchecker('subscribe') .spellchecker('start'); </script> <i class="b-watering-close"></i> <i class="b-watering-arrows"> <i class="b-watering-arrow-border"></i> <i class="b-watering-arrow"></i> </i> </div> <script> (function() { var node = jQuery('.b-watering'); node.commentator({ publicKey: '6LegWAEAAAAAANJcmtbLTuHlG7AbDzLPxvimCw_Z', captchaContainerId: 'captcha-container', selectors: { errorBlock: '.b-msgsystem-error-ajax', blockingErrorBlocks: '.b-msgsystem-error', preloaderElem: '.b-watering-preload', submitControl: '.b-ljbutton-submit', captchaBox: '.b-watering-captchabox' }, classNames: { captchaActive: 'b-watering-captchabox-active', replyPage: 'b-watering-replypage' } }) .commentform();  node.authtype({ forceStartupCaptcha: !!(Number('1')), classNames: { expanded: 'b-watering-user-options-show', startAuthTypePrefix: 'b-watering-trueauth-', captchaForAnonymous: 'b-watering-captcha-anon', captchaForNonFriends: 'b-watering-captcha-nonfriend', notfriend: 'b-watering-user-notafriend', notaspammer: 'b-watering-notaspammer', captchaForAll: 'b-watering-captcha-all', authTypePrefix: 'b-watering-authtype-' }, selectors: { activeSelectItem: 'a[href=#{authType}]', selectControl: '.b-watering-user-options', authTypesControls: '.b-watering-user-services-item a', authTypeRadios: '.b-watering-user-login-{authType} .b-watering-user-login-checkbox' } }); }()); </script>  </li>  <li class="b-xylem-cell b-xylem-cell-amount">    12 comments    </li>  </ul>  </div>      <div class="b-tree b-tree-root"> </div> <script id="comments_json" type="text/plain"> [{"userpic":null,"uname":"","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":79,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":0,"subject":"Maybe","username":null,"thread":20263,"level":1,"dname":"","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=20263","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=20263#t20263","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=20263#t20263","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=20263#t20263","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":20263,"etime_ts":null,"above":null,"upictitle":null,"article":"Isn't that should be added?<br />return Nothing = Nothing<br /><br />PS: your tutorial is very intuitive and nice. Done a good job!","stime":"2 years ago","ctime":"August 6 2010, 06:57:10 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":null,"ctime_ts":"1281077830","subclass":null,"suspended":null,"leafclass":null,"margin":0,"tracked":0},{"userpic":null,"uname":"mvanier","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":80,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":20263,"subject":"Re: Maybe","username":[{"attrs":null,"inline_css":0,"journal_url":"http://mvanier.livejournal.com/","is_identity":0,"bold":1,"striked":null,"userhead_url":"http://l-stat.livejournal.com/img/userinfo.gif?v=102.1","username":"mvanier","color":null,"user_alias":null,"noctxpopup":0,"profile_url":"http://mvanier.livejournal.com/profile","alias":0,"side_alias":0,"journal":"mvanier"}],"thread":20519,"level":2,"dname":"mvanier","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=20519","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=20519#t20519","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=20519#t20519","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=20519#t20519","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":20519,"etime_ts":"1281084399","above":20263,"upictitle":"Mike Vanier: pic#0","article":"Thanks!  I have two more articles nearly ready to post, so stay tuned.  Anyway, return for the Maybe monad is just Just, because its argument is arbitrary (it's not restricted to be a Maybe type).  Written out fully, it's:<br /><br />  return :: a -&gt; Maybe a<br />  return x = Just x<br />  -- or just:<br />  -- return = Just<br /><br />Notice that a can be any type whatsoever, not just a Maybe type.  The value returned from return (I know that sounds weird) will be a Maybe type, but the argument can be of any type.<br />","stime":"2 years ago","ctime":"August 6 2010, 08:44:36 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":"August 6 2010, 08:46:39 UTC","ctime_ts":"1281084276","subclass":null,"suspended":null,"leafclass":null,"margin":30,"tracked":0},{"userpic":null,"uname":"mvanier","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":81,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":20519,"subject":"Re: Maybe","username":[{"attrs":null,"inline_css":0,"journal_url":"http://mvanier.livejournal.com/","is_identity":0,"bold":1,"striked":null,"userhead_url":"http://l-stat.livejournal.com/img/userinfo.gif?v=102.1","username":"mvanier","color":null,"user_alias":null,"noctxpopup":0,"profile_url":"http://mvanier.livejournal.com/profile","alias":0,"side_alias":0,"journal":"mvanier"}],"thread":20775,"level":3,"dname":"mvanier","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=20775","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=20775#t20775","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=20775#t20775","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=20775#t20775","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":20775,"etime_ts":null,"above":20519,"upictitle":"Mike Vanier: pic#0","article":"It just occurred to me that I didn't fully answer your question.  So, to be exact: return Nothing = Just Nothing.","stime":"2 years ago","ctime":"August 6 2010, 09:15:49 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":null,"ctime_ts":"1281086149","subclass":null,"suspended":null,"leafclass":null,"margin":60,"tracked":0},{"userpic":null,"uname":"ext_248605","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":97,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":20775,"subject":"Re: Maybe","username":[{"attrs":null,"inline_css":0,"journal_url":"about:blank","is_identity":1,"bold":1,"striked":1,"userhead_url":"http://l-stat.livejournal.com/img/facebook-profile.gif?v=102.1","username":"ext_248605","color":null,"user_alias":null,"noctxpopup":0,"profile_url":"http://www.livejournal.com/profile?userid=30328088&t=I","alias":0,"side_alias":0,"journal":"ext_248605"}],"thread":24871,"level":4,"dname":"ext_248605","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=24871","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=24871#t24871","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=24871#t24871","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=24871#t24871","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":24871,"etime_ts":null,"above":20775,"upictitle":"James Cunningham: pic#104054106","article":"I think I may have a related question. If the definition of \"return\" for the Maybe monad is <br /><br /><pre>\n  return x = Just x\n</pre><br />then it doesn't seem to match what's built in to Haskell, viz: <br /><br /><pre>\n  *Main&gt; return Nothing\n  Nothing\n</pre><br />and<br /><br /><pre>\n  *Main&gt; return (Just 3)\n  Just 3\n</pre><br />Is there something I'm missing? Your tutorials are awesome, by the way, thanks.","stime":"2 years ago","ctime":"September 5 2010, 15:15:59 UTC","deleted_poster":null,"below":45095,"massactions":null,"deleted":0,"etime":null,"ctime_ts":"1283699759","subclass":null,"suspended":null,"leafclass":null,"margin":90,"tracked":0},{"userpic":null,"uname":"mvanier","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":98,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":24871,"subject":"Re: Maybe","username":[{"attrs":null,"inline_css":0,"journal_url":"http://mvanier.livejournal.com/","is_identity":0,"bold":1,"striked":null,"userhead_url":"http://l-stat.livejournal.com/img/userinfo.gif?v=102.1","username":"mvanier","color":null,"user_alias":null,"noctxpopup":0,"profile_url":"http://mvanier.livejournal.com/profile","alias":0,"side_alias":0,"journal":"mvanier"}],"thread":25127,"level":5,"dname":"mvanier","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=25127","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=25127#t25127","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=25127#t25127","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=25127#t25127","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":25127,"etime_ts":"1283750136","above":24871,"upictitle":"Mike Vanier: pic#0","article":"James,\n\nThanks for the compliment!  Yeah, ghci can be confusing.  What's going on when you type\n\n<pre>\n  ghci&gt; return Nothing\n</pre>\n\nis that you are using the \"return\" function of the IO monad, not the Maybe monad.  This means that the type of (return Nothing) is actually (IO (Maybe a)).  Similarly, (return (Just 3)) has type (IO (Maybe Int)) (actually, it's more general, but that will do for illustration).  When ghci has to show the result of a computation of type (IO a), it just shows the value (of type a), so\n\n<pre>\n  ghci&gt; return 10\n  10\n</pre>\n\nThis (return 10) has type (IO Int) and so ghci just prints the Int.  But watch what happens when you specify the type manually:\n\n<pre>\n  ghci&gt; return 10 :: Maybe Int\n  Just 10\n\n  ghci&gt; return Nothing :: Maybe (Maybe a)\n  Just Nothing\n</pre>\n\nI realize that this is confusing; this is probably the most confusing aspect of ghci.  Compiling code from a file with ghc is much better behaved.","stime":"2 years ago","ctime":"September 6 2010, 05:14:02 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":"September 6 2010, 05:15:36 UTC","ctime_ts":"1283750042","subclass":null,"suspended":null,"leafclass":null,"margin":120,"tracked":0},{"userpic":null,"uname":"","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":176,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":20775,"subject":"Re: Maybe","username":null,"thread":45095,"level":4,"dname":"","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=45095","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=45095#t45095","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=45095#t45095","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=45095#t45095","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":45095,"etime_ts":null,"above":24871,"upictitle":null,"article":"I actually made the same error when I tried to derive the return for the Maybe monad going through the tutorial.  Specifically, if you define the monad as: <br /><br />Nothing &gt;&gt;= _ = Nothing<br />Just x &gt;&gt;= f = f x<br />return Nothing = Nothing <br />return x = Just x<br /><br />instead of simply return = Just, this actually doesn't follow the second Monad law for the case where mv = Just Nothing.  <br /><br />(Just Nothing) &gt;&gt;= return == (since Just x &gt;&gt;= f == f x by def. of &gt;&gt;=)<br />return Nothing == Nothing (by alternate definition of return).<br /><br />But this contradicts the second monad law saying Just Nothing &gt;&gt;= return == Just Nothing.<br /><br />Hope this is helps clear things up.  Excellent tutorials by the way.  <br />","stime":"2 years ago","ctime":"March 20 2011, 19:06:20 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":null,"ctime_ts":"1300647980","subclass":null,"suspended":null,"leafclass":null,"margin":90,"tracked":0},{"userpic":null,"uname":"mvanier","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":177,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":45095,"subject":"Re: Maybe","username":[{"attrs":null,"inline_css":0,"journal_url":"http://mvanier.livejournal.com/","is_identity":0,"bold":1,"striked":null,"userhead_url":"http://l-stat.livejournal.com/img/userinfo.gif?v=102.1","username":"mvanier","color":null,"user_alias":null,"noctxpopup":0,"profile_url":"http://mvanier.livejournal.com/profile","alias":0,"side_alias":0,"journal":"mvanier"}],"thread":45351,"level":5,"dname":"mvanier","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=45351","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=45351#t45351","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=45351#t45351","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=45351#t45351","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":45351,"etime_ts":null,"above":45095,"upictitle":"Mike Vanier: pic#0","article":"Thanks!","stime":"2 years ago","ctime":"March 21 2011, 00:07:28 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":null,"ctime_ts":"1300666048","subclass":null,"suspended":null,"leafclass":null,"margin":120,"tracked":0},{"userpic":null,"uname":"","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":116,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":0,"subject":"(Possible) eq. 6 proof &amp; dice roll errors","username":null,"thread":29735,"level":1,"dname":"","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=29735","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=29735#t29735","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=29735#t29735","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=29735#t29735","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":29735,"etime_ts":null,"above":null,"upictitle":null,"article":"Hey there,<br /><br />I’m all very new to this, but I think I may have found some little errors:<br /><br />1. In the Eq. 6 proof, the lines<br /><br />= map f x1 : map f (xs ++ y)        -- definition of map<br />= map f x1 : (map f xs ++ map f y)  -- inductive hypothesis<br />= (map f x1 : map f xs) ++ map f y  -- definition of ++<br /><br />the first map on each line should be omitted, according to the definition of the map function.<br /><br />2. In the dice roll function, the if and else branches don’t have the same types—(n1,n2) vs. [ ]. If I understand this all correctly, the tuple should be made into a list: [(n1,n2)].<br /><br />Of course, if any of this is wrong, feel free to correct me!<br /><br />Thanks a lot for these guides. Especially the monadic functions vs. monadic values discussion and the in-depth treatment of example monads are invaluable!","stime":"2 years ago","ctime":"December 7 2010, 00:18:23 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":null,"ctime_ts":"1291681103","subclass":null,"suspended":null,"leafclass":null,"margin":0,"tracked":0},{"userpic":null,"uname":"mvanier","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":124,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":29735,"subject":"Re: (Possible) eq. 6 proof &amp; dice roll errors","username":[{"attrs":null,"inline_css":0,"journal_url":"http://mvanier.livejournal.com/","is_identity":0,"bold":1,"striked":null,"userhead_url":"http://l-stat.livejournal.com/img/userinfo.gif?v=102.1","username":"mvanier","color":null,"user_alias":null,"noctxpopup":0,"profile_url":"http://mvanier.livejournal.com/profile","alias":0,"side_alias":0,"journal":"mvanier"}],"thread":31783,"level":2,"dname":"mvanier","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=31783","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=31783#t31783","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=31783#t31783","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=31783#t31783","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":31783,"etime_ts":null,"above":29735,"upictitle":"Mike Vanier: pic#0","article":"Thanks for your bug fixes!  I'll have a corrected version up shortly.  It's embarrassing to see these mistakes, but it's great to have readers who catch them.  Thanks also for your positive comments -- I really appreciate them.","stime":"2 years ago","ctime":"December 17 2010, 01:16:28 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":null,"ctime_ts":"1292548588","subclass":null,"suspended":null,"leafclass":null,"margin":30,"tracked":0},{"userpic":null,"uname":"mvanier","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":125,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":31783,"subject":"Re: (Possible) eq. 6 proof &amp; dice roll errors","username":[{"attrs":null,"inline_css":0,"journal_url":"http://mvanier.livejournal.com/","is_identity":0,"bold":1,"striked":null,"userhead_url":"http://l-stat.livejournal.com/img/userinfo.gif?v=102.1","username":"mvanier","color":null,"user_alias":null,"noctxpopup":0,"profile_url":"http://mvanier.livejournal.com/profile","alias":0,"side_alias":0,"journal":"mvanier"}],"thread":32039,"level":3,"dname":"mvanier","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=32039","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=32039#t32039","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=32039#t32039","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=32039#t32039","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":32039,"etime_ts":null,"above":31783,"upictitle":"Mike Vanier: pic#0","article":"BTW the dice roll function is correct, as you can verify by typing into ghci or copying to a file and running from ghci. The \"then\" branch of the if is \"return (n1, n2)\" which is just [(n1, n2)] by the definition of return for the list monad.  So both branches of the if have the same type.","stime":"2 years ago","ctime":"December 17 2010, 01:22:21 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":null,"ctime_ts":"1292548941","subclass":null,"suspended":null,"leafclass":null,"margin":60,"tracked":0},{"userpic":null,"uname":"","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":158,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":0,"subject":"Trivial typo","username":null,"thread":40487,"level":1,"dname":"","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=40487","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=40487#t40487","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=40487#t40487","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=40487#t40487","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":40487,"etime_ts":null,"above":null,"upictitle":null,"article":"In your dice roll example, you say \"find all pairs of numbers between 1 and 6 that sum to the number 7\". It should be \"sum to the number 6\". Just thought I'd point that out.","stime":"2 years ago","ctime":"February 28 2011, 05:43:05 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":null,"ctime_ts":"1298871785","subclass":null,"suspended":null,"leafclass":null,"margin":0,"tracked":0},{"userpic":null,"uname":"mvanier","loaded":1,"statprefix":"http://l-stat.livejournal.com","talkid":162,"controls":null,"siteroot":"http://www.livejournal.com","ipaddr":null,"parent":40487,"subject":"Re: Trivial typo","username":[{"attrs":null,"inline_css":0,"journal_url":"http://mvanier.livejournal.com/","is_identity":0,"bold":1,"striked":null,"userhead_url":"http://l-stat.livejournal.com/img/userinfo.gif?v=102.1","username":"mvanier","color":null,"user_alias":null,"noctxpopup":0,"profile_url":"http://mvanier.livejournal.com/profile","alias":0,"side_alias":0,"journal":"mvanier"}],"thread":41511,"level":2,"dname":"mvanier","shown":1,"collapsed":0,"actions":[{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?replyto=41511","name":"reply","title":"Reply","footer":1},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=41511#t41511","name":"permalink","title":"link"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=41511#t41511","name":"collapse","title":"Collapse"},{"allowed":1,"href":"http://mvanier.livejournal.com/4647.html?thread=41511#t41511","name":"expand","title":"Expand"}],"p_tracked":0,"dtalkid":41511,"etime_ts":null,"above":40487,"upictitle":"Mike Vanier: pic#0","article":"Thanks for pointing this out!  I meant 7, so I'll fix it and repost it shortly.","stime":"2 years ago","ctime":"March 3 2011, 23:53:43 UTC","deleted_poster":null,"below":null,"massactions":null,"deleted":0,"etime":null,"ctime_ts":"1299196423","subclass":null,"suspended":null,"leafclass":null,"margin":30,"tracked":0}] </script>  <div class="b-xylem"> <ul class="b-xylem-cells">  <li class="b-xylem-cell b-xylem-cell-add"> <a class="b-addcomment" href="http://mvanier.livejournal.com/4647.html?mode=reply#add_comment"><span class="b-addcomment-inner"><i class="b-addcomment-icon"></i>Post a new comment</span></a> </li>  <li class="b-xylem-cell b-xylem-cell-amount">    12 comments    </li>  </ul>  </div>     </div>  </div>
					<div class='clear'></div>

				</div>
				<!--/ Text Wrapper -->

				

			

		</div>
		<!--/ Content -->

		

	</div>
	<!--/ Content Wrapper -->







	
		<footer class="s-footer s-footer-lite">
			<div class="s-footer-nav-inner">
				<div class="s-footer-copyright">Copyright &copy; 1999 LiveJournal, Inc.  All rights reserved.</div>
			</div>	
		</footer>
		
	

	<div id='hello-world' style='text-align: left; font-size:0; line-height:0; height:0; overflow:hidden;'>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24823174-1']);
  _gaq.push(['_setDomainName', '.livejournal.com']);
  _gaq.push(['_trackPageview']);
  _gaq.push(['_trackPageLoadTime']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

<!-- tns-counter.ru --> 
<script language="JavaScript" type="text/javascript"> 
var img = new Image();
img.src = 'http://www.tns-counter.ru/V13a***R>' + document.referrer.replace(/*/g,'%2a') + '*sup_ru/ru/UTF-8/tmsec=lj_noncyr/' + Math.round(Math.random() * 1000000000);
</script> 
<noscript> 
<img src="http://www.tns-counter.ru/V13a****sup_ru/ru/UTF-8/tmsec=lj_noncyr/" width="1" height="1" alt="">
</noscript>
<!--/ tns-counter.ru -->
<!-- Begin comScore Tag 1.1111.15 -->
<script type="text/javascript">
// <![CDATA[
function udm_(a){var b="comScore=",c=document,d=c.cookie,e="",f="indexOf",g="substring",h="length",i=2048,j,k="&ns_",l="&",m,n,o,p,q=window,r=q.encodeURIComponent||escape;if(d[f](b)+1)for(o=0,n=d.split(";"),p=n[h];o<p;o++)m=n[o][f](b),m+1&&(e=l+unescape(n[o][g](m+b[h])));a+=k+"_t="+ +(new Date)+k+"c="+(c.characterSet||c.defaultCharset||"")+"&c8="+r(c.title)+e+"&c7="+r(c.URL)+"&c9="+r(c.referrer),a[h]>i&&a[f](l)>0&&(j=a[g](0,i-8).lastIndexOf(l),a=(a[g](0,j)+k+"cut="+r(a[g](j+1)))[g](0,i)),c.images?(m=new Image,q.ns_p||(ns_p=m),m.src=a):c.write("<","p","><",'img src="',a,'" height="1" width="1" alt="*"',"><","/p",">")}
udm_('http'+(document.location.href.charAt(4)=='s'?'s://sb':'://b')+'.scorecardresearch.com/b?c1=2&c2=7602110&sm_vd_cyrillic_status=nonCyr&sm_vd_view_own_journal=undef&sm_vd_id=undef&sm_vd_login_status=logout&sm_vd_account_level=undef&sm_vd_premium_package=undef&sm_vd_early_adopter=undef&sm_vd_log_in_service=undef&sm_vd_viewing_scheme=lanzelot&sm_vd_view_in_my_style=undef&sm_pd_visited_journal_account_type=personal&sm_pd_visited_journal_log_in_service=lj&sm_pd_ads_onpage=0&sm_pd_ad_eligible=no&sm_pd_adult_content=none&sm_pd_comments_style=undef&sm_pd_error_pages=undef&sm_pd_visited_journal_name=mvanier&sm_pd_page_type=journal&sm_pd_style_layout=undef&sm_pd_style_design=undef&sm_pd_style_system=undef&sm_pd_visited_journal_account_level=basic&sm_pd_early_adopter=no&sm_pd_visited_journal_premium_package=no&sm_pd_page_group=PostMainPage');
// ]]>
</script>
<noscript><p><img src="http://b.scorecardresearch.com/p?c1=2&c2=7602110&sm_vd_cyrillic_status=nonCyr&sm_vd_view_own_journal=undef&sm_vd_id=undef&sm_vd_login_status=logout&sm_vd_account_level=undef&sm_vd_premium_package=undef&sm_vd_early_adopter=undef&sm_vd_log_in_service=undef&sm_vd_viewing_scheme=lanzelot&sm_vd_view_in_my_style=undef&sm_pd_visited_journal_account_type=personal&sm_pd_visited_journal_log_in_service=lj&sm_pd_ads_onpage=0&sm_pd_ad_eligible=no&sm_pd_adult_content=none&sm_pd_comments_style=undef&sm_pd_error_pages=undef&sm_pd_visited_journal_name=mvanier&sm_pd_page_type=journal&sm_pd_style_layout=undef&sm_pd_style_design=undef&sm_pd_style_system=undef&sm_pd_visited_journal_account_level=basic&sm_pd_early_adopter=no&sm_pd_visited_journal_premium_package=no&sm_pd_page_group=PostMainPage" height="1" width="1" alt="*"></p></noscript>
<script type="text/javascript" language="JavaScript1.3" src="http://b.scorecardresearch.com/c2/7602110/cs.js"></script>
<!-- End comScore Tag --><!-- Quantcast Tag -->
<script type="text/javascript">
var _qevents = _qevents || [];

(function() {
var elem = document.createElement('script');
elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";
elem.async = true;
elem.type = "text/javascript";
var scpt = document.getElementsByTagName('script')[0];
scpt.parentNode.insertBefore(elem, scpt);
})();

_qevents.push({
qacct:"p-2945K0QbJw0BA"
});
</script>

<noscript>
<div style="display:none;">
<img src="//pixel.quantserve.com/pixel/p-2945K0QbJw0BA.gif" border="0" height="1" width="1" alt="Quantcast"/>
</div>
</noscript>
<!-- End Quantcast tag -->
<!-- LiveJournal COUNTER -->
<img src="http://xc3.services.livejournal.com/ljcounter?d=srv:bil1-ws45,r:0,j:14687195,uri:%22%2F4647.html%22,vig:0,extra:AOAb2wDgG9sAABIn" alt="" />
<!-- /COUNTER -->
</div>
	
	<script type="text/javascript">LiveJournal.injectScript('http://apis.google.com/js/plusone.js',{text:"{lang: 'en'}"});</script><div id="fb-root"></div>
        <script type="text/javascript">
          window.fbAsyncInit = function() {
            FB.init({appId: '214181831945836', xfbml: true});
          };

          LiveJournal.injectScript(document.location.protocol + '//connect.facebook.net/en_US/all.js', null, document.getElementById('fb-root'))
        </script>
    <script type="text/javascript">LiveJournal.injectScript('http://surfingbird.ru/share/share.min.js');</script> <script type="text/javascript">LiveJournal.injectScript('http://platform.twitter.com/widgets.js');</script><script type="application/javascript">var _prum={id:"50e69c3994fe9c2c10000003"};var PRUM_EPISODES=PRUM_EPISODES||{};PRUM_EPISODES.q=[];PRUM_EPISODES.mark=function(b,a){PRUM_EPISODES.q.push(["mark",b,a||new Date().getTime()])};PRUM_EPISODES.measure=function(b,a,b){PRUM_EPISODES.q.push(["measure",b,a,b||new Date().getTime()])};PRUM_EPISODES.done=function(a){PRUM_EPISODES.q.push(["done",a])};PRUM_EPISODES.mark("firstbyte");(function(){var b=document.getElementsByTagName("script")[0];var a=document.createElement("script");a.type="text/javascript";a.async=true;a.charset="UTF-8";a.src="//rum-static.pingdom.net/prum.min.js";b.parentNode.insertBefore(a,b)})();</script>


</body>

</html>
