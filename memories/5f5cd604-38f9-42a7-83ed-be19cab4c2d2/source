<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Text.Templating.Heist</title><link href="ocean.css" rel="stylesheet" type="text/css" title="Ocean" /><link href="xhaddock.css" rel="alternate stylesheet" type="text/css" title="Classic" /><script src="haddock-util.js" type="text/javascript"></script><script type="text/javascript">//<![CDATA[
window.onload = function () {pageLoad();setSynopsis("mini_Text-Templating-Heist.html");};
//]]>
</script></head><body><div id="package-header"><ul class="links" id="page-menu"><li><a href="src/Text-Templating-Heist.html">Source</a></li><li><a href="/package/heist-0.3.0.0">Contents</a></li><li><a href="doc-index.html">Index</a></li></ul><p class="caption">heist-0.3.0.0: An xhtml templating system</p></div><div id="content"><div id="module-header"><p class="caption">Text.Templating.Heist</p></div><div id="table-of-contents"><p class="caption">Contents</p><ul><li><a href="#1">Types
</a></li><li><a href="#2">Functions and declarations on TemplateState values
</a></li><li><a href="#3">Hook functions
</a></li><li><a href="#4">TemplateMonad functions
</a></li><li><a href="#5">Functions for running splices and templates
</a></li><li><a href="#6">Misc functions
</a></li></ul></div><div id="description"><p class="caption">Description</p><div class="doc"><p>This module contains the core definitions for the Heist template system.
</p><p>The Heist template system is based on XML/xhtml.  It allows you to build
  custom XML-based markup languages.  With Heist you can define your own
  domain-specific XML tags implemented with Haskell and use them in your
  templates.  
</p><p>The most important concept in Heist is the <code><a href="Text-Templating-Heist.html#t:Splice">Splice</a></code>.  Splices can be thought
  of as functions that transform a node into a list of nodes.  Heist then
  substitutes the resulting list of nodes into your template in place of the
  input node.  <code><a href="Text-Templating-Heist.html#t:Splice">Splice</a></code> is implemented as a type synonym <code>type Splice m =
  TemplateMonad m [Node]</code>, and <code><a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a></code> has a function <code><a href="Text-Templating-Heist.html#v:getParamNode">getParamNode</a></code>
  that lets you get the input node.
</p><p>Suppose you have a place on your page where you want to display a link with
  the text &quot;Logout username&quot; if the user is currently logged in or a link to
  the login page if no user is logged in.  Assume you have a function
  <code>getUser :: MyAppMonad (Maybe ByteString)</code> that gets the current user.
  You can implement this functionality with a <code><a href="Text-Templating-Heist.html#t:Splice">Splice</a></code> as follows:
</p><pre> import             Data.ByteString.Char8 (ByteString)
 import qualified   Data.ByteString.Char8 as B
 import qualified   Text.XML.Expat.Tree as X
 
 import             Text.Templating.Heist

 link :: ByteString -&gt; ByteString -&gt; Node
 link target text = X.Element &quot;a&quot; [(&quot;href&quot;, target)] [X.Text text]
 
 loginLink :: Node
 loginLink = link &quot;/login&quot; &quot;Login&quot;
 
 logoutLink :: ByteString -&gt; Node
 logoutLink user = link &quot;/logout&quot; (B.append &quot;Logout &quot; user)
 
 loginLogoutSplice :: Splice MyAppMonad
 loginLogoutSplice = do
     user &lt;- lift getUser
     return $ [maybe loginLink logoutLink user]

</pre><p>Next, you need to bind that splice to an XML tag.  Heist stores information
  about splices and templates in the <code><a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a></code> data structure.  The
  following code demonstrates how this splice would be used.
</p><pre> mySplices = [ (&quot;loginLogout&quot;, loginLogoutSplice) ]
 
 main = do
     ets &lt;- loadTemplates &quot;templates&quot; $
            foldr (uncurry bindSplice) emptyTemplateState mySplices
     let ts = either error id ets
     t &lt;- runMyAppMonad $ renderTemplate ts &quot;index&quot;
     print $ maybe &quot;Page not found&quot; id t
</pre><p>Here we build up our <code><a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a></code> by starting with emptyTemplateState and
  applying bindSplice for all the splices we want to add.  Then we pass this
  to loadTemplates our final <code><a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a></code> wrapped in an Either to handle
  errors.  Then we use this <code><a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a></code> to render our templates.
</p></div></div><div id="synopsis"><p id="control.syn" class="caption expander" onclick="toggleSection('syn')">Synopsis</p><ul id="section.syn" class="hide" onclick="toggleSection('syn')"><li class="src short"><span class="keyword">type</span> <a href="#t:Node">Node</a> = <a href="/packages/archive/hexpat/0.19.5/doc/html/Text-XML-Expat-Tree.html#t:Node">Node</a> <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a></li><li class="src short"><span class="keyword">type</span> <a href="#t:Template">Template</a> = [<a href="Text-Templating-Heist.html#t:Node">Node</a>]</li><li class="src short"><span class="keyword">type</span> <a href="#t:Splice">Splice</a> m = <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="Text-Templating-Heist.html#t:Template">Template</a></li><li class="src short"><span class="keyword">data</span>  <a href="#t:TemplateMonad">TemplateMonad</a> m a</li><li class="src short"><span class="keyword">data</span>  <a href="#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:addTemplate">addTemplate</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:Template">Template</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:emptyTemplateState">emptyTemplateState</a> :: <a href="/packages/archive/transformers/0.2.2.0/doc/html/Control-Monad-IO-Class.html#t:MonadIO">MonadIO</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:bindSplice">bindSplice</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:Splice">Splice</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:bindSplices">bindSplices</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; [(<a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>, <a href="Text-Templating-Heist.html#t:Splice">Splice</a> m)] -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:lookupSplice">lookupSplice</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> (<a href="Text-Templating-Heist.html#t:Splice">Splice</a> m)</li><li class="src short"><a href="#v:setTemplates">setTemplates</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; TemplateMap -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:loadTemplates">loadTemplates</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:FilePath">FilePath</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:IO">IO</a> (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Either.html#t:Either">Either</a> <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Char.html#t:String">String</a> (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m))</li><li class="src short"><a href="#v:hasTemplate">hasTemplate</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Bool.html#t:Bool">Bool</a></li><li class="src short"><a href="#v:addOnLoadHook">addOnLoadHook</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:Template">Template</a> -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:IO">IO</a> <a href="Text-Templating-Heist.html#t:Template">Template</a>) -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:addPreRunHook">addPreRunHook</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:Template">Template</a> -&gt; m <a href="Text-Templating-Heist.html#t:Template">Template</a>) -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:addPostRunHook">addPostRunHook</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:Template">Template</a> -&gt; m <a href="Text-Templating-Heist.html#t:Template">Template</a>) -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:stopRecursion">stopRecursion</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="/packages/archive/ghc-prim/0.2.0.0/doc/html/GHC-Unit.html#t:-40--41-">()</a></li><li class="src short"><a href="#v:getParamNode">getParamNode</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="Text-Templating-Heist.html#t:Node">Node</a></li><li class="src short"><a href="#v:runNodeList">runNodeList</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; [<a href="Text-Templating-Heist.html#t:Node">Node</a>] -&gt; <a href="Text-Templating-Heist.html#t:Splice">Splice</a> m</li><li class="src short"><a href="#v:getContext">getContext</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m TPath</li><li class="src short"><a href="#v:localParamNode">localParamNode</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:Node">Node</a> -&gt; <a href="Text-Templating-Heist.html#t:Node">Node</a>) -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m a -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m a</li><li class="src short"><a href="#v:getsTS">getsTS</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; r) -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m r</li><li class="src short"><a href="#v:getTS">getTS</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m)</li><li class="src short"><a href="#v:putTS">putTS</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="/packages/archive/ghc-prim/0.2.0.0/doc/html/GHC-Unit.html#t:-40--41-">()</a></li><li class="src short"><a href="#v:modifyTS">modifyTS</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m) -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="/packages/archive/ghc-prim/0.2.0.0/doc/html/GHC-Unit.html#t:-40--41-">()</a></li><li class="src short"><a href="#v:restoreTS">restoreTS</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="/packages/archive/ghc-prim/0.2.0.0/doc/html/GHC-Unit.html#t:-40--41-">()</a></li><li class="src short"><a href="#v:evalTemplate">evalTemplate</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> <a href="Text-Templating-Heist.html#t:Template">Template</a>)</li><li class="src short"><a href="#v:callTemplate">callTemplate</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; [(<a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>, <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>)] -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> <a href="Text-Templating-Heist.html#t:Template">Template</a>)</li><li class="src short"><a href="#v:renderTemplate">renderTemplate</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; m (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>)</li><li class="src short"><a href="#v:renderWithArgs">renderWithArgs</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; [(<a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>, <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>)] -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; m (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>)</li><li class="src short"><a href="#v:bindStrings">bindStrings</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; [(<a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>, <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>)] -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:bindString">bindString</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</li><li class="src short"><a href="#v:getDoc">getDoc</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Char.html#t:String">String</a> -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:IO">IO</a> (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Either.html#t:Either">Either</a> <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Char.html#t:String">String</a> InternalTemplate)</li><li class="src short"><a href="#v:parseDoc">parseDoc</a> :: <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:IO">IO</a> (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Either.html#t:Either">Either</a> <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Char.html#t:String">String</a> (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>, [<a href="Text-Templating-Heist.html#t:Node">Node</a>]))</li><li class="src short"><a href="#v:bindStaticTag">bindStaticTag</a> :: <a href="/packages/archive/transformers/0.2.2.0/doc/html/Control-Monad-IO-Class.html#t:MonadIO">MonadIO</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:IO">IO</a> (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m, <a href="Text-Templating-Heist-Splices-Static.html#t:StaticTagState">StaticTagState</a>)</li></ul></div><div id="interface"><h1 id="1">Types
</h1><div class="top"><p class="src"><span class="keyword">type</span> <a name="t:Node" class="def">Node</a> = <a href="/packages/archive/hexpat/0.19.5/doc/html/Text-XML-Expat-Tree.html#t:Node">Node</a> <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a><a href="src/Text-Templating-Heist-Types.html#Node" class="link">Source</a></p><div class="doc"><p>Heist templates are XML documents. The hexpat library is polymorphic over
 the type of strings, so here we define a <code><a href="Text-Templating-Heist.html#t:Node">Node</a></code> alias to fix the string
 types of the tag names and tag bodies to <code><a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a></code>.
</p></div></div><div class="top"><p class="src"><span class="keyword">type</span> <a name="t:Template" class="def">Template</a> = [<a href="Text-Templating-Heist.html#t:Node">Node</a>]<a href="src/Text-Templating-Heist-Types.html#Template" class="link">Source</a></p><div class="doc"><p>A <code><a href="Text-Templating-Heist.html#t:Template">Template</a></code> is a forest of XML nodes.  Here we deviate from the <a href="single
 root node.html">single
 root node</a> constraint of well-formed XML because we want to allow templates
 to contain fragments of a document that may not have a single root.
</p></div></div><div class="top"><p class="src"><span class="keyword">type</span> <a name="t:Splice" class="def">Splice</a> m = <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="Text-Templating-Heist.html#t:Template">Template</a><a href="src/Text-Templating-Heist-Types.html#Splice" class="link">Source</a></p><div class="doc"><p>A Splice is a TemplateMonad computation that returns a <code><a href="Text-Templating-Heist.html#t:Template">Template</a></code>.
</p></div></div><div class="top"><p class="src"><span class="keyword">data</span>  <a name="t:TemplateMonad" class="def">TemplateMonad</a> m a <a href="src/Text-Templating-Heist-Types.html#TemplateMonad" class="link">Source</a></p><div class="doc"><p>TemplateMonad is the monad used for <code><a href="Text-Templating-Heist.html#t:Splice">Splice</a></code> processing.  TemplateMonad
 provides &quot;passthrough&quot; instances for many of the monads you might use in
 the inner monad.
</p></div><div class="subs instances"><p id="control.i:TemplateMonad" class="caption collapser" onclick="toggleSection('i:TemplateMonad')">Instances</p><div id="section.i:TemplateMonad" class="show"><table><tr><td class="src"><a href="/packages/archive/transformers/0.2.2.0/doc/html/Control-Monad-Trans-Class.html#t:MonadTrans">MonadTrans</a> <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a></td><td class="doc"><p>MonadTrans instance
</p></td></tr><tr><td class="src"><a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-Error-Class.html#t:MonadError">MonadError</a> e m =&gt; <a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-Error-Class.html#t:MonadError">MonadError</a> e (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>MonadError passthrough instance
</p></td></tr><tr><td class="src"><a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-Reader-Class.html#t:MonadReader">MonadReader</a> r m =&gt; <a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-Reader-Class.html#t:MonadReader">MonadReader</a> r (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>MonadReader passthrough instance
</p></td></tr><tr><td class="src"><a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-State-Class.html#t:MonadState">MonadState</a> s m =&gt; <a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-State-Class.html#t:MonadState">MonadState</a> s (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>MonadState passthrough instance
</p></td></tr><tr><td class="src"><a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>Monad instance
</p></td></tr><tr><td class="src"><a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Functor">Functor</a> m =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Functor">Functor</a> (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>Functor instance
</p></td></tr><tr><td class="src"><a href="/packages/archive/base/4.3.0.0/doc/html/Data-Typeable.html#t:Typeable1">Typeable1</a> m =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Typeable.html#t:Typeable1">Typeable1</a> (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc empty">&nbsp;</td></tr><tr><td class="src"><a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad-Fix.html#t:MonadFix">MonadFix</a> m =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad-Fix.html#t:MonadFix">MonadFix</a> (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>MonadFix passthrough instance
</p></td></tr><tr><td class="src"><a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:MonadPlus">MonadPlus</a> m =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:MonadPlus">MonadPlus</a> (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>MonadPlus passthrough instance
</p></td></tr><tr><td class="src">(<a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m, <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Functor">Functor</a> m) =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Applicative.html#t:Applicative">Applicative</a> (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>Applicative instance
</p></td></tr><tr><td class="src">(<a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Functor">Functor</a> m, <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:MonadPlus">MonadPlus</a> m) =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Applicative.html#t:Alternative">Alternative</a> (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>Alternative passthrough instance
</p></td></tr><tr><td class="src"><a href="/packages/archive/transformers/0.2.2.0/doc/html/Control-Monad-IO-Class.html#t:MonadIO">MonadIO</a> m =&gt; <a href="/packages/archive/transformers/0.2.2.0/doc/html/Control-Monad-IO-Class.html#t:MonadIO">MonadIO</a> (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>MonadIO instance
</p></td></tr><tr><td class="src"><a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-Cont-Class.html#t:MonadCont">MonadCont</a> m =&gt; <a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-Cont-Class.html#t:MonadCont">MonadCont</a> (<a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m)</td><td class="doc"><p>MonadCont passthrough instance
</p></td></tr></table></div></div></div><div class="top"><p class="src"><span class="keyword">data</span>  <a name="t:TemplateState" class="def">TemplateState</a> m <a href="src/Text-Templating-Heist-Types.html#TemplateState" class="link">Source</a></p><div class="doc"><p>Holds all the state information needed for template processing.  You will
 build a <code>TemplateState</code> using any of Heist's <code>TemplateState m -&gt;
 TemplateState m</code> &quot;filter&quot; functions.  Then you use the resulting
 <code>TemplateState</code> in calls to <code>renderTemplate</code>.
</p></div><div class="subs instances"><p id="control.i:TemplateState" class="caption collapser" onclick="toggleSection('i:TemplateState')">Instances</p><div id="section.i:TemplateState" class="show"><table><tr><td class="src"><a href="/packages/archive/base/4.3.0.0/doc/html/Data-Eq.html#t:Eq">Eq</a> (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m)</td><td class="doc empty">&nbsp;</td></tr><tr><td class="src"><a href="/packages/archive/base/4.3.0.0/doc/html/Data-Typeable.html#t:Typeable1">Typeable1</a> m =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Typeable.html#t:Typeable">Typeable</a> (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m)</td><td class="doc empty">&nbsp;</td></tr><tr><td class="src"><a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Monoid.html#t:Monoid">Monoid</a> (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m)</td><td class="doc empty">&nbsp;</td></tr></table></div></div></div><h1 id="2">Functions and declarations on TemplateState values
</h1><div class="top"><p class="src"><a name="v:addTemplate" class="def">addTemplate</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:Template">Template</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m<a href="src/Text-Templating-Heist-Internal.html#addTemplate" class="link">Source</a></p><div class="doc"><p>Adds a template to the template state.
</p></div></div><div class="top"><p class="src"><a name="v:emptyTemplateState" class="def">emptyTemplateState</a> :: <a href="/packages/archive/transformers/0.2.2.0/doc/html/Control-Monad-IO-Class.html#t:MonadIO">MonadIO</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m<a href="src/Text-Templating-Heist.html#emptyTemplateState" class="link">Source</a></p><div class="doc"><p>An empty template state, with Heist's default splices (<code>&lt;apply&gt;</code>,
 <code>&lt;bind&gt;</code>, <code>&lt;ignore&gt;</code>, and <code>&lt;markdown&gt;</code>) mapped.  The static tag is
 not mapped here because it must be mapped manually in your application.
</p></div></div><div class="top"><p class="src"><a name="v:bindSplice" class="def">bindSplice</a><a href="src/Text-Templating-Heist-Internal.html#bindSplice" class="link">Source</a></p><div class="subs arguments"><p class="caption">Arguments</p><table><tr><td class="src">:: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m</td><td class="doc empty">&nbsp;</td></tr><tr><td class="src">=&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a></td><td class="doc"><p>tag name
</p></td></tr><tr><td class="src">-&gt; <a href="Text-Templating-Heist.html#t:Splice">Splice</a> m</td><td class="doc"><p>splice action
</p></td></tr><tr><td class="src">-&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</td><td class="doc"><p>source state
</p></td></tr><tr><td class="src">-&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</td><td class="doc empty">&nbsp;</td></tr></table></div><div class="doc"><p>Binds a new splice declaration to a tag name within a <code><a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a></code>.
</p></div></div><div class="top"><p class="src"><a name="v:bindSplices" class="def">bindSplices</a><a href="src/Text-Templating-Heist-Internal.html#bindSplices" class="link">Source</a></p><div class="subs arguments"><p class="caption">Arguments</p><table><tr><td class="src">:: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m</td><td class="doc empty">&nbsp;</td></tr><tr><td class="src">=&gt; [(<a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>, <a href="Text-Templating-Heist.html#t:Splice">Splice</a> m)]</td><td class="doc"><p>splices to bind
</p></td></tr><tr><td class="src">-&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</td><td class="doc"><p>start state
</p></td></tr><tr><td class="src">-&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m</td><td class="doc empty">&nbsp;</td></tr></table></div><div class="doc"><p>Binds a set of new splice declarations within a <code><a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a></code>.
</p></div></div><div class="top"><p class="src"><a name="v:lookupSplice" class="def">lookupSplice</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> (<a href="Text-Templating-Heist.html#t:Splice">Splice</a> m)<a href="src/Text-Templating-Heist-Internal.html#lookupSplice" class="link">Source</a></p><div class="doc"><p>Convenience function for looking up a splice.
</p></div></div><div class="top"><p class="src"><a name="v:setTemplates" class="def">setTemplates</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; TemplateMap -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m<a href="src/Text-Templating-Heist-Internal.html#setTemplates" class="link">Source</a></p><div class="doc"><p>Sets the templateMap in a TemplateState.
</p></div></div><div class="top"><p class="src"><a name="v:loadTemplates" class="def">loadTemplates</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:FilePath">FilePath</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:IO">IO</a> (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Either.html#t:Either">Either</a> <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Char.html#t:String">String</a> (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m))<a href="src/Text-Templating-Heist-Internal.html#loadTemplates" class="link">Source</a></p><div class="doc"><p>Traverses the specified directory structure and builds a
 TemplateState by loading all the files with a <a href="-tpl.html">.tpl</a> extension.
</p></div></div><div class="top"><p class="src"><a name="v:hasTemplate" class="def">hasTemplate</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Bool.html#t:Bool">Bool</a><a href="src/Text-Templating-Heist-Internal.html#hasTemplate" class="link">Source</a></p><div class="doc"><p>Returns <code><a href="/packages/archive/base/4.3.0.0/doc/html/Data-Bool.html#v:True">True</a></code> if the given template can be found in the template state.
</p></div></div><h1 id="3">Hook functions
</h1><div class="doc"><p>Heist hooks allow you to modify templates when they are loaded and before
 and after they are run.  Every time you call one of the addAbcHook
 functions the hook is added to onto the processing pipeline.  The hooks
 processes the template in the order that they were added to the
 TemplateState.
</p><p>The pre-run and post-run hooks are run before and after every template is
 run/rendered.  You should be careful what code you put in these hooks
 because it can significantly affect the performance of your site.
</p></div><div class="top"><p class="src"><a name="v:addOnLoadHook" class="def">addOnLoadHook</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:Template">Template</a> -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:IO">IO</a> <a href="Text-Templating-Heist.html#t:Template">Template</a>) -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m<a href="src/Text-Templating-Heist-Internal.html#addOnLoadHook" class="link">Source</a></p><div class="doc"><p>Adds an on-load hook to a <code><a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a></code>.
</p></div></div><div class="top"><p class="src"><a name="v:addPreRunHook" class="def">addPreRunHook</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:Template">Template</a> -&gt; m <a href="Text-Templating-Heist.html#t:Template">Template</a>) -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m<a href="src/Text-Templating-Heist-Internal.html#addPreRunHook" class="link">Source</a></p><div class="doc"><p>Adds a pre-run hook to a <code><a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a></code>.
</p></div></div><div class="top"><p class="src"><a name="v:addPostRunHook" class="def">addPostRunHook</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:Template">Template</a> -&gt; m <a href="Text-Templating-Heist.html#t:Template">Template</a>) -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m<a href="src/Text-Templating-Heist-Internal.html#addPostRunHook" class="link">Source</a></p><div class="doc"><p>Adds a post-run hook to a <code><a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a></code>.
</p></div></div><h1 id="4">TemplateMonad functions
</h1><div class="top"><p class="src"><a name="v:stopRecursion" class="def">stopRecursion</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="/packages/archive/ghc-prim/0.2.0.0/doc/html/GHC-Unit.html#t:-40--41-">()</a><a href="src/Text-Templating-Heist-Internal.html#stopRecursion" class="link">Source</a></p><div class="doc"><p>Stops the recursive processing of splices.  Consider the following
 example:
</p><pre> &lt;foo&gt;
   &lt;bar&gt;
     ...
   &lt;/bar&gt;
 &lt;/foo&gt;
</pre><p>Assume that <code>&quot;foo&quot;</code> is bound to a splice procedure. Running the <code>foo</code>
 splice will result in a list of nodes <code>L</code>.  Normally <code>foo</code> will recursively
 scan <code>L</code> for splices and run them.  If <code>foo</code> calls <code>stopRecursion</code>, <code>L</code>
 will be included in the output verbatim without running any splices.
</p></div></div><div class="top"><p class="src"><a name="v:getParamNode" class="def">getParamNode</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="Text-Templating-Heist.html#t:Node">Node</a><a href="src/Text-Templating-Heist-Types.html#getParamNode" class="link">Source</a></p><div class="doc"><p>Gets the node currently being processed.
</p><pre> &lt;speech author=&quot;Shakespeare&quot;&gt;
   To sleep, perchance to dream.
 &lt;/speech&gt;
</pre><p>When you call <code>getParamNode</code> inside the code for the <code>speech</code> splice, it
 returns the Node for the <code>speech</code> tag and its children.  <code>getParamNode &gt;&gt;=
 getChildren</code> returns a list containing one <code>Text</code> node containing part of
 Hamlet's speech.  <code>getParamNode &gt;&gt;= getAttribute &quot;author&quot;</code> would return
 <code>Just <a href="Shakespeare.html">Shakespeare</a></code>.
</p></div></div><div class="top"><p class="src"><a name="v:runNodeList" class="def">runNodeList</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; [<a href="Text-Templating-Heist.html#t:Node">Node</a>] -&gt; <a href="Text-Templating-Heist.html#t:Splice">Splice</a> m<a href="src/Text-Templating-Heist-Internal.html#runNodeList" class="link">Source</a></p><div class="doc"><p>Performs splice processing on a list of nodes.
</p></div></div><div class="top"><p class="src"><a name="v:getContext" class="def">getContext</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m TPath<a href="src/Text-Templating-Heist-Internal.html#getContext" class="link">Source</a></p><div class="doc"><p>Gets the current context
</p></div></div><div class="top"><p class="src"><a name="v:localParamNode" class="def">localParamNode</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:Node">Node</a> -&gt; <a href="Text-Templating-Heist.html#t:Node">Node</a>) -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m a -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m a<a href="src/Text-Templating-Heist-Types.html#localParamNode" class="link">Source</a></p><div class="doc"><p>TemplateMonad's <code><a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-Reader-Class.html#v:local">local</a></code>.
</p></div></div><div class="top"><p class="src"><a name="v:getsTS" class="def">getsTS</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; r) -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m r<a href="src/Text-Templating-Heist-Types.html#getsTS" class="link">Source</a></p><div class="doc"><p>TemplateMonad's <code><a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-State-Class.html#v:gets">gets</a></code>.
</p></div></div><div class="top"><p class="src"><a name="v:getTS" class="def">getTS</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m)<a href="src/Text-Templating-Heist-Types.html#getTS" class="link">Source</a></p><div class="doc"><p>TemplateMonad's <code><a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-State-Class.html#v:get">get</a></code>.
</p></div></div><div class="top"><p class="src"><a name="v:putTS" class="def">putTS</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="/packages/archive/ghc-prim/0.2.0.0/doc/html/GHC-Unit.html#t:-40--41-">()</a><a href="src/Text-Templating-Heist-Types.html#putTS" class="link">Source</a></p><div class="doc"><p>TemplateMonad's <code><a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-State-Class.html#v:put">put</a></code>.
</p></div></div><div class="top"><p class="src"><a name="v:modifyTS" class="def">modifyTS</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m) -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="/packages/archive/ghc-prim/0.2.0.0/doc/html/GHC-Unit.html#t:-40--41-">()</a><a href="src/Text-Templating-Heist-Types.html#modifyTS" class="link">Source</a></p><div class="doc"><p>TemplateMonad's <code><a href="/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-State-Class.html#v:modify">modify</a></code>.
</p></div></div><div class="top"><p class="src"><a name="v:restoreTS" class="def">restoreTS</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m <a href="/packages/archive/ghc-prim/0.2.0.0/doc/html/GHC-Unit.html#t:-40--41-">()</a><a href="src/Text-Templating-Heist-Types.html#restoreTS" class="link">Source</a></p><div class="doc"><p>Restores the components of TemplateState that can get modified in
 template calls.  You should use this function instead of <code>putTS</code> to restore
 an old state.  Thas was needed because doctypes needs to be in a <a href="global
 scope.html">global
 scope</a> as opposed to the template call <a href="local scope.html">local scope</a> of state items such
 as recursionDepth, curContext, and spliceMap.
</p></div></div><h1 id="5">Functions for running splices and templates
</h1><div class="top"><p class="src"><a name="v:evalTemplate" class="def">evalTemplate</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> <a href="Text-Templating-Heist.html#t:Template">Template</a>)<a href="src/Text-Templating-Heist-Internal.html#evalTemplate" class="link">Source</a></p><div class="doc"><p>Looks up a template name evaluates it by calling runNodeList.
</p></div></div><div class="top"><p class="src"><a name="v:callTemplate" class="def">callTemplate</a><a href="src/Text-Templating-Heist-Internal.html#callTemplate" class="link">Source</a></p><div class="subs arguments"><p class="caption">Arguments</p><table><tr><td class="src">:: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m</td><td class="doc empty">&nbsp;</td></tr><tr><td class="src">=&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a></td><td class="doc"><p>The name of the template
</p></td></tr><tr><td class="src">-&gt; [(<a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>, <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>)]</td><td class="doc"><p>Association list of
 (name,value) parameter pairs
</p></td></tr><tr><td class="src">-&gt; <a href="Text-Templating-Heist.html#t:TemplateMonad">TemplateMonad</a> m (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> <a href="Text-Templating-Heist.html#t:Template">Template</a>)</td><td class="doc empty">&nbsp;</td></tr></table></div><div class="doc"><p>Renders a template with the specified parameters.  This is the function
 to use when you want to <a href="call.html">call</a> a template and pass in parameters from
 inside a splice.
</p></div></div><div class="top"><p class="src"><a name="v:renderTemplate" class="def">renderTemplate</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; m (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>)<a href="src/Text-Templating-Heist-Internal.html#renderTemplate" class="link">Source</a></p><div class="doc"><p>Renders a template from the specified TemplateState.
</p></div></div><div class="top"><p class="src"><a name="v:renderWithArgs" class="def">renderWithArgs</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; [(<a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>, <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>)] -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; m (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>)<a href="src/Text-Templating-Heist-Internal.html#renderWithArgs" class="link">Source</a></p><div class="doc"><p>Renders a template with the specified arguments passed to it.  This is a
 convenience function for the common pattern of calling renderTemplate after
 using bindString, bindStrings, or bindSplice to set up the arguments to the
 template.
</p></div></div><div class="top"><p class="src"><a name="v:bindStrings" class="def">bindStrings</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; [(<a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>, <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>)] -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m<a href="src/Text-Templating-Heist-Internal.html#bindStrings" class="link">Source</a></p><div class="doc"><p>Binds a list of constant string splices.
</p></div></div><div class="top"><p class="src"><a name="v:bindString" class="def">bindString</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Control-Monad.html#t:Monad">Monad</a> m =&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m<a href="src/Text-Templating-Heist-Internal.html#bindString" class="link">Source</a></p><div class="doc"><p>Binds a single constant string splice.
</p></div></div><h1 id="6">Misc functions
</h1><div class="top"><p class="src"><a name="v:getDoc" class="def">getDoc</a> :: <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Char.html#t:String">String</a> -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:IO">IO</a> (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Either.html#t:Either">Either</a> <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Char.html#t:String">String</a> InternalTemplate)<a href="src/Text-Templating-Heist-Internal.html#getDoc" class="link">Source</a></p><div class="doc"><p>Reads an XML document from disk.
</p></div></div><div class="top"><p class="src"><a name="v:parseDoc" class="def">parseDoc</a> :: <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a> -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:IO">IO</a> (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Either.html#t:Either">Either</a> <a href="/packages/archive/base/4.3.0.0/doc/html/Data-Char.html#t:String">String</a> (<a href="/packages/archive/base/4.3.0.0/doc/html/Data-Maybe.html#t:Maybe">Maybe</a> <a href="/packages/archive/bytestring/0.9.1.8/doc/html/Data-ByteString.html#t:ByteString">ByteString</a>, [<a href="Text-Templating-Heist.html#t:Node">Node</a>]))<a href="src/Text-Templating-Heist-Internal.html#parseDoc" class="link">Source</a></p><div class="doc"><p>Turns an in-memory XML/XHTML bytestring into a (doctype,'[Node]') pair.
</p></div></div><div class="top"><p class="src"><a name="v:bindStaticTag" class="def">bindStaticTag</a> :: <a href="/packages/archive/transformers/0.2.2.0/doc/html/Control-Monad-IO-Class.html#t:MonadIO">MonadIO</a> m =&gt; <a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m -&gt; <a href="/packages/archive/base/4.3.0.0/doc/html/System-IO.html#t:IO">IO</a> (<a href="Text-Templating-Heist.html#t:TemplateState">TemplateState</a> m, <a href="Text-Templating-Heist-Splices-Static.html#t:StaticTagState">StaticTagState</a>)<a href="src/Text-Templating-Heist-Splices-Static.html#bindStaticTag" class="link">Source</a></p><div class="doc"><p>Modifies a TemplateState to include a &quot;static&quot; tag.  The static tag is
 not bound automatically with the other default Heist tags.  This is because
 this function also returns StaticTagState, so the user will be able to
 clear it with the <code><a href="Text-Templating-Heist-Splices-Static.html#v:clearStaticTagCache">clearStaticTagCache</a></code> function.
</p></div></div></div></div><div id="footer"><p>Produced by <a href="http://www.haskell.org/haddock/">Haddock</a> version 2.8.0</p></div></body></html>