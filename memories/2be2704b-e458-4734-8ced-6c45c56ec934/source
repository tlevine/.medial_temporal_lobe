<!DOCTYPE html> 
<!--[if lte IE 6]>     <html lang="en" class="browser-ie   browser-old     browser-ie6   browser-ie-old">  <![endif]-->
<!--[if IE 7]>         <html lang="en" class="browser-ie   browser-old     browser-ie7   browser-ie-old">  <![endif]-->
<!--[if IE 8]>         <html lang="en" class="browser-ie   browser-old     browser-ie8   browser-ie-old">  <![endif]-->
<!--[if IE 9]>         <html lang="en" class="browser-ie   browser-modern  browser-ie9   browser-ie-new">  <![endif]-->
<!--[if IE 10]>        <html lang="en" class="browser-ie   browser-modern  browser-ie10  browser-ie-new">  <![endif]-->
<!--[if gt IE 10]><!--><html lang="en" class="browser-noie browser-modern"><!--<![endif]-->

<head> 
<!-- IE nonsence -->
<!--[if lte IE 8]><script src="/assets/ie-a4c2563d151bb67971b4d35ab37560db.js" type="text/javascript"></script><![endif]-->
<meta charset="UTF-8" />
<!-- Removes the hash -->
<script type="text/javascript">(function(){var k='#!',u=window.location,i=u.href.indexOf(k);if(i>0){u.href=u.href.substr(i+k.length);}})();</script> 

<!-- Meta Details -->
<title>Use AngularJS to Power Your Web Application - yearofmoo.com</title>
<meta id="x-description"    name="description"          content="AngularJS is a truly amazing approach to developing JS-heavy web applications" /> 
<meta id="x-keywords"       name="keywords"             content="MooTools, JQuery, VIM, Rails, PHP, Ruby on Rails, FFMpeg, IOS Development, Internet Explorer, Chrome, Firefox, CSS, CSS3, JavaScript, HTML5, Blog" /> 
<meta id="x-twitter-site"   property="twitter:site"     content="@yearofmoo" />
<meta id="x-twitter-user"   property="twitter:creator"  content="@yearofmoo" />
<meta id="x-og-title"       property="og:title"         content="Use AngularJS to Power Your Web Application - yearofmoo.com" />
<meta id="x-og-description" property="og:description"   content="AngularJS is a truly amazing approach to developing JS-heavy web applications" />
<meta id="x-og-site-url"    property="og:url"           content="http://www.yearofmoo.com/2012/08/use-angularjs-to-power-your-web-application.html" />
<meta id="x-og-image"       property="og:image"         content="http://www.yearofmoo.com/images/site/og/2.png" />
<meta id="x-og-site-name"   property="og:site_name"     content="yearofmoo" />

<!-- iOS -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="apple-touch-icon"                  href="/images/site/meta/ios-57x57.png" />
<link rel="apple-touch-icon" sizes="72x72"    href="/images/site/meta/ios-72x72.png" />
<link rel="apple-touch-icon" sizes="114x114"  href="/images/site/meta/ios-114x114.png" />
<link rel="apple-touch-icon" sizes="144x144"  href="/images/site/meta/ios-144x144.png" />

<!-- Extra -->
<link rel="alternate" type="application/rss+xml" title="RSS Feed" href="/feed.xml" />
<link rel="icon" type="image/png" href="/images/site/favicon.png" />
<link rel="shortcut icon" href="/images/site/favicon.png" /> 
<meta id="x-version" property="yom:version" content="1359584173" />

<link href="/assets/application-a19749d96a26e7cc9c278cd4a9b08a7f.css" media="screen" rel="stylesheet" type="text/css" />
<link href="/assets/mobile-58b8fa1aa5b44d80d373234adb8cc312.css" media="screen and (max-width: 600px)" rel="stylesheet" type="text/css" />
<link href="/assets/print-88f7a30fe5203eb4aabc28a42df75248.css" media="print" rel="stylesheet" type="text/css" />
</head>

<body class="post-layout" data-role="Mookins Cufon Links Scrolling SocialLinks Clouds MooTipsy Syntax MobileSections Fader">
  <div id="wrapper">
    <div id="header" class="clear">
  <div class="wrap">
    <h1>
      <a href="/">year of <em>moo</em></a>
    </h1>
  </div>
</div>
<div id="navigation">
  <div class="wrap">
    <ul>
      <li id="nav-about" class="page_item">
        <a href="/about.html">About</a>
      </li>
      <li id="nav-blogs" class="page_item">
        <a href="/">Articles (25)</a>
      </li>
      <li id="nav-code" class="page_item">
        <a href="/code/">Code (10)</a>
      </li>
      <li id="nav-contact" class="page_item">
        <a class="ignore-xview" href="/contact.html">Contact</a>
      </li>
    </ul>
  </div>
</div>

    <div id="stage">
      <section id="content">
        <div class="yom-content">
          
            <article>
  <header class="main">
    <h2>
      <a href="/2012/08/use-angularjs-to-power-your-web-application.html">Use AngularJS to Power Your Web Application</a>
    </h2>
  </header>

  <h3>AngularJS is a truly amazing approach to developing JS-heavy web applications</h3>

  <p>
    <em>AngularJS</em>, by <em>Google</em>, is a <em>well-organized</em>, <em>well-tested</em>,
    <em>versatile</em>, <em>powerful</em> and <em>flexible</em> JavaScript <em>MVC framework</em>
    for building <em>rich client-side applications</em>.

    You still may need to have a server-side backend, but the majority of the user-interactivity
    logic will be delegated to the client-side.  This includes stuff like <em>form submissions</em>
    which are handled via <em>AJAX</em>, <em>model validations</em>, <em>template handling</em> and
    <em>data-binding</em>. If these things are foreign to you then read onwards and see how you can
    benefit from building web applications in a much more <em>radical way</em>.
  </p>

<div data-role="Share" class="share-toolbar">
  <div class="share-toolbox addthis_toolbox addthis_default_style">
    <a href="#" class="addthis_button_facebook_like"></a>
    <a href="#" class="addthis_button_tweet"></a>
    <a href="#" class="addthis_button_google_plusone"></a>
    <a href="#" class="addthis_counter addthis_pill_style"></a>
  </div>
</div>


  <section class="outer">
    <header>
      <h3>
        <a href="#last-updated" id="last-updated" class="anchor-link">Last Updated</a>
      </h3>
    </header>

    <p>This page was first published on <em>August 15th 2012</em> and was last updated on <em>October 29th 2012</em>.</p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#table-of-contents" id="table-of-contents" class="anchor-link">Table of Contents</a>
      </h3>
    </header>

    <div class="relative">
      <img src="/images/site/mookins/2.png" data-id="2" class="mascot" alt="mookin!" />

      <ol class="toc">
        <li><a class="em" href="#about">About this article</a></li>
        <li><a href="#web-applications-not-websites">Web Applications (not Websites)</a></li>
        <li><a href="#so-how-does-it-work">So how does it work?</a></li>
        <li><a href="#getting-started">Getting Started</a></li>
        <li><a href="#modules">Modules</a></li>
        <li><a href="#bindings-and-angular-magic">Bindings, Expressions &amp; Angular Magic</a></li>
        <li><a href="#dependency-injection">Dependency Injection</a></li>
        <li><a href="#routes">Routes</a></li>
        <li><a href="#controllers-and-scope">Controllers &amp; Scope</a></li>
        <li><a href="#services">Services</a></li>
        <li><a href="#models">Models</a></li>
        <li><a href="#directives">Directives</a></li>
        <li><a href="#filters">Filters</a></li>
        <li><a href="#html5-mode">HTML5 Mode</a></li>
        <li><a href="#using-angular-with-other-frameworks">Using Angular with other JavaScript frameworks/libraries</a></li>
        <li><a href="#using-json">Using .json as a URL suffix for model operations</a></li>
        <li><a class="em" href="#going-forward">Going Forward</a></li>
        <li><a class="em" href="#part-2">&#42; Second AngularJS Article</a></li>
      </ol>
    </div>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#about" class="anchor-link" id="about">About this article</a>
      </h3>
    </header>

    <p>
      This article briefly outlines what Angular can be used for and the basics of how it works.
      The article covers <em>controllers and scope</em>,  <em>services</em>, <em>models</em>, <em>templates</em>,
      <em>directives</em>, <em>filters</em>, <em>modules</em> and <em>configurations</em>.
    </p>

    <p>This article also explains how angular can be used with <em>MooTools</em> and <em>JQuery</em> in harmony.</p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a id="web-applications-not-websites" class="anchor-link" href="#web-applications-not-websites">Web Applications (not Websites)</a>
      </h3>
    </header>

    <p>
      When you decide to build a website using angular <em>the major question to ask yourself</em>
      is that is this a website that requires valid <em>HTML</em> or is this a web application that
      focusses more on <em>functionality</em> then markup. Angular works with <em>templated HTML code</em>
      and <em>JSON data</em>. The major impact of the approach of how angular, and all other client-side MVC
      frameworks, handle its logic mean that structure and data are designed to be separated from each other.
      This results in templates (HTML) and data (which is fetched as JSON) bound together to provide a working
      and interactive webpage. Therefore the markup fetched from the server is <em>meaningless on its own without Angular</em>
      parsing it and you <em>need to have a client that supports JavaScript</em>. Thus, search engines need to work extra in
      order to get a full representation of the data--so for now <em>it's not a good idea to use angular if you're building a
      website that relies on search engines to function</em>. So if you're building a <em>web application</em>, <em>admin website</em>
      or <em>single-page</em> website then you've chosen a great tool to do the job.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a class="anchor-link" href="#so-how-does-it-work" id="so-how-does-it-work">So how does it work?</a>
      </h3>
    </header>

    <p>
      Angular works by <em>separating application logic from data</em> on the client-side and structuring a
      client-side web application with use of <em>directives</em>, <em>filters</em>, <em>bindings</em> and
      <em>binding-specific operations</em>. Controllers, Services and Models are used to glue all the logic and
      data operations together. As mentioned, data and logic are separated so this means that your data
      (<em>the dynamic stuff</em>), your HTML templates (<em>the static stuff</em>), and your logic
      (<em>the controllers and binding markup</em>) work together to make the application work.
      The nice thing is that if all the non-dynamic stuff can be cached for longer and your dynamic responses
      are smaller. This is great for caching server-side responses and greatly <em>reducing the amount of work
      that the server has to do to generate the HTML response</em>. In fact if you think about it, the majority
      of the data fetched for a HTML page is either redundant or stateless ... so why not just make it 100% static?
      Angular does this and it does it well.
    </p>

    <p>
      Just like any MVC architecture, <em>URL paths are routed to controllers</em> and the parameters are available
      within the controller method. Angular also <em>provides support for resources (models)</em> and it does a good
      job by reducing the amount of code required for boilerplate model code for querying the server back and forth.
      It also <em>reduces the amount of code required for handling DOM bindings with data and HTML elements</em>.
    </p>

    <p>
      <em>Once the page is ready</em>, angular does it's magic by building the page with its <em>various components</em>.
      Lets take a look at what they are.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#getting-started" class="anchor-link" id="getting-started">Getting Started</a>
      </h3>
    </header>

    <p>
      Setup your website and include angular within your <em>HTML code with a JavaScript script tag</em> to include the
      library into the website. <em>It's best that angular is imported before all other libraries and code</em>.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="c">&lt;!--- Set this as the HTML tag in your application --&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;/path/to/angular/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;/path/to/angular/angular-resource.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre>
</div>

    </div>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#modules" class="anchor-link" id="modules">Modules</a>
      </h3>
    </header>

    <p>
      Modules are used to <em>fully encapsulate all the angular code of your application into one entry point</em>.
      The more recent builds of angular <em>include module</em> support which is kinda like namespacing mixed in with
      <em>dependency injection (DI)</em> and <em>error trapping</em>. Older versions of Angular didn't include this.
      There are various blog article posts, videos and demos out there that are teaching how to use an older version of angular.
      This may get confusing when setting up your application with a fresh download of angular).
    </p>

    <p>
      Modules are used so that your application (as well as discrete parts of your application) can be separated into
      distinct parts which can be loaded and executed in different order. So you could have a directives module which
      can be set to run just before the ui module is run, thus ensuring that your resulting application DOM is in proper
      shape for your ui code to run.
    </p>

    <p>
      The first thing you need to do when setting up your angular app is the following in your main layout file
      (I'm assuming you've already included angular into your website as JavaScript script tag).
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="c">&lt;!--- Set this as the HTML tag in your application --&gt;</span>
<span class="nt">&lt;html</span> <span class="na">data-ng-app=</span><span class="s">&quot;YOUR_APP_NAME&quot;</span><span class="nt">&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      You can also use other variants in your HTML for setting your app name, but I feel HTML5 data attributes are the way to go.
    </p>

    <p>
      Next, include a new javascript file into your website and set this code:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="c1">//a variable matching the name of your app may sometimes be required by angular</span>
<span class="kd">var</span> <span class="nx">YOUR_APP_NAME</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">var</span> <span class="nx">App</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;YOUR_APP_NAME&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngResource&#39;</span><span class="p">]);</span>
</code></pre>
</div>

    </div>

    <p>
      This will create a global module for your app where you can create <em>routes</em>, <em>models</em>, <em>filters</em> and
      <em>directives</em>. The <em>App</em> variable is accessible throughout your application and the <em>['ngResource']</em>
      definition array defines all the other modules and dependencies that must be loaded prior to this module being activated.
      In this case <em>ngResource</em> is an additional module that defines functionality for creating resources (models) in angular.
    </p>

    <p>
      Any additional models can be defined using the same syntax, but <em>you must define the module name as a different name as
      any other module that has been defined</em>. If you create another module with the same name then it may not active (or the
      previous module may not activate instead). If you wish to make a new module activate after the main application module then
      just define the new module and set the name of the application module as a dependency.
    </p>

    <p>
      Keep in mind that a module <em>can easily break</em> (if there is erroneous code within), and modules are designed to contain
      their own errors, so finding an error may be difficult since you may be left with an empty page.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#bindings-and-angular-magic" class="anchor-link" id="bindings-and-angular-magic">Bindings, Expressions &amp; Angular Magic</a>
      </h3>
    </header>

    <p>
      Bindings are very very powerful. They drastically reduce the amount of HTML code required and they completely separate application
      logic from data. Angular comes with expressions which are apart of its general markup for HTML and are bound to the scope variable
      which is where the data binding takes place. This involves <em>data binding</em>, <em>two-way data binding</em>, <em>conditionals</em>,
      <em>for in and foreach loops</em>, <em>model binding</em> and so on.
    </p>

    <p>
      Here is an example to list all the records in an ordered list we can use the following (<em>this is what angular expression are</em>):
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;records&quot;</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;record in records | orderBy:orderProp&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h5&gt;</span> {{ record.title }} <span class="nt">&lt;/h5&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      The inner block (the <em>h5</em> tag stuff) will be repeated for each record found within the records object (which is apart of the $scope
      variable). Finally the <em>orderBy:orderProp</em> specifies which property (in this case the title) can be used to sort the records.
    </p>

    <p>
      And the JavaScript to setup the data is as follows <em>(this is the data binding)</em>:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">records</span> <span class="o">=</span> <span class="p">[{</span> <span class="nx">title</span> <span class="o">:</span> <span class="s1">&#39;one&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">title</span> <span class="o">:</span> <span class="s1">&#39;two&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">title</span> <span class="o">:</span> <span class="s1">&#39;three&#39;</span> <span class="p">}];</span>
</code></pre>
</div>

    </div>

    <p>
      All that's missing is the controller (<em>this is covered later on in this article</em>). The beauty about this approach is that
      (as you can see) the data (the Model) is <em>100% detached from the markup</em> (the View) and the data itself can be retrieved and
      cached from an external source while being handled and tweaked by a logical controller (the Controller). Hence we have an awesome
      <em>MVC framework</em>.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#dependency-injection" class="anchor-link" id="dependency-injection">Dependency Injection</a>
      </h3>
    </header>

    <p>
      <em>Dependency Injection (DI)</em> is, in angular, method of organizing how components, modules and variables are loaded to various
      parts of your angular app. It's a bit confusing at first, but its really there to make things more organized and for testing to be
      easier. All of your components within your app are to be injected into your <em>controllers</em>, <em>module configuraitons</em>,
      <em>directives</em>, <em>filters</em>, <em>resources</em> and <em>routes</em>. Here's an example of a dependency injection for a
      controller:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="c1">//the controller definition</span>
<span class="kd">var</span> <span class="nx">Ctrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//now you can use any of the injected variables</span>

  <span class="c1">//to change the URL after something has happened then you can use $location</span>
  <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/path/to/new/page&#39;</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">//and now the injection of the variables</span>
<span class="nx">Ctrl</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="s1">&#39;$location&#39;</span><span class="p">];</span>
</code></pre>
</div>

    </div>

    <p>
      The <em>benefit to DI</em> is that you can <em>totally isolate</em> all of your services, controllers, resources, directives, filters
      into their own contained environments with no global variables. This makes <em>testing much easier</em>. It also facilitates ordering
      between code blocks so that once a particular dependency has been injected then it is guaranteed to be there for use within the next
      code block.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#routes" class="anchor-link" id="routes">Routes</a>
      </h3>
    </header>

    <p>
      Routes are used to map which path matches are linked to which controller. When you access a URL (by clicking on a link or putting
      in the URL), angular will <em>first check to see if its defined</em> and, if not, then it will <em>delegate the event to a standard
      webpage view</em> (access the html page normally) or <em>do nothing</em> (if it was a hashbang URL). This is nice since you don't
      have to manage any URL changes yourself atop of the angular routes.
    </p>

    <p>
      Routes are defined directly from the application module with the following syntax. <em>NOTE:</em> Route paths do not have anything
      to do with hashbangs (<em>you can toggle hashbangs on or off via HTML5 mode</em>).
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routes</span><span class="p">)</span> <span class="p">{</span>

  <span class="nx">$route</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,{</span>
    <span class="nx">templateUrl</span> <span class="o">:</span> <span class="s1">&#39;/templates/home.html&#39;</span><span class="p">,</span>
    <span class="nx">controller</span> <span class="o">:</span> <span class="nx">HomeCtrl</span>
  <span class="p">});</span>

  <span class="nx">$route</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,{</span>
    <span class="nx">templateUrl</span> <span class="o">:</span> <span class="s1">&#39;/templates/register.html&#39;</span><span class="p">,</span>
    <span class="nx">controller</span> <span class="o">:</span> <span class="nx">RegisterCtrl</span>
  <span class="p">});</span>

  <span class="nx">$routes</span><span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span>
    <span class="nx">redirectTo</span> <span class="o">:</span> <span class="s1">&#39;/&#39;</span>
  <span class="p">});</span>

<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    <p>
      You should be able to <em>create routes anywhere in your app code</em>--this is nice when you create controllers in separate Javascript
      files which include their own routes.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#controllers-and-scope" id="controllers-and-scope" class="anchor-link">Controllers &amp; Scope</a>
      </h3>
    </header>

    <p>
      Controllers are where the logic of your application happens. Plugins, Widgets and DOM-specific code <em>shouldn't be included here since
      that stuff is meant for directives</em>. First, start by setting up the controller (each controller function is basically the action itself).
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">SomeCtrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;some value&#39;</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">SomeCtrl</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="s1">&#39;$location&#39;</span><span class="p">];</span>
</code></pre>
</div>

    </div>

    <p>
      The <em>$scope</em> is specific to where the controller is hooked into within your webpage. And any properties set for the $scope variable
      will then evaluate within your webpage. Here's an example of placing a binding in the HTML and then setting its scoped property.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>{{ title }}<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>Now here's the <em>HTML</em>:</p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s1">&#39;this is awesome&#39;</span><span class="p">;</span>
</code></pre>
</div>

    </div>

    <p>Now the DOM will be updated and your HTML code will look like this:</p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>this is awesome<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>More information is explained within the directives area.</p>

    <section class="inner">
      <header>
        <h4>For when your $scope variable data changes, but angular doesn't pick up on it.</h4>
      </header>

      <p>
        Sometimes angular won't notice when you change a property in your $scope variable so in this case you will need to force angular
        to pick up the change.
      </p>

      <p>Try running these methods:</p>

      <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="c1">//lets say you have &lt;div&gt;{{ someVar }}&lt;/div&gt; inside your HTML.</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">someVar</span> <span class="o">=</span> <span class="s1">&#39;value&#39;</span><span class="p">;</span>

<span class="c1">//if a scope digestion is already going on then it will get picked up and you won&#39;t</span>
<span class="c1">//have to call the $scope.$apply() method</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">$$phase</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//this is used to prevent an overlap of scope digestion</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span> <span class="c1">//this will kickstart angular to recognize the change</span>
<span class="p">}</span>
</code></pre>
</div>

      </div>

      <p>
        Make sure to read more about this on the follow up article,
        <a class="ignore-xview" target="_blank" href="/2012/10/more-angularjs-magic-to-supercharge-your-webapp.html#apply-digest-and-phase">
          More AngularJS Magic to Supercharge your Webapp
        </a>,
        which goes into even more detail about how to properly digest and apply binding changes.
      </p>

      <p>
        <a href="/2012/10/more-angularjs-magic-to-supercharge-your-webapp.html#apply-digest-and-phase" class="btn">
          <span class="icon-arrow-right em2"></span> Click here to read more about <em>$apply and $digest</em> and to <em>view the article</em>
        </a>
      </p>

    </section>

    <section class="inner">
      <header>
        <h4>$rootScope</h4>
      </header>

      <p>
        All <em>$scope</em> data is inherited off the <em>$rootScope</em> variable, so if you want to <em>share reusable code across all
        your $scope objects in all your controllers then you can do it by setting properties of the $rootScope variable</em>.
      </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;$rootScope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">sharedFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    </section>

    <section class="inner">
      <header>
        <h4>Controllers</h4>
      </header>
      <p>Finally, there are two ways to register a controller to the application:</p>

      <section class="inner">
        <header>
          <h5>Include the Controller within your application HTML</h5>
        </header>

        <p>A controller can be set using an angular directive within a HTML tag.</p>

        <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">data-ng-controller=</span><span class="s">&quot;SomeCtrl&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

        </div>
      </section>

      <section class="inner">
        <header>
          <h5>Assign a Controller to be apart of a route</h5>
        </header>

        <p>You can also define a route and specify the controller that handles the request:</p>

        <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">$routes</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/some/path&#39;</span><span class="p">,{</span>
  <span class="nx">controller</span> <span class="o">:</span> <span class="nx">Ctrl</span><span class="p">,</span>
  <span class="nx">templateUrl</span> <span class="o">:</span> <span class="s1">&#39;/templates/controller.html&#39;</span>
<span class="p">});</span>
</code></pre>
</div>

        </div>
      </section>

    </section>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#services" class="anchor-link" id="services">Services</a>
      </h3>
    </header>

    <p>
      Angular Services is an amazing approach to abstracting shared code and functionality across your application.
      It ties directly into the dependency injection feature that angular provides and can be used directly apart of
      the module object. 
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="c1">//define the service</span>
<span class="nx">App</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myService&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;myOtherService&#39;</span><span class="p">,</span> <span class="s1">&#39;$location&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">myOtherService</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//do something with the input using the myOtherService or the $location objects.</span>
    <span class="k">return</span> <span class="nx">input</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}]);</span>

<span class="c1">//use the service within the controller</span>
<span class="kd">var</span> <span class="nx">HomeCtrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">myService</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span><span class="p">;</span>
  <span class="nx">input</span> <span class="o">=</span> <span class="nx">myService</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">HomeCtrl</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span><span class="s1">&#39;myService&#39;</span><span class="p">];</span>

<span class="c1">//use the service a directive</span>
<span class="nx">App</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;myDirective&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;myService&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">myService</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span><span class="p">;</span>
      <span class="nx">input</span> <span class="o">=</span> <span class="nx">myService</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    <p>
      The <em>myService</em> is provided into the controller as a function (or object depending on what the service declaration
      returns) and can be used directly. The nice thing is that there is one entry point to the service and this means that it
      can be tested very easily.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#models" id="models" class="anchor-link">Models</a>
      </h3>
    </header>

    <p>
      Models are used the same way that models are used just as a model is used in <em>Rails</em> or any other <em>MVC framework</em>.
      They're also defined in the same manner as angular <em>services</em> are as well as injected into the application. All regular
      getter and setter operations for model properties exist and all <em>RESTful operations</em> are defined and access the server backend
      to do their storage operations. Your server-side application needs to be coded to handle each of the REST operations for each model
      (<em>POST create, GET show, GET index, PUT/PATCH update, DELETE destroy</em>).
    </p>

    <p>
      Here's how you define a model in angular:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;ModelName&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$resource&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$resource</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$resource</span><span class="p">.</span><span class="nx">url</span><span class="p">(</span><span class="s1">&#39;/path/to/model/controller/:id&#39;</span><span class="p">,{</span>
    <span class="nx">id</span> <span class="o">:</span> <span class="s1">&#39;@id&#39;</span><span class="p">,</span> <span class="c1">//this binds the ID of the model to the URL param</span>
  <span class="p">},{</span>
    <span class="nx">query</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">method</span> <span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">isArray</span> <span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="c1">//this can also be called index or all</span>
    <span class="nx">save</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">method</span> <span class="o">:</span> <span class="s1">&#39;PUT&#39;</span> <span class="p">},</span> <span class="c1">//this is the update method</span>
    <span class="nx">create</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">method</span> <span class="o">:</span> <span class="s1">&#39;POST&#39;</span> <span class="p">},</span>
    <span class="nx">destroy</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">method</span> <span class="o">:</span> <span class="s1">&#39;DELETE&#39;</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    <p>
      This will create a model called <em>ModelName</em> with the REST actions <em>query</em>, <em>show</em>, <em>save</em>, <em>create</em>,
      <em>destroy</em> all targeted towards the <em>/path/to/model/controller/:id</em>. The <em>:id</em> param is only used for <em>get</em>,
      <em>save</em> and <em>destroy</em> REST calls. When an :id value isn't present then it will not be used in the URL and angular will strip
      and trailing slashes and whitespace from the URL so effectively you'll end up having a URL such as <em>/path/to/model/controller</em> for
      REST calls such as <em>query</em> and <em>create</em> (which is how REST expect for them to be). All of the actions defined can be called
      directly from the model, but in order to have access to the model as a variable you must include it as a dependency injection:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">SomeCtrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">ModelName</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//now you can use ModelName to do your business</span>
<span class="p">};</span>
<span class="nx">SomeCtrl</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="s1">&#39;$location&#39;</span><span class="p">,</span><span class="s1">&#39;ModelName&#39;</span><span class="p">];</span>
</code></pre>
</div>

    </div>

    <p>
      Once you have access to the model you can call all the actions that you have defined in your resource definition as well as as a few others.
      Here are some examples:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="c1">//list all the records on the page</span>
<span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">ModelName</span><span class="p">.</span><span class="nx">query</span><span class="p">({</span> <span class="nx">search</span> <span class="o">:</span> <span class="s1">&#39;all&#39;</span> <span class="p">},</span> <span class="nx">onSuccessFn</span><span class="p">,</span> <span class="nx">onFailureFn</span><span class="p">);</span>

<span class="c1">//get a specific record</span>
<span class="kd">var</span> <span class="nx">record</span> <span class="o">=</span> <span class="nx">ModelName</span><span class="p">.</span><span class="nx">get</span><span class="p">({</span> <span class="nx">id</span> <span class="o">:</span> <span class="mi">123</span> <span class="p">},</span> <span class="nx">onSuccessFn</span><span class="p">,</span> <span class="nx">onFailureFn</span><span class="p">);</span> <span class="c1">//onSuccessFn and onFailureFn are optional callback functions where you can further customize the response</span>

<span class="c1">//create a new ModelName record</span>
<span class="kd">var</span> <span class="nx">record</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ModelName</span><span class="p">();</span>

<span class="c1">//update that record</span>
<span class="nx">record</span><span class="p">.</span><span class="nx">someAttr</span> <span class="o">=</span> <span class="s1">&#39;someValue&#39;</span><span class="p">;</span>
<span class="nx">record</span><span class="p">.</span><span class="nx">$save</span><span class="p">();</span>

<span class="c1">//or if you prefer to submit your data in a different way</span>
<span class="nx">ModelName</span><span class="p">.</span><span class="nx">save</span><span class="p">({</span>
    <span class="nx">id</span> <span class="o">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span>
  <span class="p">},{</span>
  <span class="nx">somePostObject</span> <span class="o">:</span> <span class="p">{</span>
    <span class="nx">attr1</span> <span class="o">:</span> <span class="s1">&#39;value&#39;</span><span class="p">,</span>
    <span class="nx">attr2</span> <span class="o">:</span> <span class="s1">&#39;value2&#39;</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">//destroy the record (and include a token)</span>
<span class="nx">record</span><span class="p">.</span><span class="nx">destroy</span><span class="p">({</span> <span class="nx">token</span> <span class="o">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">token</span> <span class="p">});</span>
</code></pre>
</div>

    </div>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#directives" id="directives" class="anchor-link">Directives</a>
      </h3>
    </header>

    <p>
      Angular directives are tiny behavioural hooks that <em>link your HTML to your plugins and to any isolated blocks of code within your application</em>.
      They're designed not to change the logic of the controllers or models, but to <em>aid in the construction of the webpage</em>. Therefore, they're
      perfect for <em>plugins, validations, dynamic text properties</em> (such as internationalization-related and localization-related tweaks).
      Here's how to use them.
    </p>

    <p>
      First define the directive within your application javascript:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;myDirective&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$compile</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">templateUrl</span> <span class="o">:</span> <span class="s1">&#39;/path/to/some/template.html&#39;</span><span class="p">,</span> <span class="c1">//(optional) the contents of this template can be downloaded and constructed into the element</span>
    <span class="nx">replace</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">//whether or not to replace the inner data within the element</span>
    <span class="nx">link</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$element</span><span class="p">,</span> <span class="nx">attributes</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//this is where your magic happens</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      Now when angular comes a HTML tag that contains <em>data-my-directive</em> as an attribute (with or without a value) then it will download the
      template and execute the link function. You can also define the <em>template html</em> directly and you can also create your own <em>compile</em>
      function which does all the work in one go.  The <em>$scope</em> variable provided within the <em>link</em> function is the scope variable of the
      controller that contains the directive. This is a powerful way to share data between the controller and the directive as well as for them to
      communicate between each other.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#filters" id="filters" class="anchor-link">Filters</a>
      </h3>
    </header>

    <p>
      Filters are reusable operations that can be embedded directly into binding operations to tweak the data in some way. Some examples would
      include <em>pagination</em>, <em>language-tweaking</em>, <em>role and session-specific data filtering</em>.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;myUppercase&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">title</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      This filter then can be used within an angular expression:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;for record in records | filter:myUppercase&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      Or it can be used directly within your JavaScript code with the <em>$filter</em> function.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="c1">//be sure to inject the $filter object</span>
<span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="s1">&#39;three&#39;</span><span class="p">];</span>
<span class="nx">values</span> <span class="o">=</span> <span class="nx">$filter</span><span class="p">(</span><span class="s1">&#39;myUppercase&#39;</span><span class="p">)(</span><span class="nx">values</span><span class="p">);</span>
</code></pre>
</div>

    </div>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#html5-mode" id="html5-mode" class="anchor-link">HTML5 Mode</a>
      </h3>
    </header>
  
    <p>
      HTML5 Mode allows for your angular app to use HTML5 history within its routing system and then gracefully
      degrade its functionality to hashbang support if the browser doesn't support HTML5 history. The following
      snippet of code enables HTML5 history within your angular application (it's disabled by default).
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$locationProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$location</span><span class="p">.</span><span class="nx">html5Mode</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">//now there won&#39;t be a hashbang within URLs for browers that support HTML5 history</span>
<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#using-angular-with-other-frameworks" id="using-angular-with-other-frameworks" class="anchor-link">Using Angular with other JavaScript frameworks/libraries</a>
      </h3>
    </header>

    <p>
      Angular states that it plays nicely with other frameworks (and it does), but <em>angular itself has a bit of a
      bias towards JQuery</em> (just as everything out on the internet does) so you may need to hack it a bit to get
      it to work with something other than JQuery. Angular uses <em>JQLite to do its basic DOM handling and doesn't
      fully rely on JQuery</em>. 
    </p>

    <section class="inner">
      <header>
        <h4>Using Angular with JQuery</h4>
      </header>
      <p>
        JQuery works fine with Angular. Just <em>include it before you include angular into your web application</em>
        and angular will use your JQuery include instead of JQLite.
      </p>
    </section>

    <section class="inner">
      <header>
        <h4>Using Angular with MooTools</h4>
      </header>

      <p>
        MooTools also works fine, but there are some problems when accessing elements. You will need to create your own
        dollar-style selector (or override the existing one). Also, be sure to <em>include MooTools into your web application
        after angular has been included</em>.
      </p>

      <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">$moo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">typeOf</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;element&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">element</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">element</span> <span class="o">=</span> <span class="nx">element</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="p">};</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre>
</div>

      </div>

      <p>
        This should make angular work MooTools; just be sure to use the <em>$moo</em> method each time before accessing an
        element which has been provided by a controller or directive in angula. The double dollar function (<em>$$</em>) isn't
        affected, but call the <em>$moo</em> method before you use the <em>$$</em> to access an element directly (since an
        element provided from angular may be an array and that may mess things up).
      </p>
    </section>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#using-json" id="using-json" class="anchor-link">Using .json as a URL suffix for model operations</a>
      </h3>
    </header>

    <p>
      Angular, at the time of this writing, doesn't support customizing resource suffixes (URL formats or extensions) directly
      via its API. To setup it yourself you will need to hack the code within the <em>angular-resource.js</em> file and this
      is not really the best approach to fixing this. For now its not supported in angular, however, there exists a fork of
      angular on yearofmoo that includes support for this fix.
    </p>

    <p>
      <a class="em 2" href="https://github.com/yearofmoo/angular.js-json-suffix" target="_blank">
        <span class="icon-arrow-github"></span> Click here to view the Forked Github Repository
      </a>
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#going-forward" id="going-forward" class="anchor-link">Going Forward</a>
      </h3>
    </header>

    <p>
      Angular is <em>huge</em>. There's alot that's not covered here. Now you should be well prepared to build a functional angular
      application. Take a visit to the angular website to find more information of what's covered here and any other of the other
      features that angular provides.
    </p>

    <p>
      Please <em>share</em> or <em>bookmark this article</em>.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#part-2" id="part-2" class="anchor-link">&#42; Second AngularJS Article</a>
      </h3>
    </header>

    <p>
      There is a 2nd article which covers <a href="/2012/10/more-angularjs-magic-to-supercharge-your-webapp.html" class="em">even more of AngularJS</a>.
      Please take a look at this article after you have absorbed this article.
    </p>

    <p>
      <a href="/2012/10/more-angularjs-magic-to-supercharge-your-webapp.html" class="btn">
        <span class="icon-arrow-right em2"></span> Click here to view the 2nd article on <em>AngularJS</em>
      </a>
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

</article>

          
        </div>

        
          <div data-role="Share" class="share-toolbar">
  <div class="share-toolbox addthis_toolbox addthis_default_style">
    <a href="#" class="addthis_button_facebook_like"></a>
    <a href="#" class="addthis_button_tweet"></a>
    <a href="#" class="addthis_button_google_plusone"></a>
    <a href="#" class="addthis_counter addthis_pill_style"></a>
  </div>
</div>

        

        <p class="contact-links lazy">
  <a href="http://twitter.com/yearofmoo" class="btn" target="_blank">
    <span class="icon-twitter em2"></span> Yearofmoo <em>Twitter Page</em>
  </a>
  <a href="http://www.facebook.com/yearofmoo" class="btn" target="_blank">
    <span class="icon-facebook em2"></span> Yearofmoo <em>Facebook Page</em>
  </a>
  <a href="/contact.html" class="btn last" target="_blank">
    <span class="icon-envelope em2"></span> <em>Contact</em> Yearofmoo
  </a>
</p>

        <div data-role="Disqus">
  <div id="disqus_thread"></div>
  <nav class="jump">
    <a href="#top" class="top">To Top</a>
  </nav>
</div>

      </section>
    </div>
    <div id="footer">

</div>

  </div>
<script type="text/javascript">document.body.className += ' js';</script>

<script src="/assets/application-196eb66a17ee67e0e0bcdb24eab5671f.js" type="text/javascript"></script>
<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-21121403-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
