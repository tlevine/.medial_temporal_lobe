<!doctype html><!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]--><!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]--><!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]--><!--[if gt IE 8]><!--><html class="no-hs" lang="en"> <!--<![endif]--><head><meta charset="utf-8"><title>Migration to Acid-State</title><meta name="author" content="Blake Rain"><meta name="viewport" content="width=device-width,initial-scale=1"><meta name="keywords" value="haskell,acid-state,yesod,happstack">
<meta name="description" value="After using persistent for some time, I decided to migrate my blog over to acid-state.">
<link rel="stylesheet" href="/static/bootstrap/css/bootstrap.css?etag=b6KRHuRg"><link rel="stylesheet" href="/static/bootstrap/css/bootstrap-responsive.css?etag=cC6EhSQr"><link rel="stylesheet" href="/static/fancybox/jquery.fancybox-1.3.4.css?etag=RjjOme8A"><link rel="stylesheet" href="/static/google-code-prettify/prettify.css?etag=NlyrjX8w"><link rel="stylesheet" href="/static/tmp/QlRc47tN.css"><link rel="stylesheet" href="/static/tmp/W_tDIl8g.css"><!--[if lt IE 9]><script src="http://html5shiv.googlecode.com/svn/trunk/html5.hs"></script><![endif]--><script src="/static/jquery.js?etag=f9j_6iVy"></script><script src="/static/bootstrap/js/bootstrap.min.js?etag=qr4lyghQ"></script><script>document.documentElement.className = document.documentElement.className.replace (/\bno-hs\b/, 'js');</script></head><body><a id="gitHubImage" href="http://github.com/HalfWayMan"><img style="position: absolute; top: 0; right: 0; border: 0;" src="/static/media/fork-green.png?etag=ItnmnA66"></a><div class="container"><div class="row"><div class="offset1 span10" id="header-container"><div id="banner-container"><div id="logo"><a href="http://meadowstalk.com/feed" title="Atom Feed"><img src="/static/media/rss.png?etag=IWilc9DU" width="15" height="14"></a><a href="http://meadowstalk.com/">meadowstalk.com</a></div></div><div class="navbar" style="margin-bottom: 2px;"><div class="navbar-inner"><div class="container"><ul class="nav"><li class=""><a rel="tooltip" data-placement="top" title="Blog roll" href="http://meadowstalk.com/">Home</a></li><li class=""><a rel="tooltip" data-placement="top" title="Information about me and this site" href="http://meadowstalk.com/about">About</a></li><li class="divider-vertical"></li><li class="dropdown" id="loginDrop"><a class="dropdown-toggle" rel="tooltip" data-placement="top" title="Sign in to the web-site" href="#" data-toggle="dropdown">Sign In <b class="caret"></b></a><div class="dropdown-menu" style="padding: 15px; padding-bottom: 9px;"><form method="POST" accept-charset="UTF-8" action="http://meadowstalk.com/admin/signin"><input type="text" id="userName" name="userName" size="30" style="margin-bottom: 15px;" placeholder="Username"><input type="password" id="userPass" name="password" size="30" style="margin-bottom: 15px;" placeholder="Password"><input class="btn btn-primary" style="clear: left; width: 100%; height: 32px; font-size: 13px;" type="submit" value="Sign In"></form></div></li></ul><form class="navbar-search pull-right" method="GET" action="http://meadowstalk.com/search"><input class="search-query" type="text" id="query" name="query" placeholder="Search"></form></div></div></div></div></div><div class="row"><div class="offset1 span10"><ul class="breadcrumb" style="margin-bottom: 2px; border: none; background: none; padding: 4px 4px;"><li><a href="http://meadowstalk.com/">Home</a><span class="divider"><b class="breadcrumb-caret"></b></span></li><li class="active">Migration to Acid-State</li></ul></div></div><div class="row"><div class="offset1 span8"><div class="page-header"><h1>Migration to Acid-State</h1><div class="page-info"><div class="page-info-categories">posted on Aug  5 in <a href="http://meadowstalk.com/search/category/haskell">haskell</a>
, <a href="http://meadowstalk.com/search/category/acid-state">acid-state</a>
, <a href="http://meadowstalk.com/search/category/yesod">yesod</a>
 and <a href="http://meadowstalk.com/search/category/happstack">happstack</a>
</div></div></div><div class="post"><p>Over the last week I&#39;ve been bed-ridden with a chest infection. Although, on Wednesday I did manage to migrate this site from using <a href="http://www.yesodweb.com/book/persistent"><code>persistent</code></a> and <a href="http://www.mongodb.org/">MongoDB</a> over to using David Himmelstrup&#39;s <a href="http://acid-state.seize.it/"><code>acid-state</code></a>.</p><h2>Why Not Use *-SQL?</h2><p>I&#39;ve never liked using the standard database solutions like MySQL or Postgresql. As many of you are aware, there is often an &quot;<a href="http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch">impedence mismatch</a>&quot; between the database and the language used to write the software. The phrase &quot;impedence mismatch&quot; is borrowed from electronics and is used to describe the situation where the types and structures used in the programming language do not match up with those provided by the database.</p><p>I felt this mismatch even more strongly when I moved over to Haskell (from C#, amusingly). Most of the structures I use in Haskell programs do not correlate very well at all to the table-based structure of modern databases. Additionally, the widespread use of sum-types makes the representation of data in fixed columns quite tedious.</p><p>The first large-scale project that I wrote using Haskell had quite a complex data model. Unfortunately, storing the record types in a standard relational  database was not a possibility. So, I moved over to using <a href="http://www.mongodb.org/">MongoDB</a>. To make life a little easier, I needed a <code>persistent</code>-like abstraction that supported sum-types and a few more complex types (such as <code>Data.Map</code>). So, to that effect I developed the now horribly out-dated <a href="https://github.com/MassiveTactical/mt-mongodb"><code>mt-mongodb</code></a> library.</p><h2><code>acid-state</code></h2><p>Now, just before I wrote <code>mt-mongodb</code>, I initially considered using <code>acid-state</code>. Here was a data store written in Haskell that provided ACID guarantees and let me use Haskell data types. The only reason I didn&#39;t end up using <code>acid-state</code> was that we had to be able to provide access to the data-store to other services. These days I&#39;d just give them a nice JSON API and a simple PHP library, keeping the database to myself.</p><p>Now, I&#39;ve been keeping an eye on <code>acid-state</code> ever since then. When it broke away from <a href="http://www.happstack.com/">Happstack</a> and became a standalone library I got even more interested, as that meant it would be a lot easier to integrate into other projects. Now that <code>acid-state</code> has reached version 0.6.5, I figured I&#39;d give it another go.</p><p>I was happy to see that the <code>acid-state</code> API hasn&#39;t changed all that much, and is just as easy to use. Some looking around also showed that the <a href="http://acid-state.seize.it/safecopy"><code>safe-copy</code></a> package is the default serialisation path used. This means that it is easy to provide backward compatability between versions of the data structures. It also seems that the <a href="http://www.happstack.com/C/ViewPage/7">plans for Happstack 8</a> include support for replication and sharding!</p><p>In order to see how easy it would be to integrate <code>acid-state</code> with a <a href="http://www.yesodweb.com/">Yesod</a> application, I decided to migrate this blog.</p><h2>Data Model, State and Events</h2><p>The first step in migrating the blog was to migrate the data model from the one generated by the <code>mkPersist</code> function to one using Haskell records. As this blog is very simple, it just meant the definition of <code>User</code> and <code>Post</code> record types and their associated IDs. The IDs are stored as <code>Integer</code>s and wrapped in <code>newtype</code>s for convenience. As an example, here is the <code>User</code> data type and the related <code>UserId</code>:</p><pre><code class="lang-hs">newtype UserId = UserId { unUserId ∷ Integer }
               deriving (Eq, Ord, Data, Enum, Typeable, SafeCopy)

data User = User { userId       ∷ UserId
                 , userName     ∷ Text
                 , userPassword ∷ Text
                 }
          deriving (Eq, Ord, Data, Typeable)</code></pre><p>To make these structures work with <code>acid-state</code> we need them to be instances of the <code>SafeCopy</code> type class. We derive the instance of this type class using the <code>deriveSafeCopy</code> function:</p><pre><code class="lang-hs">deriveSafeCopy 0 &#39;base &#39;&#39;User</code></pre><p>Finally we want to define our actual <i>state</i> that we want <code>acid-state</code> to manage. This is defined in the <code>MeadowState</code> data type:</p><pre><code class="lang-hs">data MeadowState = MeadowState { meadowNextPostId ∷ PostId
                               , meadowNextUserId ∷ UserId
                               , meadowPosts      ∷ IxSet Post
                               , meadowUsers      ∷ IxSet User
                               }
                 deriving (Data, Typeable)

deriveSafeCopy 0 &#39;base &#39;&#39;MeadowState</code></pre><p>With the site&#39;s state defined, I then moved onto defining the update and query events that I wanted to be able to apply to it. As a first example, here is an <code>Update</code> event to update the <code>Post</code> in the <code>meadowPosts</code> set based on the (hopefully unique) <code>postId</code> field:</p><pre><code class="lang-hs">updatePost ∷ Post → Update MeadowState ()
updatePost updatedPost = do
  meadow ← get
  put meadow { meadowPosts = updateIx (postId updatedPost) updatedPost (meadowPosts meadow) }</code></pre><p>Here is an example of a <code>Query</code> event that tries to find an element of the <code>meadowPosts</code> where the <code>postLinkName</code> matches the argument:</p><pre><code class="lang-hs">postByLinkName ∷ Text → Query MeadowState (Maybe Post)
postByLinkName linkName = do
  meadow ← ask
  return $ getOne $ (meadowPosts meadow) @= LinkName linkName</code></pre><p>Once all the events were written, the <code>acid-state</code> events then needed to be generated for these functions using the <code>makeAcidic</code> function:</p><pre><code class="lang-hs">makeAcidic &#39;&#39;MeadowState [ &#39;postByLinkName
                         , &#39;updatePost
                         , ... ]</code></pre><p>Once that was done, I was ready to move onto replacing the use of <code>persistent</code> in the rest of the site.</p><h2>Foundation, Application and Handlers</h2><p>First of all, I removed the fields related to the Persistent configuration and the pool of connections to the database from my foundation data type in my <code>Foundation.hs</code> source file. I then added a <code>getMeadowState</code> field with the type <code>AcidState MeadowState</code> from my model definition. To make life using <code>acid-state</code> in Yesod handlers I also wrote two simple functions to run acid queries and updates:</p><pre><code class="lang-hs">acidQuery ∷ (QueryEvent event, MethodState event ~ MeadowState)
          ⇒ event → GHandler sub Meadowstalk (EventResult event)
acidQuery q = do
  state ← getMeadowState &lt;$&gt; getYesod
  liftIO $ query state q

acidUpdate ∷ (UpdateEvent event, MethodState event ~ MeadowState)
           ⇒ event → GHandler sub Meadowstalk (EventResult event)
acidUpdate q = do
  state ← getMeadowState &lt;$&gt; getYesod
  liftIO $ update state q</code></pre><p>With this in place, I was then able to change the <code>makeFoundation</code> function in my <code>Application.hs</code> to use the <a href="http://hackage.haskell.org/packages/archive/acid-state/latest/doc/html/Data-Acid.html#v:openLocalStateFrom"><code>openLocalStateFrom</code></a> function to open the local state from a set location on the hard drive.</p><p>Now I was able to go round and change various route handlers to use <code>acid-state</code> rather than <code>persistent</code>. As an example, the root resource for meadowstalk displays a list of the published posts. This list is generated by fetching all the posts and passing them to the <code>renderPostList</code> function:</p><pre><code class="lang-hs">getRootR ∷ MeadowstalkHandler RepHtml
getRootR = do
--  posts ← renderPostList =&lt;&lt; (runDB $ selectList [] [])
  posts ← renderPostList =&lt;&lt; (acidQuery $ PostsByState StatePublished)
  defaultLayout $ do
    setTitle &quot;Home&quot;
    $(lessFile &quot;templates/post.less&quot;)
    $(widgetFile &quot;root&quot;)</code></pre><h2>Deployment Gotcha and Conclusion</h2><p>The only hicough came when deploying the new version of the site to the server using Michael Snoyman&#39;s excellent <code>keter</code>: <a href="http://www.yesodweb.com/blog/2012/05/keter-its-alive">as everyone knows</a>, Keter wipes the directory into which it installs a bundled web-application every time you re-deploy it. This, of course, wipes out the <code>state</code> directory created by <code>acid-state</code>, somewhat undermining it&#39;s entire purpose.</p><p>To combat this problem, I store the state in the directory <code>/var/lib/meadowstalk</code> and use the <a href="http://hackage.haskell.org/packages/archive/acid-state/latest/doc/html/Data-Acid.html#v:openLocalStateFrom"><code>openLocalStateFrom</code></a> function to load the state from there. This means that no matter how many times I re-deploy the application it still retains it&#39;s state.</p><div class="rounded4 image-wrapper image-wrapper-right" style="width: 288px;">
  <a class="image" href="https://lh6.googleusercontent.com/-iGLYyXlmdSg/UB7RgOnHdeI/AAAAAAAAAH8/pXtaoeBHd1s/s980/new-buttons.png" title="New Cryptic Buttons!">
    <img width="288" height="70" alt="new-buttons.png" title="New Cryptic Buttons!" src="http://lh6.ggpht.com/-iGLYyXlmdSg/UB7RgOnHdeI/AAAAAAAAAH8/pXtaoeBHd1s/s288/new-buttons.png">
  </a>
</div><p>In conclusion, the change over to <code>acid-state</code> was utterly painless, and now I have a completely native data model. I can use Haskell data structures and write all my queries and updates directly in Haskell. It also means that I can drop MongoDB altogether on the server on which this blog runs. I&#39;ve also gained some new cryptic buttons in my administration interface (shown right), which is always nice.</p><p>At some point later in the year (probably after I&#39;ve got this mail server finished), I have another possble web-project. I must admit, I&#39;m seriously considering using <code>acid-state</code> for that project too.</p><p>If you want to know more about <code>acid-state</code>, there is an awesome tutorial over on <a href="http://www.happstack.com/">Happstack</a>&#39;s site in their <a href="http://www.happstack.com/docs/crashcourse/AcidState.html#acid_state">Crash Course</a>.</p></div></div><div class="span2"><h3>Archives</h3><ul class="unstyled"><li>September<ul><li><a href="http://meadowstalk.com/post/yesod-haskell-exchange-2012">Yesod @ Haskell eXchange 2012</a></li></ul></li><li>August<ul><li><a href="http://meadowstalk.com/post/drawing-to-the-linux-framebuffer">Drawing to the Linux Framebuffer</a></li><li><a href="http://meadowstalk.com/post/upgrade-to-yesod-1-1">Upgrade to Yesod 1.1</a></li><li><a href="http://meadowstalk.com/post/migration-to-acid-state">Migration to Acid-State</a></li></ul></li><li>July<ul><li><a href="http://meadowstalk.com/post/using-less-with-yesod">Using Less with Yesod</a></li><li><a href="http://meadowstalk.com/post/first-post">First Post</a></li></ul></li></ul></div></div><div class="row"><div class="offset1 span8"><ul class="pager"><li class="previous"><a href="http://meadowstalk.com/post/using-less-with-yesod">&larr; Using Less with Yesod</a></li><li class="next"><a href="http://meadowstalk.com/post/upgrade-to-yesod-1-1">Upgrade to Yesod 1.1 &rarr;</a></li></ul></div></div><div class="row"><div class="offset1 span10"><div id="disqus_thread"><script type="text/javascript">var disqus_shortname  = "halfwaymansblog";var disqus_identifier = "migration-to-acid-state";var disqus_title      = "Migration to Acid-State";(function () {var dsq = document.createElement ("script");dsq.type  = "text/javascript";dsq.async = true;dsq.src   = "http://" + disqus_shortname + ".disqus.com/embed.js";document.getElementsByTagName ("body")[0].appendChild (dsq);})();</script><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><a class="dsq-brlink" href="http://disqus.com/">comments powered by <span class="logo-disqus">Disqus</span></a></div></div></div></div><script src="/static/fancybox/jquery.fancybox-1.3.4.pack.js?etag=i8NqCMRn"></script><script src="/static/google-code-prettify/prettify.js?etag=cJv8xFbG"></script><script src="/static/google-code-prettify/lang-hs.js?etag=e85jXkHT"></script><script src="/static/tmp/K_Fhcwlb.js"></script><footer>v1.4.8 Copyright &copy; 2012 Blake Rain<br>Built using <a href="http://haskell.org">Haskell</a> and <a href="http://yesodweb.org">Yesod</a></footer><script>if (!window.location.href.match (/localhost/)) {window._gaq = [['_setAccount', 'UA-33702959-1'], ['_trackPageview'], ['_trackPageLoadTime']];(function () {  var ga = document.createElement ('script'); ga.type = 'text/javascript'; ga.async = true;  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';  var s = document.getElementsByTagName ('script')[0]; s.parentNode.insertBefore (ga, s);})();}</script><script>$('a[rel=tooltip]').tooltip ();</script></body></html>