<html><head><title>
Recursive Make Considered Harmful
</title></head><body bgcolor="#ffffff"><h1><center>
Recursive Make Considered Harmful
</center></h1><center><i>
Peter Miller</i><br><tt>
millerp@canb.auug.org.au
</tt></center><p><p>
Copyright &copy; 1997 Peter Miller.  All rights reserved.
<p>
This paper is available in
<a href="http://aegis.sourceforge.net/auug97.pdf">PDF</a>
format.
<p>
For implementation notes, <a
href="http://www.xs4all.nl/~evbergen/nonrecursive-make.html">go here</a>.
<hr><p><center><b>
ABSTRACT
</b></center><blockquote>
For large UNIX projects, the traditional method of building the
project is to use recursive
<i>make.</i>
On some projects, this results in
build times which are unacceptably large, when all you want to
do is change one file.	In examining the source of the overly
long build times, it became evident that a number of
apparently unrelated problems combine to produce the delay,
but on analysis all have the same root cause.
<p>
This paper explores an number of problems regarding the use of
recursive
<i>make,</i>
and shows that they are all symptoms of the same
problem.  Symptoms that the UNIX community have long accepted
as a fact of life, but which need not be endured any longer.
These problems include recursive
<i>make</i>s which take ``forever'' to
work out that they need to do nothing, recursive <i>make</i>s which do
too much, or too little, recursive <i>make</i>s which are
overly sensitive to changes in the source code
and require constant <tt>Makefile</tt> intervention to keep them working.
<p>
The resolution of these problems can be found by looking at
what
<i>make</i>
does, from first principles, and then analyzing
the effects of introducing recursive
<i>make</i>
to this activity.
The analysis shows that the problem stems from the artificial
partitioning of the build into separate subsets.  This, in turn,
leads to the symptoms described.  To avoid the symptoms, it is
only necessary to avoid the separation; to use a single <tt>Makefile</tt>
for the whole project.
<p>
This conclusion runs counter to much accumulated folk wisdom in
building large projects on UNIX.  Some of the main objections
raised by this folk wisdom are examined and shown to be unfounded.
The results of actual use are far more encouraging, with routine
development performance improvements significantly faster than
intuition may indicate.  The use of a single project <tt>Makefile</tt>
is not as difficult to put into practice as it may first appear.
</blockquote>

</body></html>
