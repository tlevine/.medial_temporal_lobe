<!DOCTYPE html> 
<!--[if lte IE 6]>     <html lang="en" class="browser-ie   browser-old     browser-ie6   browser-ie-old">  <![endif]-->
<!--[if IE 7]>         <html lang="en" class="browser-ie   browser-old     browser-ie7   browser-ie-old">  <![endif]-->
<!--[if IE 8]>         <html lang="en" class="browser-ie   browser-old     browser-ie8   browser-ie-old">  <![endif]-->
<!--[if IE 9]>         <html lang="en" class="browser-ie   browser-modern  browser-ie9   browser-ie-new">  <![endif]-->
<!--[if IE 10]>        <html lang="en" class="browser-ie   browser-modern  browser-ie10  browser-ie-new">  <![endif]-->
<!--[if gt IE 10]><!--><html lang="en" class="browser-noie browser-modern"><!--<![endif]-->

<head> 
<!-- IE nonsence -->
<!--[if lte IE 8]><script src="/assets/ie-a4c2563d151bb67971b4d35ab37560db.js" type="text/javascript"></script><![endif]-->
<meta charset="UTF-8" />
<!-- Removes the hash -->
<script type="text/javascript">(function(){var k='#!',u=window.location,i=u.href.indexOf(k);if(i>0){u.href=u.href.substr(i+k.length);}})();</script> 

<!-- Meta Details -->
<title>More AngularJS Magic to Supercharge your Webapp - yearofmoo.com</title>
<meta id="x-description"    name="description"          content="Make way for another amazing article which covers more of AngularJS" /> 
<meta id="x-keywords"       name="keywords"             content="MooTools, JQuery, VIM, Rails, PHP, Ruby on Rails, FFMpeg, IOS Development, Internet Explorer, Chrome, Firefox, CSS, CSS3, JavaScript, HTML5, Blog" /> 
<meta id="x-twitter-site"   property="twitter:site"     content="@yearofmoo" />
<meta id="x-twitter-user"   property="twitter:creator"  content="@yearofmoo" />
<meta id="x-og-title"       property="og:title"         content="More AngularJS Magic to Supercharge your Webapp - yearofmoo.com" />
<meta id="x-og-description" property="og:description"   content="Make way for another amazing article which covers more of AngularJS" />
<meta id="x-og-site-url"    property="og:url"           content="http://www.yearofmoo.com/2012/10/more-angularjs-magic-to-supercharge-your-webapp.html" />
<meta id="x-og-image"       property="og:image"         content="http://www.yearofmoo.com/images/site/og/11.png" />
<meta id="x-og-site-name"   property="og:site_name"     content="yearofmoo" />

<!-- iOS -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="apple-touch-icon"                  href="/images/site/meta/ios-57x57.png" />
<link rel="apple-touch-icon" sizes="72x72"    href="/images/site/meta/ios-72x72.png" />
<link rel="apple-touch-icon" sizes="114x114"  href="/images/site/meta/ios-114x114.png" />
<link rel="apple-touch-icon" sizes="144x144"  href="/images/site/meta/ios-144x144.png" />

<!-- Extra -->
<link rel="alternate" type="application/rss+xml" title="RSS Feed" href="/feed.xml" />
<link rel="icon" type="image/png" href="/images/site/favicon.png" />
<link rel="shortcut icon" href="/images/site/favicon.png" /> 
<meta id="x-version" property="yom:version" content="1359584173" />

<link href="/assets/application-a19749d96a26e7cc9c278cd4a9b08a7f.css" media="screen" rel="stylesheet" type="text/css" />
<link href="/assets/mobile-58b8fa1aa5b44d80d373234adb8cc312.css" media="screen and (max-width: 600px)" rel="stylesheet" type="text/css" />
<link href="/assets/print-88f7a30fe5203eb4aabc28a42df75248.css" media="print" rel="stylesheet" type="text/css" />
</head>

<body class="post-layout" data-role="Mookins Cufon Links Scrolling SocialLinks Clouds MooTipsy Syntax MobileSections Fader">
  <div id="wrapper">
    <div id="header" class="clear">
  <div class="wrap">
    <h1>
      <a href="/">year of <em>moo</em></a>
    </h1>
  </div>
</div>
<div id="navigation">
  <div class="wrap">
    <ul>
      <li id="nav-about" class="page_item">
        <a href="/about.html">About</a>
      </li>
      <li id="nav-blogs" class="page_item">
        <a href="/">Articles (25)</a>
      </li>
      <li id="nav-code" class="page_item">
        <a href="/code/">Code (10)</a>
      </li>
      <li id="nav-contact" class="page_item">
        <a class="ignore-xview" href="/contact.html">Contact</a>
      </li>
    </ul>
  </div>
</div>

    <div id="stage">
      <section id="content">
        <div class="yom-content">
          
            <article>
  <header class="main">
    <h2>
      <a href="/2012/10/more-angularjs-magic-to-supercharge-your-webapp.html">More AngularJS Magic to Supercharge your Webapp</a>
    </h2>
  </header>

  <h3>Make way for another amazing article which covers more of AngularJS</h3>

  <p>
  Due to the popularity of the previous article, <a class="em" href="/2012/08/use-angularjs-to-power-your-web-application.html">
    Use AngularJS to power your web application</a>, I've <em>decided to cover more of AngularJS</em> to make it <em>fun and easy</em> for all developers
    to play around with it. <em>AngularJS is an incredible tool</em>, but a lot of the more advanced features are <em>hidden in deep within the
    documentation</em> and others are <em>too tricky to learn direclty</em>. AngularJS is also a fairly new product and as a result there are many features
    that are yet to be discovered and blogged about.
  </p>

  <p>
    This article will cover more of the <em>hidden gems of AngularJS and introduce new development tricks and methods to supercharge your AngularJS application</em>.
    Pleaes read onwards if you wish to become an <em>AngularJS web guru</em> :).
  </p>

<div data-role="Share" class="share-toolbar">
  <div class="share-toolbox addthis_toolbox addthis_default_style">
    <a href="#" class="addthis_button_facebook_like"></a>
    <a href="#" class="addthis_button_tweet"></a>
    <a href="#" class="addthis_button_google_plusone"></a>
    <a href="#" class="addthis_counter addthis_pill_style"></a>
  </div>
</div>


  <section class="outer">
    <header>
      <h3>
        <a href="#last-updated" id="last-updated" class="anchor-link">Last Updated</a>
      </h3>
    </header>

    <p>This page was first published on <em>October 2nd 2012</em> and was last updated on <em>January 30th 2013</em>.</p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#table-of-contents" id="table-of-contents" class="anchor-link">Table of Contents</a>
      </h3>
    </header>

    <div class="relative">
      <img src="/images/site/mookins/11.png" data-id="11" class="mascot" alt="mookin!" />


      <ol class="toc">
        <li><a href="#about" class="em">About this Article</a></li>
        <li><a href="#angularjs-and-internet-explorer">AngularJS and Internet Explorer</a></li>
        <li><a href="#data-binding-and-scope-changes">Data Binding and $scope changes</a></li>
        <li><a href="#root-scope-and-extending-scope-members">Root Scope and Extending Scope Members</a></li>
        <li><a href="#apply-digest-and-phase">$apply, $digest and $$phase</a></li>
        <li><a href="#communication-between-services-and-controllers">Communication Between Services and Controllers</a></li>
        <li><a href="#additional-features-of-controllers-and-routes">Additional features of Controllers and Routes</a></li>
        <li><a href="#you-should-be-using-custom-services">You should be using Custom Services</a></li>
        <li><a href="#show-hide-cloak-and-init">Show, Hide, Cloak and Init</a></li>
        <li><a href="#catching-errors">Catching Errors</a></li>
        <li><a href="#more-about-loops">More about Loops</a></li>
        <li><a href="#keeping-track-of-the-path-and-url">Keeping Track of the Path/URL</a></li>
        <li><a href="#filters-and-custom-filters">Filters and Custom Filters</a></li>
        <li><a href="#more-about-directives">More About Directives</a></li>
        <li><a href="#forms-and-form-validation">Forms and Form Validation</a></li>
        <li><a href="#internationalization-and-localization">Internationalization and Localization</a></li>
        <li><a href="#how-promises-work">How Promises Work</a></li>
        <li><a href="#includes-and-custom-html-views">Includes and Custom HTML Views</a></li>
        <li><a href="#inline-templates">Inline Templates</a></li>
        <li><a href="#how-to-make-sure-your-directives-are-run-after-your-scope-is-ready">How to Make Sure Your Directives are run After Your Scope is Ready</a></li>
        <li><a href="#more-angular-html-tricks">More Angular HTML Tricks</a></li>
        <li><a href="#conclusion" class="em">Conclusion</a></li>
      </ol>

    </div>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#about" class="anchor-link" id="about">About this article</a>
      </h3>
    </header>

    <p>
      This article is a sequel to the previous article titled
      <a class="em" href="/2012/08/use-angularjs-to-power-your-web-application.html">Use AngularJS to Power Your Web Application</a>. For those of you
      whom have not already read the article then be sure to fully absorb it prior to diving into this article. All of the topics in this article are based off of
      knowledge and topics introduced in the previous article so be sure to take a look.
    </p>

    <p>
      To clarify things a bit, in the previous article the primary module for angularJS was loaded as follows (the <em>App</em> variable is used quite often in this article):
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="c1">//you can leave out the ngResource array item if you want to</span>
<span class="kd">var</span> <span class="nx">App</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;YOUR_APP_NAME&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngResource&#39;</span><span class="p">]);</span>
</code></pre>
</div>

    </div>

    <p>
      AngularJS is huge and offers many features that have yet to be discovered by it's developer community. Not so much that the features are hidden, but
      more so the use for many of it's features aren't fully covered anywhere on the internet. This article goes over a lot. It will introduce many advanced
      tricks and secrets that you can use to make your AngularJS-powered web application even more insane than it already is.
    </p>

    <p>
      <a href="/2012/08/use-angularjs-to-power-your-web-application.html" class="btn">
        <span class="icon-arrow-left em2"></span> Click here to view the <em>previous article</em>
      </a>
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#angularjs-and-internet-explorer" class="anchor-link" id="angularjs-and-internet-explorer">AngularJS and Internet Explorer</a>
      </h3>
    </header>

    <p>
      Before we delve into more of the magic about AngularJS, some info about Internet Explorer should be covered.
    </p>

    <p>
      It's not really recommended that <em>IE6 and IE7</em> are used on an AngularJS application. The lack of support for <em>custom tags</em>
      and <em>hashchange events</em> makes the application itself very bloated and slow. Despite there being some support for them, AngularJS is
      recommeded only to be used with <em>A Grade Browsers</em> such as (Chrome, Firefox, IE8+, Safari and Opera). Try your best to avoid using
      AngularJS with IE6 and IE7 and you should be OK.
    </p>

    <p>
      AngularJS metions that the use of custom tags are supported in IE8 and it's noted that AngularJS does work fine with IE8 when using any 
      custom tags.  I don't believe entirely
      that IE8 respects custom tags since a special <em>HTML5 shiv file is required to make HTML5 tags work with IE8</em>. Therefore you will need to
      define each of the custom tags you use at the top of your file (<em>document.createElement('ng-pluralize')</em>,
      <em>document.createElement('ng-view')</em>, etc...). Thus <em>if can you work around using custom tags or if you can avoid IE8 all together</em> then
      just stick to using regular HTML/HTML5 tags and that should work fine.
    </p>

    <p>
      <a href="http://docs.angularjs.org/guide/ie" target="_blank" class="btn">
        <span class="icon-file em2"></span> Click here to read more about <em>IE compatibility</em> with <em>AngularJS</em>
      </a>
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#data-binding-and-scope-changes" class="anchor-link" id="data-binding-and-scope-changes">Dataing Binding and $scope changes</a>
      </h3>
    </header>

    <p>
      Data Binding works by echoing the values contained in the <em>$scope</em> variable to the DOM using various binding approaches. Whether
      it be directly with the curly braces <em>{{ some_value }}</em>, or directly within an attribute using
      a binding model, AngularJS is designed to do this well and to do it quickly.
    </p>

    <p>
      AngularJS handles changes in the $scope <del>with a poll and watch approach but it's not exactly what you expect polling to be</del> <em>whenever a
      major event occurs within the application, and then, once the event occurs, a digest operation is issued and the scope is updated.</em>
      The AngularJS $scope variable acts as a big key/value storage hash which
      is internally looped <del>on a timeout interval</del> and <em>dirty checked</em> against it's former value(s) each time a digestion occurs.
      If there is a change with the value compared to
      it's former value, then AngularJS fires off a change event and renders the necessary DOM handles to make that DOM binding render based on the value of
      that variable. These <em>major events</em> that AngularJS pays attention to are user input events (<em>mouse, keyboard, etc...</em>),
      any kind of important browser events (<em>timeout, blur, etc...</em>), and when any data returned is returned from the server
      (<em>$http calls, template downloads, etc...</em>). This is why whenever something happens outside of the AngularJS code (<em>a third party plugin does something,
      or when the URL is manually changed</em>) a direct call to the <em>$scope.$apply()</em> must be made to inform AngularJS to recognize that change 
      (<em>all of this is explained in more detail later on</em>).
    </p>

    <p>
      The nice thing about all this is that AngularJS isn't greedy and only runs when it has to, so if your webpage is idling as a background tab then, unless you
      have implemented something to loop in the background, then AngularJS <em>should not</em> fire off any digest calls.
    </p>

    <p>
      <a href="http://stackoverflow.com/questions/12463902/how-does-the-binding-and-digesting-work-in-angularjs#answer-12491335" class="btn" target="_blank">
        <span class="icon-signal em2"></span> Click here to find out more about these <em>major events</em> on <em>StackOverflow.com</em>
      </a>
    </p>
      
    <p>
      You would think that any application that is <del>constantly</del> <em>periodically</em> checking the same data over and over again would slow down very quickly,
      but no. AngularJS performs
      <em>remarkably well in comparison to other JavaScript MVC frameworks</em> and this same <em>dirty checking approach</em> is pretty common with other types
      of programs such as <em>video games</em>. 
    </p>

    <p>
      <a href="http://stackoverflow.com/questions/9682092/databinding-in-angularjs/9693933#9693933" target="_blank" class="btn">
        <span class="icon-signal em2"></span> Click here to find out more about this on <em>StackOverflow.com</em>
      </a>
      <a href="http://docs.angularjs.org/guide/concepts#runtime" class="btn" target="_blank">
        <span class="icon-file em2"></span> Click here to find out more in the <em>Documentation</em>
      </a>
    </p>
 
    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#root-scope-and-extending-scope-members" class="anchor-link" id="root-scope-and-extending-scope-members">Root Scope and Extending Scope Members</a>
      </h3>
    </header>

    <p>
      The <em>$rootScope</em> acts as the parent scope object of all other <em>$scope</em> objects. This means that when a controller is
      is executed then the <em>$scope</em> variable that is provided to it will have it's contents <em>linked/cloned from the $rootScope object</em>.
      It's best just to think the $scope variable as a child class of the $rootScope (<em>$scope extends $rootScope</em>). Undestanding this is <em>useful
      for when you want to have special methods attached to your scope variable</em> for use across your entire application (such as session information,
      flags, states, etc...).
    </p>

    <p>
      The following example below is an example of how you can attach different libraries or code objects to your $scope instance.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;$rootScope&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>

  <span class="c1">//this will be available to all scope variables</span>
  <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">includeLibraries</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

  <span class="c1">//this method will be available to all scope variables as well</span>
  <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">include</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">libraries</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">scope</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="c1">//attach each of the libraries directly to the scope variable</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">libraries</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">libraries</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
      <span class="nx">scope</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">getLibrary</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">scope</span><span class="p">;</span>
  <span class="p">};</span>

<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    <p>
      And then inside of your controller or directive you can do the following.
    </p>

    <div class="syntax" data-syntax-stack="http://stackoverflow.com/questions/11956667/angularjs-intercept-and-extend-controller-scope">
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">Ctrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">includeLibraries</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//the flag was set in the $rootScope object</span>
    <span class="nx">$scope</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">include</span><span class="p">([</span><span class="s1">&#39;plugin1&#39;</span><span class="p">,</span> <span class="s1">&#39;library1&#39;</span><span class="p">]);</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="nx">Ctrl</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">];</span>
</code></pre>
</div>

    </div>

    <p>
      Try not to set too much data into the $scope and $rootScope variables. Afterall, AngularJS deals with $scope data very very often and you wouldn't
      want to overwhelm it ;)
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#apply-digest-and-phase" class="anchor-link" id="apply-digest-and-phase">$apply, $digest and $$phase</a>
      </h3>
    </header>
    <p>
      This is the most important thing to know about AngularJS. There will come a time and place when you need to integrate a 3rd party app
      into your website and you will find that it breaks or doesn't get picked up by Angular. To get this to work you will need to understand
      how the <em>$digest</em> and <em>$apply</em> methods work.
    </p>

    <p>
      Each time a <em>major event occurs</em> in a web application that is angular is running
      (when a webpage is first loaded, when new AJAX request is recieved, URL changes, etc...) <em>
      Angular picks up the change and then prepares a digestion</em> (which is the internal loop which is run on the $scope memeber). This only takes a
      few milliseconds, but angular only runs this process once at a time. You can manually kickstart this process by running the <em>$scope.$apply()</em> method
      (this is useful for triggering updaets when 3rd party applications do something with your webpage that angular needs to know about).
      Also if you set your own bindings and run the <em>$scope.$apply()</em> method then
      an exception may be thrown which may cause your code to stop  (this happens when an existing digestion is going on in the background). So you will
      need to aware when a digestion is going on by checking the <em>$$phase</em> variable (this is explained below). The $apply method runs the <em>$diest()</em>
      method which is an internal method which triggers angular to poll all it's $watch methods.
    </p>

    <p>
      To get around the <em>$apply exception</em> you will need to pay attention to the <em>$scope.$$phase</em> flag to see if a digestion phase
      is going on in the background.
      If a phase is going on then you can just set the $scope values directly and they should get picked up by the current digestion. Here is a combined
      method which I use to get around this.
    </p>

    <div class="syntax" data-syntax-github="https://github.com/yearofmoo/AngularJS-Scope.SafeApply">
<div class="highlight"><pre><code class="javascript"><span class="c1">//when you add it to the $rootScope variable, then it&#39;s accessible to all other $scope variables.</span>
<span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$safeApply</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">fn</span> <span class="o">=</span> <span class="nx">fn</span> <span class="o">||</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">$$phase</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//don&#39;t worry, the value gets set and AngularJS picks up on it...</span>
    <span class="nx">fn</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="c1">//this will fire to tell angularjs to notice that a change has happened</span>
    <span class="c1">//if it is outside of it&#39;s own behaviour...</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span> 
  <span class="p">}</span>
<span class="p">};</span>

<span class="c1">//and you can run it like so.</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">some_value</span> <span class="o">=</span> <span class="s1">&#39;value...&#39;</span><span class="p">;</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">$safeApply</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//this function is run once the apply process is running or has just finished</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      You may use the method above in any situation when you manually need to set a binding yourself which is out of the natural order of things
      within angular services (for example when you run any $http method then angular will pickup the changes automatically).
    <p>

    <p>
      In the event that you wish to change the URL of the webpage, then you will have to also pay attention to the <em>$$phase</em> variable to see
      if you're <em>"allowed"</em> to change the URL. If a digestion phase is going on then you can just fallback to changing the URL the old fashion
      way using <em>window.location</em>.
    </p>

    <div class="syntax" data-syntax-group="https://groups.google.com/forum/#!msg/angular/FJwxJ-XbJaE/1NavZNQBhf4J">
<div class="highlight"><pre><code class="javascript"><span class="c1">//be sure to inject $scope and $location somewhere before this</span>
<span class="kd">var</span> <span class="nx">changeLocation</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">force</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//this will mark the URL change</span>
  <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span> <span class="c1">//use $location.path(url).replace() if you want to replace the location instead</span>

  <span class="nx">$scope</span> <span class="o">=</span> <span class="nx">$scope</span> <span class="o">||</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">scope</span><span class="p">();</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">force</span> <span class="o">||</span> <span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">$$phase</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//this will kickstart angular if to notice the change</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre>
</div>

    </div>

    <p>
      This should ensure that your webpage URL will get changed no matter what.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>




  <section class="outer">
    <header>
      <h3>
        <a href="#communication-between-services-and-controllers" class="anchor-link" id="communication-between-services-and-controllers">Communication Between Services and Controllers</a>
      </h3>
    </header>

    <p>
      Whenever you have an event take place in your application which affects all controllers and directives it's best to use the <em>$emit, $on and $broadcast</em> methods
      provided by AngularJS. Examples of this include permissions and session changes (like when a user logs out or when a flag is raised).
    </p>

    <p>
      When you need to have a parent controller or scope instruct all child controllers about a change then you can use the <em>$broadcast</em> method.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="c1">//get the topmost scope</span>
<span class="kd">var</span> <span class="nx">$scope</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">scope</span><span class="p">();</span>

<span class="c1">//logout event</span>
<span class="kd">var</span> <span class="nx">logoutEvent</span> <span class="o">=</span> <span class="s1">&#39;logout&#39;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">logoutArgs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;arg&#39;</span><span class="p">];</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">$broadcast</span><span class="p">(</span><span class="nx">logoutEvent</span><span class="p">,</span> <span class="nx">logoutArgs</span><span class="p">);</span> 

<span class="c1">//login event</span>
<span class="kd">var</span> <span class="nx">logoutEvent</span> <span class="o">=</span> <span class="s1">&#39;logout&#39;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">logoutArgs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;arg&#39;</span><span class="p">];</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">$broadcast</span><span class="p">(</span><span class="nx">logoutEvent</span><span class="p">,</span> <span class="nx">logoutArgs</span><span class="p">);</span>
</code></pre>
</div>

    </div>

    <p>
      Then within your <em>controllers or directives</em> do this:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="c1">//</span>
<span class="c1">//in your controller</span>
<span class="c1">//</span>
<span class="kd">var</span> <span class="nx">Ctrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;logout&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;bye bye&#39;</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;login&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;hello there&#39;</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">};</span>
<span class="nx">Ctrl</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">];</span>

<span class="c1">//</span>
<span class="c1">//in your directive</span>
<span class="c1">//</span>
<span class="nx">App</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;sessionStatus&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;login&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">element</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="s1">&#39;You are logged in!&#39;</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;logout&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">element</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="s1">&#39;You are logged out!&#39;</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">};</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      You can also fire events back upwards using <em>$scope.$emit</em>.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">Ctrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">onLogoutClick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;logout&#39;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="nx">Ctrl</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">];</span>

<span class="c1">//upper $scopes will respond to this with the same $on method.</span>
</code></pre>
</div>

    </div>

    <p>
      Using these inter-controller communication methods there is no need to create shared code between controllers.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#additional-features-of-controllers-and-routes" class="anchor-link" id="additional-features-of-controllers-and-routes">Additional features of Controllers and Routes</a>
      </h3>
    </header>

    <p>
      AngularJS also comes with other less known methods of handling requests between controllers. But, before I get into that I would
      just like to point out an alternative way of creating controllers.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;Ctrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//exactly same result as creating a controller with an explicit function </span>
<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    <p>
      OK so onto business. When a request happens you can create a resolving action as apart of the route which is basically a function that
      is fired just before the request is shipped off to the controller. Here's an example of it:
    </p>

    <div
      class="syntax"
      data-syntax-github="https://github.com/johnlindquist/angular-resolve/blob/master/client/js/app.js#L51"
      data-syntax-stack="http://stackoverflow.com/questions/12059956/angularjs-pre-served-params-variables-for-a-controller-defined-inside-of-a-rout"
      data-syntax-docs="http://docs.angularjs.org/api/ng.$routeProvider#when">
<div class="highlight"><pre><code class="javascript"><span class="c1">//checkout the route code below first before reading this</span>
<span class="kd">var</span> <span class="nx">Ctrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">argument1</span><span class="p">,</span> <span class="nx">argument2</span><span class="p">,</span> <span class="nx">argument3</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">argument1</span><span class="p">);</span> <span class="c1">//someDependeny&#39;s value or toString method</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">argument2</span><span class="p">);</span> <span class="c1">//&quot;some value&quot;</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">argument3</span><span class="p">);</span> <span class="c1">//the response.data value returned from GET /path/to/some/url</span>
<span class="p">};</span>
<span class="nx">Ctrl</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;$http&#39;</span><span class="p">,</span> <span class="s1">&#39;argument1&#39;</span><span class="p">,</span> <span class="s1">&#39;argument2&#39;</span><span class="p">,</span> <span class="s1">&#39;argument3&#39;</span><span class="p">];</span>

<span class="c1">//here&#39;s where the magic happens</span>
<span class="nx">App</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/some/page/with/an/:id&#39;</span><span class="p">,{</span>
    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;/path/to/some/template.html&#39;</span><span class="p">,</span>
    <span class="nx">controller</span><span class="o">:</span> <span class="nx">Ctrl</span><span class="p">,</span>
    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">argument1</span><span class="o">:</span> <span class="s1">&#39;someDependency&#39;</span><span class="p">,</span> <span class="c1">//this is a registered dependency and works the same as a dependeny injection would within a controller</span>
      <span class="nx">argument2</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;some value&#39;</span><span class="p">;</span> <span class="p">},</span> <span class="c1">//this is resolved instantly since there is nothing going on</span>
      <span class="nx">argument3</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/path/to/some/url&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span> <span class="c1">//this is what is returned as the value for argument3</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    <p>
      When the application makes it's way to the path <em>/some/page/with/an/:id</em> then angular wil start to resolve the dependencies
      each outlined in the <em>resolve:{}</em> block. Once ready (when all the promises are met), then it will forward the request to the controller
      and work as usual. This is nice for when you want to abstract your data requirements outside of your controller. And within the resolve function
      you can also inject any service as usual (this is useful for when you need to have data be fetched prior to your controller being run).
      Also keep in mind that if you set the controller
      directly as a <em>ng-controller</em> attribute then the resolve block itself is skipped (since it depends on the path [route] of the page instead
      of the controller binding).
    </p>

    <p>
      <a href="https://github.com/johnlindquist/angular-resolve/blob/master/client/js/app.js#L51" target="_blank" class="btn">
        <span class="icon-github em2"></span> Click here to <em>view an existing application using route resolving</em>
      </a>
    </p>

    <p>
      The <em>$route</em> variable can also be injected directly into the controller and this can be used to fetch information about the current route:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">Ctrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$route</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">templateUrl</span><span class="p">;</span> <span class="c1">//the URL of the template</span>
  <span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span> <span class="c1">//same as $routeParams</span>
  <span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">controller</span><span class="p">;</span> <span class="c1">//the name of the controller (Ctrl)</span>
<span class="p">};</span>
<span class="nx">Ctrl</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span><span class="s1">&#39;$route&#39;</span><span class="p">];</span>
</code></pre>
</div>

    </div>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#you-should-be-using-custom-services" class="anchor-link" id="you-should-be-using-custom-services">You should be using Custom Services</a>
      </h3>
    </header>

    <p>
      Custom services are what make angular very manageable and easily testable.
      By using angular's dependency injection feature you can create a custom service anywhere within
      your application and include it elsewhere very easily. A common example of where a shared service makes sense is to use it as a special <em>$http</em>
      service which is tailored to fit your application.
    </p>

    <div
      class="syntax"
      data-syntax-docs="http://docs.angularjs.org/guide/module"
      data-syntax-stack="http://stackoverflow.com/questions/12059956/angularjs-pre-served-params-variables-for-a-controller-defined-inside-of-a-rout">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myHttp&#39;</span><span class="p">,[</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">get</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">fail</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
      <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="nx">fail</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>
<span class="p">}]);</span>

<span class="c1">//this service can now be called by doing...</span>
<span class="nx">$myHttp</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/path&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      Also, below is a description of <em>how data is shared between services within the same model</em>.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myFoo&#39;</span><span class="p">,[</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//any variables defined in this area will be ACCESSIBLE</span>
  <span class="c1">//within the any of the other services which are defined</span>
  <span class="c1">//within the same module. So if a variable called foo...</span>
  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
  <span class="c1">//then foo can be accessed in another service. Be sure to</span>
  <span class="c1">//keep this in mind since it&#39;s hard to debug</span>
  <span class="k">return</span> <span class="nx">foo</span><span class="p">;</span>
<span class="p">}]);</span>

<span class="nx">App</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myBar&#39;</span><span class="p">,[</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="s1">&#39;bar2&#39;</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="nx">bar</span><span class="p">;</span> <span class="c1">//this should return either bar2 or barbar2</span>
<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    <p>
      You can also inject any of your own services into any other services when created; this is very useful for code reuse and testing.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#show-hide-cloak-and-init" class="anchor-link" id="show-hide-cloak-and-init">Show, Hide, Cloak and Init</a>
      </h3>
    </header>

    <p>
      You will find that showing and hiding values in your angular templates may be difficult since you cannot rely on the
      server-side programming language to build your template (templates are static).
      Here's an example of how something would work normally when using a something like PHP:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;session&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;?php if($isAdmin) { ?&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;admin&quot;</span><span class="nt">&gt;</span>Hello Admin<span class="nt">&lt;/span&gt;</span>
  <span class="cp">&lt;?php } else { ?&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>Hello User<span class="nt">&lt;/span&gt;</span>
  <span class="cp">&lt;?php } ?&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      The same effect can be created by using angular
    </p>

    <div class="syntax" data-syntax-docs="http://docs.angularjs.org/api/ng.directive:ngShow">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;session&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;admin&quot;</span> <span class="na">data-ng-show=</span><span class="s">&quot;isAdmin&quot;</span><span class="nt">&gt;</span>Hello Admin<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;admin&quot;</span> <span class="na">data-ng-hide=</span><span class="s">&quot;isAdmin&quot;</span><span class="nt">&gt;</span>Hello User<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      Just be sure to set the binding value
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">isAdmin</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">//or false or whatever</span>
</code></pre>
</div>

    </div>

    <p>
      This works, but when the page is still downloading (when first loaded) you may see both values at the same time so to get around this
      just use cloaking.
    </p>

    <div class="syntax" data-syntax-docs="http://docs.angularjs.org/api/ng.directive:ngCloak">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;session ng-cloak&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      And define the CSS for it as well:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="css"><span class="nc">.ng-cloak</span> <span class="p">{</span>
  <span class="c">/* this will change to block when scope and angular is ready */</span>
  <span class="k">display</span><span class="o">:</span><span class="k">none</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

    </div>

    <p>
      Oh! And one more thing. If you wish to set the <em>isAdmin</em> value <em>directly into your HTML</em>, then do the following using
      the <em>data-ng-init</em>:
    </p>

    <div class="syntax" data-syntax-docs="http://docs.angularjs.org/api/ng.directive:ngInit">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;session ng-cloak&quot;</span> <span class="na">data-ng-init=</span><span class="s">&quot;isAdmin=false;&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;admin&quot;</span> <span class="na">data-ng-show=</span><span class="s">&quot;isAdmin&quot;</span><span class="nt">&gt;</span>Hello Admin<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;admin&quot;</span> <span class="na">data-ng-hide=</span><span class="s">&quot;isAdmin&quot;</span><span class="nt">&gt;</span>Hello User<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      The <em>data-ng-init</em> attribute is useful for pre-setting values. The syntax works like you would be setting values in JavaScript
      directly (since it uses eval to evaluate the text within the attribute value).
    </p>

    <p>
      Isn't this stuff just amazing!
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#catching-errors" class="anchor-link" id="catching-errors">Catching Errors</a>
      </h3>
    </header>

    <p>
      Catching errors is something that is important for a production application. Below are various approaches do doing so:
    </p>

    <section class="inner">
      <header>
        <h4>Catchall Route (otherwise)</h4>
      </header>

      <p>
        Despite this being a useful method as a default page for a route, it's best to <em>reserve this route as your 404 page handler</em> in 
        the event that a route is not recognized within your application.
      </p>

      <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/404&#39;</span><span class="p">,{</span>
  <span class="nx">controller</span> <span class="o">:</span> <span class="nx">ErrorCtrl</span>
<span class="p">});</span>
<span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span>
  <span class="nx">redirectTo</span> <span class="o">:</span> <span class="s1">&#39;/404&#39;</span>
<span class="p">});</span>
</code></pre>
</div>

      </div>
    </section>


    <section class="inner">
      <header>
        <h4>When your routes fail</h4>
      </header>

      <p>
        In the event that a route change fails (due to a missing templateUrl or something) then you can capture the event within your scope by doing the following:
      </p>
        
      <div class="syntax" data-syntax-stack="http://stackoverflow.com/questions/12656226/angularjs-and-a-failed-templateurl/12669919#12669919">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;$rootScope&#39;</span><span class="p">,</span><span class="s1">&#39;$location&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s2">&quot;$routeChangeError&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">current</span><span class="p">,</span> <span class="nx">previous</span><span class="p">,</span> <span class="nx">rejection</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//change this code to handle the error somehow</span>
    <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/404&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">}]);</span>
</code></pre>
</div>

      </div>

    </section>


    <section class="inner">
      <header>
        <h4>Wrap Services Around your HTTP Requests</h4>
      </header>

      <p>
        Earlier in the article I explained the importance of custom services for code reuse. When you <em>set a custom service to wrap all your AJAX calls
        then you can catch errors before they're passed onto other parts of your application</em>.
      </p>

      <div class="syntax" data-syntax-stack="http://stackoverflow.com/questions/11956827/angularjs-intercept-all-http-json-responses#answer-11963362">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myHttp&#39;</span><span class="p">,[</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="s1">&#39;$location&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>

  <span class="kd">var</span> <span class="nx">onEmpty</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s1">&#39;/404&#39;</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">get</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">fail</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">onEmpty</span><span class="p">();</span>
          <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">success</span><span class="p">();</span>
      <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="nx">onEmpty</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>
<span class="p">}]);</span>
</code></pre>
</div>

      </div>

      <p>
        <a href="http://stackoverflow.com/questions/11956827/angularjs-intercept-all-http-json-responses#answer-11963362" target="_blank" class="btn">
          <span class="icon-signal em2"></span> Click here to read more about this on <em>StackOverflow.com</em>
        </a>
      </p>
    </section>

    <p>
      Be sure to only <em>use this method when you access resources and data that is required within your application</em> (like <em>JSON data for a specific view</em>).
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#more-about-loops" class="anchor-link" id="more-about-loops">More About Loops</a>
      </h3>
    </header>

    <p>
      Loops are tricky and funky in anguarJS. Much of their details were covered in the
      <a href="/2012/08/use-angularjs-to-power-your-web-application.html" class="em">previous article</a>, however some things
      were not fully covered.
    </p>

    <p>
      To get access to the <em>index</em> of a loop in angular you can access it from the <em>$index</em> value directly.
    </p>

    <div class="syntax"
      data-syntax-docs="http://docs.angularjs.org/api/ng.directive:ngRepeat">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;ol&gt;</span>
  <span class="nt">&lt;li</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;option in options&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2&gt;</span>Option #{{ $index + 1 }}: <span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>
</code></pre>
</div>

    </div>

    <p>The <em>$index + 1</em> is used since the index value always starts from zero.

    <p>
      The default syntax <em>relies on an array being defined within your scope</em>. But what happens when you do not have an array set and you simply
      want to construct a grid with simple max and min values? You will need to <em>setup a filter that prepares the looping array for you</em>.
      Here's an example of how to do that:
    </p>

    <div class="syntax" data-syntax-stack="http://stackoverflow.com/questions/11873570/angularjs-for-loop-with-numbers-ranges">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;range&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">total</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">total</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">total</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">total</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">input</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">input</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      And then access it within your loop as a filter (<em>this will create 100 divs from 0 to 99</em>):
    </p>

    <div
      class="syntax"
      data-syntax-docs="http://docs.angularjs.org/api/ng.directive:ngRepeat"
      data-syntax-stack="http://stackoverflow.com/questions/11873570/angularjs-for-loop-with-numbers-ranges">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">ng-repeat=</span><span class="s">&quot;n in [] | range:100&quot;</span><span class="nt">&gt;</span>
  {{ $index }} - do something
<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      Keep in mind that there are also other options available such as <em>$first</em>, <em>$middle</em>, and <em>$last</em>. All of these and more
      are covered within the <a href="http://docs.angularjs.org/api/ng.directive:ngRepeat" target="_blank" class="em">angularJS documentation</a>
    </p>

    <p>
      <a href="http://docs.angularjs.org/api/ng.directive:ngRepeat" target="_blank" class="btn">
        <span class="icon-file em2"></span> Click here to read more about <em>AngularJS ngRepeat</em>
      </a>
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#keeping-track-of-the-path-and-url" class="anchor-link" id="keeping-track-of-the-path-and-url">Keeping Track of the Path/URL</a>
      </h3>
    </header>

    <p>
      To grab the current path of the page regardless of it being a <em>hashbang</em> or a direct path (whether by HTML history or not) you can get
      it by accessing the <em>$location getters</em>.
    </p>

    <div
      class="syntax"
      data-syntax-docs="http://docs.angularjs.org/api/ng.$location">
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">path</span>  <span class="o">=</span> <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">url</span>   <span class="o">=</span> <span class="nx">$location</span><span class="p">.</span><span class="nx">absUrl</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">hash</span>  <span class="o">=</span> <span class="nx">$location</span><span class="p">.</span><span class="nx">hash</span><span class="p">();</span>
</code></pre>
</div>

    </div>

    <p>
      To keep track of the URL when it changes, you will need to setup a polling event.
    </p>

    <div
      class="syntax"
      data-syntax-docs="http://docs.angularjs.org/api/ng.$location">
<div class="highlight"><pre><code class="javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;$location.path()&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//new path!</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      Additionally you can set these events explicitly within your scope variable
    </p>

    <div
      class="syntax"
      data-syntax-group="https://groups.google.com/forum/#!msg/angular/L-E6ZhB2YNA/YoCrsFEhbk4J">
<div class="highlight"><pre><code class="javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;$locationChangeStart&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">newUrl</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;new location&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#filters-and-custom-filters" class="anchor-link" id="filters-and-custom-filters">Filters and Custom Filters</a>
      </h3>
    </header>

    <p>
      There are <em>two ways to define a filter in AngularJS</em>: You can define it as a <em>filter</em> or as a <em>service</em>.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;my&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      Or you can define it as a service (same thing):
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myFilter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      You can use of these filters <em>directly in your HTML: </em>
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;some-data&quot;</span><span class="nt">&gt;</span>{{ value | my }}<span class="nt">&lt;span&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      Or you can also access these filters <em>directly in your services and controllers via dependency injection</em>.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;someService&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$filter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$filter</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$filter</span><span class="p">(</span><span class="s1">&#39;my&#39;</span><span class="p">)(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#more-about-directives" class="anchor-link" id="more-about-directives">More about Directives</a>
      </h3>
    </header>

    <p>
      Directives are usually provided using a <em>link method</em> within the response of a directive block. However there are other
      options when setting directives:
    </p>

    <div class="syntax" data-syntax-docs="http://docs.angularjs.org/guide/directive">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;myDirective&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$location&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">restrict</span> <span class="o">:</span> <span class="s1">&#39;ECA&#39;</span><span class="p">,</span> <span class="c1">//Element, Comment and Attribute instances are all scanned</span>
    <span class="nx">scope</span> <span class="o">:</span> <span class="p">{</span>
      <span class="c1">//these values will be apart of the scope variable passed into the link method</span>
      <span class="nx">key</span> <span class="o">:</span> <span class="s1">&#39;value&#39;</span><span class="p">,</span>
      <span class="nx">key2</span> <span class="o">:</span> <span class="s1">&#39;value2&#39;</span>
    <span class="p">},</span>
    <span class="nx">compile</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="nx">pre</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span> <span class="c1">//this is called before the directive element is attached to the DOM</span>
        <span class="nx">post</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="c1">//this is called after the directive element is attached to the DOM (same as link)</span>
      <span class="p">};</span>
    <span class="p">},</span>
    <span class="nx">link</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">controllerObject</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//this is what is normally used and is the same as the compile:post function.</span>
    <span class="p">}</span>
  <span class="p">};</span>

<span class="p">}]);</span>
</code></pre>
</div>

    </div>

    <p>
      You can also avoid all the clutter by providing a function as the directive. This is the same as passing only a hash
      that contains the <em>link</em> value.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;myDirective&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">controller</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//less code is nice</span>
  <span class="p">};</span>
<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      There's alot more about directives, but this covers about 90% of the cases for when you would use them.
    </p>

    <p>
      <a href="http://docs.angularjs.org/guide/directive" target="_blank" class="btn">
        <span class="icon-file em2"></span> Click here to read more about <em>AngularJS Directives</em>
      </a>
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#forms-and-form-validation" class="anchor-link" id="forms-and-form-validation">Forms and Form Validation</a>
      </h3>
    </header>

    <section class="inner">
      <header>
        <h4>Quick Difference between Form Models and Form Bindings</h4>
      </header>

      <p>
        In the previous article I introduced bindings and form inputs. However, one thing to keep track of is that when you have a form field input
        (such as a input field or textarea) <em>AngularJS needs to be aware that there is a two way relationship between the field</em>, so if possible
        (if it works for you) then setup your form field elements as so (instead of using <em>{{ value }}</em>).
      </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-ng-model=</span><span class="s">&quot;name&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;textarea</span> <span class="na">data-ng-model=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</code></pre>
</div>

      </div>

      <p>
        If for some reason it won't work then you can stick to using <em>{{ value }}</em>, but it may not update with it's
        scope since there isn't a definite two-way binding between the two.
      </p>

    </section>


    <section class="inner">
      <header>
        <h4>Form Validation</h4>
      </header>

      <p>
        AngularJS doesn't provide <em>extensive form validation</em> like you would expect a fancy UI form valdation plugin to provide, however it does provide
        enough support to validate your form and it's model data before it gets submitted further. If <em>you are already using another form validation software
        on top of angular then don't both to use angular's form validation</em>. Here's an example of it's usage.
      </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;form</span> <span class="na">novalidate</span> <span class="na">class=</span><span class="s">&quot;simple-form&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ol</span> <span class="na">class=</span><span class="s">&quot;fields&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;input-name&quot;</span><span class="nt">&gt;</span>Name:<span class="nt">&lt;/label&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;input-name&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-ng-model=</span><span class="s">&quot;name&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;input-email&quot;</span><span class="nt">&gt;</span>Email:<span class="nt">&lt;/label&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;input-email&quot;</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span> <span class="na">data-ng-model=</span><span class="s">&quot;email&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ol&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">data-ng-click=</span><span class="s">&quot;submit()&quot;</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre>
</div>

      </div>

      <p>
        This basically validates that the value assigned to <em>name is non-blank</em> and the value assigned to <em>email is a valid email</em>. Once valid
        then the data is passed onto the submit method. I haven't gotten to use much of the functionality yet, but it works as expected. Also, this may not work
        directly if you use a <em>input type="submit"</em> or <em>input type="button"</em> element (since that submits the form natively. Give it a shot and let
        me know).
      </p>

    </section>

    <p>
      <a href="http://docs.angularjs.org/guide/forms" target="_blank" class="btn">
        <span class="icon-file em2"></span> Click here to find out more about <em>AngularJS Forms and Form Validation</em>
      </a>
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#internationalization-and-localization" class="anchor-link" id="internationalization-and-localization">Internationalization and Localization</a>
      </h3>
    </header>

    <p>
      Internationalization (<em>commonly known as I18n</em>) is a feature designed to map isolate translations from your application outside your application logic.
      Localization (<em>commonly known as I10n</em>) is similar, but it's designed to translate programatic data (such as numbers and dates) into localized formats
      (good examples of this include currency and date formats).
    </p>

    <p>
      Angular isn't designed to be a full-scale internationalization and localization tool for the entire client-side area of your web application,
      but it does provide some useful features.
    </p>

    <section class="inner">
      <header>
        <h4>Pluralization (using ngPluralize)</h4>
      </header>

      <p>
        Lets say you have a page that lists your inbox messages and you wish to display the total amount of messages in a human readable form.
      </p>

      <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">data-ng-pluralize</span> 
  <span class="na">count=</span><span class="s">&quot;messagesCount&quot;</span>
  <span class="na">when=</span><span class="s">&quot;{</span>
<span class="s">    &#39;0&#39; : &#39;No have no messages in your inbox&#39;,</span>
<span class="s">    &#39;1&#39; : &#39;You have one message in your inbox&#39;,</span>
<span class="s">    &#39;other&#39; : &#39;You have {{ messagesCount }} messages in your inbox&#39;</span>
<span class="s">  }&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre>
</div>

      </div>

      <p>
        Ideally you wouldn't stick the english translations directly into your own webapge so you can switch this so that translations are looked up in a
        <em>global translation lookup table</em>.
      </p>

      <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">data-ng-pluralize</span> 
  <span class="na">count=</span><span class="s">&quot;messagesCount&quot;</span>
  <span class="na">when=</span><span class="s">&quot;{</span>
<span class="s">    &#39;0&#39; : translate(&#39;message.zero&#39;),</span>
<span class="s">    &#39;1&#39; : translate(&#39;message.one&#39;),</span>
<span class="s">    &#39;other&#39; : translate(&#39;message.many&#39;, { count : messagesCount })</span>
<span class="s">  }&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre>
</div>

      </div>

      <p>
        You would have to define your own lookup since this is something angular doesn't provide by itself.
      </p>

      <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">LOOKUP</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">&#39;messages.zero&#39;</span> <span class="o">:</span> <span class="s1">&#39;No have no messages in your inbox&#39;</span><span class="p">,</span>
  <span class="s1">&#39;messages.one&#39;</span> <span class="o">:</span> <span class="s1">&#39;You have one message in your inbox&#39;</span><span class="p">,</span>
  <span class="s1">&#39;messages.many&#39;</span> <span class="o">:</span> <span class="s1">&#39;You have %messagesCount% messages in your inbox&#39;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">translate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">LOOKUP</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">args</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
      <span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;%&#39;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s1">&#39;%&#39;</span><span class="p">;</span>
      <span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
<span class="p">};</span>
</code></pre>
</div>

      </div>
    </section>

    <section class="inner">
      <header>
        <h4>Formatting Dates and Times</h4>
      </header>

      <p>
        To format dates and times with angular, any <em>Date and/or date string can be passed into a filter</em>:
      </p>

      <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="c">&lt;!-- this shows up as Sep 9, 2012 --&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;string-date&quot;</span><span class="nt">&gt;</span>{{ &#39;2012-09-01&#39; | date:&#39;medium&#39; }}<span class="nt">&lt;/span&gt;</span>

<span class="c">&lt;!-- same thing but longer and using a variable  --&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;string-date&quot;</span><span class="nt">&gt;</span>{{ someDateVariable | date:&#39;fullDate&#39; }}<span class="nt">&lt;/span&gt;</span> 

<span class="c">&lt;!-- and you can set your own --&gt;</span> 
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;string-date&quot;</span><span class="nt">&gt;</span>{{ anotherDateVariable | date:&#39;EEEE, MMMM d,y&#39; }}<span class="nt">&lt;/span&gt;</span> 
</code></pre>
</div>

      </div>

      <p>
        You can also access the date filter directly within your controllers and services with use of the <em>$filter</em> service.
      </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">dateFilter</span> <span class="o">=</span> <span class="nx">$filter</span><span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">mediumDateString</span>  <span class="o">=</span> <span class="nx">dateFilter</span><span class="p">(</span><span class="s1">&#39;2012-09-01&#39;</span><span class="p">,</span> <span class="s1">&#39;medium&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">fullDateString</span>    <span class="o">=</span> <span class="nx">dateFilter</span><span class="p">(</span><span class="nx">someDateVariable</span><span class="p">,</span> <span class="s1">&#39;fullDate&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">anotherDateString</span> <span class="o">=</span> <span class="nx">dateFilter</span><span class="p">(</span><span class="nx">anotherDateVariable</span><span class="p">,</span> <span class="s1">&#39;EEEE, MMMM d,y&#39;</span><span class="p">);</span>
</code></pre>
</div>

    </div>

      <p>
        <a href="http://docs.angularjs.org/api/ng.filter:date" target="_blank" class="btn">
          <span class="icon-file em2"></span> Click here to find out more about <em>AngularJS Date and Time Filters</em>
        </a>
      </p>
    </section>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#how-promises-work" class="anchor-link" id="how-promises-work">How Promises Work</a>
      </h3>
    </header>

    <p>
      Promises are basically vertical callbacks without the need for nested functions. This is useful for when one part of the program
      needs to run after something else but is situated in a different area of your application. Examples would include running a permissions
      HTTP GET operation after checking to see that the user's session is still active (this could be another HTTP call). To get this to work
      without the use of promises would be a coding nightmare (lots of callbacks and useless coding fluff).
    </p>

    <p>
      AngularJS promises work effectively to get around this by use of the <em>$q service</em>. They're inspired by <em>Kris Kowall's Q</em> and work
      similarly. Basically, anything that does something that requires a callback is wrapped into a defer and promise loop and then once that particular
      promise is resolved (whether by <em>reject()</em> or <em>resolve()</em>) then the next defered promise in the queue is dealt with. So long as the promises are linked
      with each other (much like the nodes in a queue are linked to each other) then everything will be loaded one after the other.
    </p>

    <p>
      <a href="http://github.com/kriskowal/q" target="_blank" class="btn">
        <span class="icon-github em2"></span> Click here to find out more the Q plugin on <em>Github</em>
      </a>
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="c1">//be sure to inject the $q member</span>
<span class="kd">var</span> <span class="nx">lastPromise</span><span class="p">,</span> <span class="nx">defer</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
<span class="kd">function</span> <span class="nx">runCommand</span><span class="p">(</span><span class="nx">success</span><span class="p">,</span> <span class="nx">fail</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">lastPromise</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">lastPromise</span> <span class="o">=</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span> 
  <span class="p">}</span>
  <span class="nx">lastPromise</span> <span class="o">=</span>  <span class="nx">lastPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">success</span><span class="p">,</span> <span class="nx">fail</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>
</div>

    </div>

    <p>
      This will create a chain of promises linked together sequentially. 
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">runCommand</span><span class="p">(</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">anyArguments</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//Success! Resolved!</span>
  <span class="p">},</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">anyArguments</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//Failure! Rejected!</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre>
</div>

    </div>

    <p>
      Now when you run <em>defer.reject() or defer.resolve()</em> then this will kick things into motion. If you run the <em>resolve</em> 
      command then everything within the queue will run under the first method (<em>the success method</em>) and if you run the <em>reject</em>
      command then everything within the queue will run under the second method (<em>the fail method</em>).
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="k">if</span><span class="p">(</span><span class="nx">allIsGood</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">defer</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">anyArguments</span><span class="p">);</span> <span class="c1">//runs success()</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
  <span class="nx">defer</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">anyArguments</span><span class="p">);</span> <span class="c1">//runs fail()</span>
<span class="p">}</span>
</code></pre>
</div>

    </div>

    <p>
      The functionality itself is the same as running a series of nested functions together linked with callbacks. If anything above it fails
      then any of it's nested child methods will also fail. The only difference is that you can organize the code much better. Angular also uses
      this internally for feautres such as <em>interceptors</em>.
    </p>

    <p>
      <a href="http://docs.angularjs.org/api/ng.$q" target="_blank" class="btn">
        <span class="icon-file em2"></span> Click here to find out more about <em>$q on AngularJS</em>
      </a>
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#includes-and-custom-html-views" class="anchor-link" id="includes-and-custom-html-views">Includes and Custom HTML Views</a>
      </h3>
    </header>

    <section class="inner">
      <header>
        <h4>Includes (using ngInclude)</h4>
      </header>

      <p>
        If you have an area of your HTML page where you would like to include another snippet of text then you can do this by using the
        <em>data-ng-include</em> attribute.
      </p>

      <div class="syntax">
<div class="highlight"><pre><code class="html">  <span class="nt">&lt;div</span> <span class="na">data-ng-include</span> <span class="na">src=</span><span class="s">&quot;/some/path/to/a/template.html&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

      </div>

      <p>You can also define it without the custom <em>src attribute</em> and use the include attribute directly.

      <div class="syntax">
<div class="highlight"><pre><code class="html">  <span class="c">&lt;!-- this is same as above --&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">data-ng-include=</span><span class="s">&quot;/some/path/to/a/template.html&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

      </div>

      <p>
        The above line will get loaded right away when angular parses the HTML. So to get this to load when you have data available then
        do this:
      </p>

      <div class="syntax">
<div class="highlight"><pre><code class="html">  <span class="nt">&lt;div</span> <span class="na">data-ng-show=</span><span class="s">&quot;someVariable&quot;</span> <span class="na">data-ng-include=</span><span class="s">&quot;someVariable&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

      </div>

      <p>
        And setup the <em>$scope.someVariable</em> variable to a value when you're ready to display the include.
      </p>

      <p>
        Once the include has been downloaded and is ready then the <em>$scope.$on('$includeContentLoaded');</em> will be <em>emitted</em>. Also
        if you include an <em>onload</em> attribute within the same element then that attribute will also be evaluated once the include is ready.
      </p>

      <p>
        <a href="http://docs.angularjs.org/api/ng.directive:ngInclude" target="_blank" class="btn">
          <span class="icon-file em2"></span> Click here to view more about <em>AngularJS ngInclude</em>
        </a>
      </p>

    </section>

    <section class="inner">
      <header>
        <h4>Custom HTML and $compile</h4>
      </header>

      <p>
        There will be times when you may want to compile your own HTML as a view (modal windows, popups, etc...) so to get this to work you will have to
        hack the program around a bit using the <em>$compile</em> service.
      </p>

      <p>
        Lets assume that you want to load a modal window and you want the contents of the modal window to be run through a controller called <em>ModalCtrl</em>.
        Here's what your HTML will look like.
      </p>

      <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">data-ng-controller=</span><span class="s">&quot;ModalCtrl&quot;</span> <span class="na">id=</span><span class="s">&quot;modal-container&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;header&gt;</span>
    {{ header_title }}
  <span class="nt">&lt;/header&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
    {{ content }}
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

      </div>

      And your controller looks like so:

      <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">ModalCtrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">header_title</span> <span class="o">=</span> <span class="s1">&#39;My Modal&#39;</span><span class="p">;</span>

  <span class="nx">$scope</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">ModalCtrl</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">];</span>
</code></pre>
</div>

      </div>

      <p>
        Now in your application somewhere you have a directive to load that modal. First it downloads it's content and then compiles it.
        Once it's compliled then the controller will be run automatically.
      </p>

      <div class="syntax">
<div class="highlight"><pre><code class="javascript"><span class="nx">App</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;modalLink&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="s1">&#39;$compile&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">$compile</span><span class="p">)</span> <span class="p">{</span>

  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">element</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/some-modal.html&#39;</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">//you may need to trim the whitespace around this if you&#39;re using</span>
        <span class="c1">//jquery since sizzle breaks if you dont...</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">$</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">)</span> <span class="nx">html</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span> 
        <span class="k">if</span><span class="p">(</span><span class="nx">html</span><span class="p">.</span><span class="nx">trim</span><span class="p">)</span> <span class="nx">html</span> <span class="o">=</span> <span class="nx">html</span><span class="p">.</span><span class="nx">trim</span><span class="p">();</span> <span class="c1">//or MooTools</span>

        <span class="c1">//this is custom HTML you have fetched </span>
        <span class="kd">var</span> <span class="nx">topScope</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">scope</span><span class="p">();</span>
        <span class="kd">var</span> <span class="nx">elm</span> <span class="o">=</span> <span class="nx">$compile</span><span class="p">(</span><span class="nx">html</span><span class="p">)(</span><span class="nx">topScope</span><span class="p">);</span> <span class="c1">//you should provide the top level scope so that it can find the modal in between</span>

        <span class="c1">//now just stick this somewhere in your body as an element</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">elm</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">});</span>
  <span class="p">};</span>

<span class="p">});</span>
</code></pre>
</div>

      </div>

      <p>
        Now angular will recognize the modal HTML and the controller set within it's <em>data-ng-controller</em> attribute. Then it will run
        through the code and execute the <em>ModalCtrl</em> controller. Now all of the logic contained within the ModalCtrl controller will be
        applied directly into the container of the modal HTML (it's the HTML where it has <em>id="modal-container"</em>.
      </p>

      <p>
        There's much more to this than just compiling HTML. The angular template and templateUrl attributes for directives use it in the background to 
        prepare templates for controllers and so on.
      </p>

    <p>
      <a href="http://docs.angularjs.org/api/ng.$compile" class="btn" target="_blank">
        <span class="icon-file em2"></span> Click here to read more about <em>AngularJS $compile</em>
      </a>
    </p>
    </section>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#inline-templates" class="anchor-link" id="inline-templates">Inline Templates</a>
      </h3>
    </header>

    <p>
      If you plan on reusing templates a lot within your application, then you can do so by using <em>inline templates (script tag templates)</em>. By setting up a
      script element with <em>type="text/ng-template"</em> then you can setup your templating data and then use that directly within your HTML
      elsewhere. Here's an example of how to do that:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="text">&lt;script type=&quot;text/ng-template&quot; id=&quot;heading-template&quot;&gt;
  &lt;h5&gt;Hello There &lt;/h5&gt;
&lt;/script&gt;
</code></pre>
</div>

    </div>

    <p>
      Now you can summon this template within <em>ng-view</em> or <em>ng-include</em>. The data inside the script tags will be applied as the template html.
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="c">&lt;!-- </span>
<span class="c">  keep in mind that there are quotes around the &#39;heading-template&#39; </span>
<span class="c">  so that angular won&#39;t confuse it with a variable</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;something&quot;</span> <span class="na">data-ng-include=</span><span class="s">&quot;&#39;heading-template&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      If you set the template inner HTML as empty and then use an include or template with the path pointing to the ID of that template then
      <em>AngularJS will download the file from your server just like any other template would be downloaded</em>. There really is no point in making an empty
      ng-template script tag since there is no differnce between having it there or not having it there. AngularJS will still download the template from the server
      (whatever is set to templateUrl) if it's not found in its template cache.
    </p>

    <p>
      Using inline templates is best used for pages that contain a lot of variance between items. Examples would include having a list of
      items that contain various partials that can be assigned to each item. Instead of having to load each partial within your response template
      you can just prefetch each template and keep them in the HTML. And you can also <em>define inline templates within other templates</em> (so that if they're
      downloaded from the server they stick around in the template cache.
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#how-to-make-sure-your-directives-are-run-after-your-scope-is-ready" class="anchor-link" id="how-to-make-sure-your-directives-are-run-after-your-scope-is-ready">How to Make Sure Your Directives are run After Your Scope is Ready</a>
      </h3>
    </header>

    <p>
      Your <em>controller</em> and any <em>directives</em> within the template loaded prior to the controller will <em>all</em> execute once the template is loaded.
      This means that if you have data that needs to be fetched prior to your directive rendering then you will have to make sure you directive will
      only execute once it's $scope contains the dynamic data that is generated/fetched within the controller. Other issues such as <em>early plugin
      loading</em> can be a problem since you have your <em>data being fetched</em> after your plugins are instantiated. This could mean that the your plugins
      will display old data from the dom (maybe even raw binding data) because the new data didn't make it in time to the template. To get around this
      you will have to instruct your plugins to update themselves to load the new DOM data. This is something that you shouldn't have to deal with and this should
      be automatic.
    </p>

    <p>
      To get around this issue you will have to either poll some special variable <em>such as $scope.isReady</em> using the <em>$scope.$watch()</em> method, but this
      tends to break sometimes. A much better solution is to use a promise using the <em>$q</em> variable and set this up within the <em>$rootScope</em>.
    </p>

    <p>
      The following was originally apart of this article, however, due to it's complexity it has been ported to a
      <a href="https://github.com/yearofmoo/AngularJS-Scope.onReady" class="em" target="_blank">plugin and hosted on Github</a>.
      Here's an example of how to use the plugin to ensure that directives are run after your controller is ready.
    </p>

    <div class="syntax" data-syntax-github="https://github.com/yearofmoo/AngularJS-Scope.onReady">
<div class="highlight"><pre><code class="javascript"><span class="c1">//your controller</span>
<span class="kd">var</span> <span class="nx">Ctrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$prepareForReady</span><span class="p">();</span>
  <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/some.json&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">someArgs</span> <span class="o">=</span> <span class="p">[</span><span class="nx">json</span><span class="p">.</span><span class="nx">data</span><span class="p">];</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">$onReady</span><span class="p">(</span><span class="nx">someArgs</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">someArgs</span> <span class="o">=</span> <span class="p">[</span><span class="kc">null</span><span class="p">];</span> <span class="c1">//just some argument</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">$onFailure</span><span class="p">(</span><span class="nx">someArgs</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">};</span>

<span class="c1">//your directive</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;myDirective&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">controller</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$whenReady</span><span class="p">(</span>
      <span class="kd">function</span><span class="p">(</span><span class="nx">someArgs</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//called when $scope.$onReady() is run</span>
        <span class="nx">element</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;your data was loaded fine&#39;</span><span class="p">);</span>
        <span class="nx">element</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
      <span class="p">},</span>
      <span class="kd">function</span><span class="p">(</span><span class="nx">someArgs</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//called when $scope.$onFailure() is run</span>
        <span class="nx">element</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;something went wrong when fetching the data&#39;</span><span class="p">);</span>
        <span class="nx">element</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
      <span class="p">}</span>
    <span class="p">);</span>
  <span class="p">};</span>

<span class="p">});</span>
</code></pre>
</div>

    </div>

    <p>
      The <em>directive HTML is just like any other directive</em> (just including it here so that everything is covered).
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;something&quot;</span> <span class="na">style=</span><span class="s">&quot;display:none&quot;</span> <span class="na">data-my-directive</span><span class="nt">&gt;</span>
  ...this data will get replaced once it&#39;s ready...
<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <p>
      <a href="https://github.com/yearofmoo/AngularJS-Scope.onReady" target="_blank" class="btn">
        <span class="icon-github em2"></span> Click here to <em>download the plugin</em>
      </a>
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

  <section class="outer">
    <header>
      <h3>
        <a href="#more-angular-html-tricks" class="anchor-link" id="more-angular-html-tricks">More Angular HTML Tricks</a>
      </h3>
    </header>

    <p>
      There are a few other tricks that are useful with AngularJS that I didn't cover in the article fully. Take a look below:
    </p>

    <div class="syntax">
<div class="highlight"><pre><code class="html"><span class="c">&lt;!--- when null then it won&#39;t be checked ---&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-ng-checked=</span><span class="s">&quot;value&quot;</span> <span class="nt">/&gt;</span>


<span class="c">&lt;!--- when null then it won&#39;t be selected ---&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;radio&quot;</span> <span class="na">data-ng-selected=</span><span class="s">&quot;value&quot;</span> <span class="nt">/&gt;</span>


<span class="c">&lt;!--- when null then it won&#39;t be disabled ---&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;radio&quot;</span> <span class="na">data-ng-disabled=</span><span class="s">&quot;value&quot;</span> <span class="nt">/&gt;</span>


<span class="c">&lt;!--- this will fire the $scope.onChange() method when changed (make sure you set the model) ---&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;input&quot;</span> <span class="na">data-ng-change=</span><span class="s">&quot;onChange()&quot;</span> <span class="na">data-ng-model=</span><span class="s">&quot;name&quot;</span> <span class="nt">/&gt;</span>


<span class="c">&lt;!--- use this if your images are casuing errors ---&gt;</span>
<span class="nt">&lt;img</span> <span class="na">data-ng-src=</span><span class="s">&quot;{{ imagePath }}&quot;</span> <span class="nt">/&gt;</span>


<span class="c">&lt;!--- use this if your links are casuing errors ---&gt;</span>
<span class="nt">&lt;a</span> <span class="na">data-ng-href=</span><span class="s">&quot;{{ linkPath }}&quot;</span><span class="nt">&gt;</span>Link<span class="nt">&lt;/a&gt;</span>


<span class="c">&lt;!--</span>
<span class="c">  This should select option elements properly,</span>
<span class="c">  just make sure that the is_selected()</span>
<span class="c">  method is defined as apart of your scope ($scope.is_selected()).</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;select&gt;</span>
  <span class="nt">&lt;option</span> <span class="na">data-ng-selected=</span><span class="s">&quot;is_selected(option.value)&quot;</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;option in options&quot;</span><span class="nt">&gt;&lt;/option&gt;</span>
<span class="nt">&lt;/select&gt;</span>


<span class="c">&lt;!--</span>
<span class="c">  You can set alternating colors, but remember that the &#39;odd&#39;</span>
<span class="c">  and &#39;even&#39; values include quotes since if they didn&#39;t then angular would</span>
<span class="c">  think that they are variables and would evaulate their values and then apply</span>
<span class="c">  them as class values.</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;list&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;list-item&quot;</span> <span class="na">data-ng-class-odd=</span><span class="s">&quot;&#39;odd&#39;&quot;</span> <span class="na">data-ng-class=</span><span class="s">&quot;&#39;even&#39;&quot;</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;item in items&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>


<span class="c">&lt;!--- $scope.someClassName = &#39;something&#39; ---&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;something&quot;</span> <span class="na">data-ng-class=</span><span class="s">&quot;someClassName&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre>
</div>

    </div>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>


  <section class="outer">
    <header>
      <h3>
        <a href="#conclusion" class="anchor-link" id="conclusion">Conclusion</a>
      </h3>
    </header>

    <p>
      That's it for now. Thank you everyone for your interest in the previous article. Hopefully this fills more of the gaps of knowledge behind AngularJS.
      Please share and link this article and push it forward across the internet. Who knows, maybe another <em>AngularJS article may be in works</em> ;)
    </p>

    <p>
      What an amazing tool! Thank you :)
    </p>

    <nav class="jump">
      <a href="#top" class="top">To Top</a>
    </nav>
  </section>

</article>

          
        </div>

        
          <div data-role="Share" class="share-toolbar">
  <div class="share-toolbox addthis_toolbox addthis_default_style">
    <a href="#" class="addthis_button_facebook_like"></a>
    <a href="#" class="addthis_button_tweet"></a>
    <a href="#" class="addthis_button_google_plusone"></a>
    <a href="#" class="addthis_counter addthis_pill_style"></a>
  </div>
</div>

        

        <p class="contact-links lazy">
  <a href="http://twitter.com/yearofmoo" class="btn" target="_blank">
    <span class="icon-twitter em2"></span> Yearofmoo <em>Twitter Page</em>
  </a>
  <a href="http://www.facebook.com/yearofmoo" class="btn" target="_blank">
    <span class="icon-facebook em2"></span> Yearofmoo <em>Facebook Page</em>
  </a>
  <a href="/contact.html" class="btn last" target="_blank">
    <span class="icon-envelope em2"></span> <em>Contact</em> Yearofmoo
  </a>
</p>

        <div data-role="Disqus">
  <div id="disqus_thread"></div>
  <nav class="jump">
    <a href="#top" class="top">To Top</a>
  </nav>
</div>

      </section>
    </div>
    <div id="footer">

</div>

  </div>
<script type="text/javascript">document.body.className += ' js';</script>

<script src="/assets/application-196eb66a17ee67e0e0bcdb24eab5671f.js" type="text/javascript"></script>
<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-21121403-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
